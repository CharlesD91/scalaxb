// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package generated2

import scala.concurrent.{ Future, ExecutionContext }


/**
usage:
val obj = scalaxb.fromXML[generated2.Foo](node)
val document = scalaxb.toXML[generated2.Foo](obj, "foo", generated2.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "urn:com.workday/bsvc/Payroll",
    Some("tns") -> "urn:com.workday/bsvc/Payroll",
    Some("wd") -> "urn:com.workday/bsvc",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Generated2_Instance_IDTypeFormat: scalaxb.XMLFormat[generated2.Instance_IDType] = new DefaultGenerated2_Instance_IDTypeFormat {}
  implicit lazy val Generated2_InstanceObjectTypeFormat: scalaxb.XMLFormat[generated2.InstanceObjectType] = new DefaultGenerated2_InstanceObjectTypeFormat {}
  implicit lazy val Generated2_Workday_Common_HeaderTypeFormat: scalaxb.XMLFormat[generated2.Workday_Common_HeaderType] = new DefaultGenerated2_Workday_Common_HeaderTypeFormat {}
  implicit lazy val Generated2_Country_ReferenceTypeFormat: scalaxb.XMLFormat[generated2.Country_ReferenceType] = new DefaultGenerated2_Country_ReferenceTypeFormat {}
  implicit lazy val Generated2_Employee_ReferenceTypeFormat: scalaxb.XMLFormat[generated2.Employee_ReferenceType] = new DefaultGenerated2_Employee_ReferenceTypeFormat {}
  implicit lazy val Generated2_Contingent_Worker_Reference_DataTypeFormat: scalaxb.XMLFormat[generated2.Contingent_Worker_Reference_DataType] = new DefaultGenerated2_Contingent_Worker_Reference_DataTypeFormat {}
  implicit lazy val Generated2_External_Integration_ID_Reference_DataTypeFormat: scalaxb.XMLFormat[generated2.External_Integration_ID_Reference_DataType] = new DefaultGenerated2_External_Integration_ID_Reference_DataTypeFormat {}
  implicit lazy val Generated2_Name_DataTypeFormat: scalaxb.XMLFormat[generated2.Name_DataType] = new DefaultGenerated2_Name_DataTypeFormat {}
  implicit lazy val Generated2_IDTypeFormat: scalaxb.XMLFormat[generated2.IDType] = new DefaultGenerated2_IDTypeFormat {}
  implicit lazy val Generated2_Worker_ReferenceTypeFormat: scalaxb.XMLFormat[generated2.Worker_ReferenceType] = new DefaultGenerated2_Worker_ReferenceTypeFormat {}
  implicit lazy val Generated2_Currency_Reference_DataTypeFormat: scalaxb.XMLFormat[generated2.Currency_Reference_DataType] = new DefaultGenerated2_Currency_Reference_DataTypeFormat {}
  implicit lazy val Generated2_Receiving_Party_Bank_DataTypeFormat: scalaxb.XMLFormat[generated2.Receiving_Party_Bank_DataType] = new DefaultGenerated2_Receiving_Party_Bank_DataTypeFormat {}
  implicit lazy val Generated2_Communication_Method_Usage_DataTypeFormat: scalaxb.XMLFormat[generated2.Communication_Method_Usage_DataType] = new DefaultGenerated2_Communication_Method_Usage_DataTypeFormat {}
  implicit lazy val Generated2_Communication_Usage_Type_ReferenceTypeFormat: scalaxb.XMLFormat[generated2.Communication_Usage_Type_ReferenceType] = new DefaultGenerated2_Communication_Usage_Type_ReferenceTypeFormat {}
  implicit lazy val Generated2_Last_Name_DataTypeFormat: scalaxb.XMLFormat[generated2.Last_Name_DataType] = new DefaultGenerated2_Last_Name_DataTypeFormat {}
  implicit lazy val Generated2_Prefix_Name_DataTypeFormat: scalaxb.XMLFormat[generated2.Prefix_Name_DataType] = new DefaultGenerated2_Prefix_Name_DataTypeFormat {}
  implicit lazy val Generated2_Suffix_Name_DataTypeFormat: scalaxb.XMLFormat[generated2.Suffix_Name_DataType] = new DefaultGenerated2_Suffix_Name_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Marital_Status_ReferenceTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Marital_Status_ReferenceType] = new DefaultGenerated2_Payroll_Marital_Status_ReferenceTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_FUTA_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_FUTA_DataType] = new DefaultGenerated2_Payroll_Payee_FUTA_DataTypeFormat {}
  implicit lazy val Generated2_Earning_ReferenceTypeFormat: scalaxb.XMLFormat[generated2.Earning_ReferenceType] = new DefaultGenerated2_Earning_ReferenceTypeFormat {}
  implicit lazy val Generated2_Deduction_ReferenceTypeFormat: scalaxb.XMLFormat[generated2.Deduction_ReferenceType] = new DefaultGenerated2_Deduction_ReferenceTypeFormat {}
  implicit lazy val Generated2_Pay_Component_ReferenceTypeFormat: scalaxb.XMLFormat[generated2.Pay_Component_ReferenceType] = new DefaultGenerated2_Pay_Component_ReferenceTypeFormat {}
  implicit lazy val Generated2_Support_Order_Dependent_DataTypeFormat: scalaxb.XMLFormat[generated2.Support_Order_Dependent_DataType] = new DefaultGenerated2_Support_Order_Dependent_DataTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Fee_DataTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Fee_DataType] = new DefaultGenerated2_Withholding_Order_Fee_DataTypeFormat {}
  implicit lazy val Generated2_Response_FilterTypeFormat: scalaxb.XMLFormat[generated2.Response_FilterType] = new DefaultGenerated2_Response_FilterTypeFormat {}
  implicit lazy val Generated2_Response_ResultsTypeFormat: scalaxb.XMLFormat[generated2.Response_ResultsType] = new DefaultGenerated2_Response_ResultsTypeFormat {}
  implicit lazy val Generated2_Federal_Tax_Levy_Dependent_ReferenceTypeFormat: scalaxb.XMLFormat[generated2.Federal_Tax_Levy_Dependent_ReferenceType] = new DefaultGenerated2_Federal_Tax_Levy_Dependent_ReferenceTypeFormat {}
  implicit lazy val Generated2_Worker_Tax_ElectionsTypeFormat: scalaxb.XMLFormat[generated2.Worker_Tax_ElectionsType] = new DefaultGenerated2_Worker_Tax_ElectionsTypeFormat {}
  implicit lazy val Generated2_Business_Process_Comment_DataTypeFormat: scalaxb.XMLFormat[generated2.Business_Process_Comment_DataType] = new DefaultGenerated2_Business_Process_Comment_DataTypeFormat {}
  implicit lazy val Generated2_Business_Process_ParametersTypeFormat: scalaxb.XMLFormat[generated2.Business_Process_ParametersType] = new DefaultGenerated2_Business_Process_ParametersTypeFormat {}
  implicit lazy val Generated2_Contact_Information_DataTypeFormat: scalaxb.XMLFormat[generated2.Contact_Information_DataType] = new DefaultGenerated2_Contact_Information_DataTypeFormat {}
  implicit lazy val Generated2_Address_Information_DataTypeFormat: scalaxb.XMLFormat[generated2.Address_Information_DataType] = new DefaultGenerated2_Address_Information_DataTypeFormat {}
  implicit lazy val Generated2_Phone_Information_DataTypeFormat: scalaxb.XMLFormat[generated2.Phone_Information_DataType] = new DefaultGenerated2_Phone_Information_DataTypeFormat {}
  implicit lazy val Generated2_Email_Address_Information_DataTypeFormat: scalaxb.XMLFormat[generated2.Email_Address_Information_DataType] = new DefaultGenerated2_Email_Address_Information_DataTypeFormat {}
  implicit lazy val Generated2_Instant_Messenger_Information_DataTypeFormat: scalaxb.XMLFormat[generated2.Instant_Messenger_Information_DataType] = new DefaultGenerated2_Instant_Messenger_Information_DataTypeFormat {}
  implicit lazy val Generated2_Web_Address_Information_DataTypeFormat: scalaxb.XMLFormat[generated2.Web_Address_Information_DataType] = new DefaultGenerated2_Web_Address_Information_DataTypeFormat {}
  implicit lazy val Generated2_Address_Line_Information_DataTypeFormat: scalaxb.XMLFormat[generated2.Address_Line_Information_DataType] = new DefaultGenerated2_Address_Line_Information_DataTypeFormat {}
  implicit lazy val Generated2_Submunicipality_Information_DataTypeFormat: scalaxb.XMLFormat[generated2.Submunicipality_Information_DataType] = new DefaultGenerated2_Submunicipality_Information_DataTypeFormat {}
  implicit lazy val Generated2_Subregion_Information_DataTypeFormat: scalaxb.XMLFormat[generated2.Subregion_Information_DataType] = new DefaultGenerated2_Subregion_Information_DataTypeFormat {}
  implicit lazy val Generated2_Communication_Method_Usage_Information_DataTypeFormat: scalaxb.XMLFormat[generated2.Communication_Method_Usage_Information_DataType] = new DefaultGenerated2_Communication_Method_Usage_Information_DataTypeFormat {}
  implicit lazy val Generated2_Communication_Usage_Type_DataTypeFormat: scalaxb.XMLFormat[generated2.Communication_Usage_Type_DataType] = new DefaultGenerated2_Communication_Usage_Type_DataTypeFormat {}
  implicit lazy val Generated2_National_ID_DataTypeFormat: scalaxb.XMLFormat[generated2.National_ID_DataType] = new DefaultGenerated2_National_ID_DataTypeFormat {}
  implicit lazy val Generated2_Paycheck_Delivery_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Paycheck_Delivery_Request_ReferencesType] = new DefaultGenerated2_Paycheck_Delivery_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Paycheck_Delivery_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Paycheck_Delivery_Request_CriteriaType] = new DefaultGenerated2_Paycheck_Delivery_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Paycheck_Delivery_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Paycheck_Delivery_Response_GroupType] = new DefaultGenerated2_Paycheck_Delivery_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Paycheck_DeliveryTypeFormat: scalaxb.XMLFormat[generated2.Paycheck_DeliveryType] = new DefaultGenerated2_Paycheck_DeliveryTypeFormat {}
  implicit lazy val Generated2_Paycheck_Delivery_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Paycheck_Delivery_Response_DataType] = new DefaultGenerated2_Paycheck_Delivery_Response_DataTypeFormat {}
  implicit lazy val Generated2_Paycheck_Delivery_DataTypeFormat: scalaxb.XMLFormat[generated2.Paycheck_Delivery_DataType] = new DefaultGenerated2_Paycheck_Delivery_DataTypeFormat {}
  implicit lazy val Generated2_Bankruptcy_Order_Specific_DataTypeFormat: scalaxb.XMLFormat[generated2.Bankruptcy_Order_Specific_DataType] = new DefaultGenerated2_Bankruptcy_Order_Specific_DataTypeFormat {}
  implicit lazy val Generated2_Creditor_Garnishment_Specific_DataTypeFormat: scalaxb.XMLFormat[generated2.Creditor_Garnishment_Specific_DataType] = new DefaultGenerated2_Creditor_Garnishment_Specific_DataTypeFormat {}
  implicit lazy val Generated2_Federal_Tax_Levy_Specific_DataTypeFormat: scalaxb.XMLFormat[generated2.Federal_Tax_Levy_Specific_DataType] = new DefaultGenerated2_Federal_Tax_Levy_Specific_DataTypeFormat {}
  implicit lazy val Generated2_Wage_Assignment_Specific_DataTypeFormat: scalaxb.XMLFormat[generated2.Wage_Assignment_Specific_DataType] = new DefaultGenerated2_Wage_Assignment_Specific_DataTypeFormat {}
  implicit lazy val Generated2_Exception_DataTypeFormat: scalaxb.XMLFormat[generated2.Exception_DataType] = new DefaultGenerated2_Exception_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Result_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Result_Request_CriteriaType] = new DefaultGenerated2_Payroll_Result_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_Result_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Result_Response_GroupType] = new DefaultGenerated2_Payroll_Result_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Results_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Results_RequestType] = new DefaultGenerated2_Get_Payroll_Results_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_ResultTypeFormat: scalaxb.XMLFormat[generated2.Payroll_ResultType] = new DefaultGenerated2_Payroll_ResultTypeFormat {}
  implicit lazy val Generated2_Payroll_Result_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Result_Response_DataType] = new DefaultGenerated2_Payroll_Result_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Results_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Results_ResponseType] = new DefaultGenerated2_Get_Payroll_Results_ResponseTypeFormat {}
  implicit lazy val Generated2_Result_Line_Details_for_Get_Payroll_ResultsTypeFormat: scalaxb.XMLFormat[generated2.Result_Line_Details_for_Get_Payroll_ResultsType] = new DefaultGenerated2_Result_Line_Details_for_Get_Payroll_ResultsTypeFormat {}
  implicit lazy val Generated2_Related_Calculation_Data_for_Get_Payroll_ResultsTypeFormat: scalaxb.XMLFormat[generated2.Related_Calculation_Data_for_Get_Payroll_ResultsType] = new DefaultGenerated2_Related_Calculation_Data_for_Get_Payroll_ResultsTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Data_for_Get_Payroll_ResultsTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Data_for_Get_Payroll_ResultsType] = new DefaultGenerated2_Withholding_Order_Data_for_Get_Payroll_ResultsTypeFormat {}
  implicit lazy val Generated2_Payroll_Worktag_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Worktag_DataType] = new DefaultGenerated2_Payroll_Worktag_DataTypeFormat {}
  implicit lazy val Generated2_Business_Entity_WWS_DataTypeFormat: scalaxb.XMLFormat[generated2.Business_Entity_WWS_DataType] = new DefaultGenerated2_Business_Entity_WWS_DataTypeFormat {}
  implicit lazy val Generated2_Pay_Calculations_SelectedTypeFormat: scalaxb.XMLFormat[generated2.Pay_Calculations_SelectedType] = new DefaultGenerated2_Pay_Calculations_SelectedTypeFormat {}
  implicit lazy val Generated2_Payroll_Input_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Input_Request_ReferencesType] = new DefaultGenerated2_Payroll_Input_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Input_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Input_Request_CriteriaType] = new DefaultGenerated2_Payroll_Input_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_Input_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Input_Response_GroupType] = new DefaultGenerated2_Payroll_Input_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Balances_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Balances_RequestType] = new DefaultGenerated2_Get_Payroll_Balances_RequestTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Balances_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Balances_ResponseType] = new DefaultGenerated2_Get_Payroll_Balances_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Balance_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Balance_Request_CriteriaType] = new DefaultGenerated2_Payroll_Balance_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_Balance_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Balance_Response_GroupType] = new DefaultGenerated2_Payroll_Balance_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Payroll_Balance_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Balance_Response_DataType] = new DefaultGenerated2_Payroll_Balance_Response_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_BalanceTypeFormat: scalaxb.XMLFormat[generated2.Payroll_BalanceType] = new DefaultGenerated2_Payroll_BalanceTypeFormat {}
  implicit lazy val Generated2_Pay_Calculation_SelectionTypeFormat: scalaxb.XMLFormat[generated2.Pay_Calculation_SelectionType] = new DefaultGenerated2_Pay_Calculation_SelectionTypeFormat {}
  implicit lazy val Generated2_Pay_Calculation_Balance_DataTypeFormat: scalaxb.XMLFormat[generated2.Pay_Calculation_Balance_DataType] = new DefaultGenerated2_Pay_Calculation_Balance_DataTypeFormat {}
  implicit lazy val Generated2_Pay_Calculation_ReferenceTypeFormat: scalaxb.XMLFormat[generated2.Pay_Calculation_ReferenceType] = new DefaultGenerated2_Pay_Calculation_ReferenceTypeFormat {}
  implicit lazy val Generated2_Balance_Period_Data_for_Get_Payroll_BalancesTypeFormat: scalaxb.XMLFormat[generated2.Balance_Period_Data_for_Get_Payroll_BalancesType] = new DefaultGenerated2_Balance_Period_Data_for_Get_Payroll_BalancesTypeFormat {}
  implicit lazy val Generated2_Balance_Period_Detail_DataTypeFormat: scalaxb.XMLFormat[generated2.Balance_Period_Detail_DataType] = new DefaultGenerated2_Balance_Period_Detail_DataTypeFormat {}
  implicit lazy val Generated2_Settlement_Account_WWS_DataTypeFormat: scalaxb.XMLFormat[generated2.Settlement_Account_WWS_DataType] = new DefaultGenerated2_Settlement_Account_WWS_DataTypeFormat {}
  implicit lazy val Generated2_Business_Entity_Logo_Image_DataTypeFormat: scalaxb.XMLFormat[generated2.Business_Entity_Logo_Image_DataType] = new DefaultGenerated2_Business_Entity_Logo_Image_DataTypeFormat {}
  implicit lazy val Generated2_Name_Data_for_Get_Payroll_ResultsTypeFormat: scalaxb.XMLFormat[generated2.Name_Data_for_Get_Payroll_ResultsType] = new DefaultGenerated2_Name_Data_for_Get_Payroll_ResultsTypeFormat {}
  implicit lazy val Generated2_National_ID_Data_for_Get_Payroll_ResultsTypeFormat: scalaxb.XMLFormat[generated2.National_ID_Data_for_Get_Payroll_ResultsType] = new DefaultGenerated2_National_ID_Data_for_Get_Payroll_ResultsTypeFormat {}
  implicit lazy val Generated2_Application_Instance_Exceptions_DataTypeFormat: scalaxb.XMLFormat[generated2.Application_Instance_Exceptions_DataType] = new DefaultGenerated2_Application_Instance_Exceptions_DataTypeFormat {}
  implicit lazy val Generated2_Application_Instance_Related_Exceptions_DataTypeFormat: scalaxb.XMLFormat[generated2.Application_Instance_Related_Exceptions_DataType] = new DefaultGenerated2_Application_Instance_Related_Exceptions_DataTypeFormat {}
  implicit lazy val Generated2_Business_Entity_Alternate_Name_DataTypeFormat: scalaxb.XMLFormat[generated2.Business_Entity_Alternate_Name_DataType] = new DefaultGenerated2_Business_Entity_Alternate_Name_DataTypeFormat {}
  implicit lazy val Generated2_Field_And_Parameter_Criteria_DataTypeFormat: scalaxb.XMLFormat[generated2.Field_And_Parameter_Criteria_DataType] = new DefaultGenerated2_Field_And_Parameter_Criteria_DataTypeFormat {}
  implicit lazy val Generated2_Document_Field_Result_DataTypeFormat: scalaxb.XMLFormat[generated2.Document_Field_Result_DataType] = new DefaultGenerated2_Document_Field_Result_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Offu45cycle_Payment_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_Payment_DataType] = new DefaultGenerated2_Payroll_Offu45cycle_Payment_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Offu45cycle_Payment_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Offu45cycle_Payment_RequestType] = new DefaultGenerated2_Put_Payroll_Offu45cycle_Payment_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Offu45cycle_Payment_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Offu45cycle_Payment_ResponseType] = new DefaultGenerated2_Put_Payroll_Offu45cycle_Payment_ResponseTypeFormat {}
  implicit lazy val Generated2_On_Demand_Payment_DataTypeFormat: scalaxb.XMLFormat[generated2.On_Demand_Payment_DataType] = new DefaultGenerated2_On_Demand_Payment_DataTypeFormat {}
  implicit lazy val Generated2_Manual_Payment_DataTypeFormat: scalaxb.XMLFormat[generated2.Manual_Payment_DataType] = new DefaultGenerated2_Manual_Payment_DataTypeFormat {}
  implicit lazy val Generated2_Offu45cycle_Input_Line_DataTypeFormat: scalaxb.XMLFormat[generated2.Offu45cycle_Input_Line_DataType] = new DefaultGenerated2_Offu45cycle_Input_Line_DataTypeFormat {}
  implicit lazy val Generated2_Offu45cycle_Input_DataTypeFormat: scalaxb.XMLFormat[generated2.Offu45cycle_Input_DataType] = new DefaultGenerated2_Offu45cycle_Input_DataTypeFormat {}
  implicit lazy val Generated2_Result_Worktag_Overrides_DataTypeFormat: scalaxb.XMLFormat[generated2.Result_Worktag_Overrides_DataType] = new DefaultGenerated2_Result_Worktag_Overrides_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Input_Worktags_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Input_Worktags_DataType] = new DefaultGenerated2_Payroll_Input_Worktags_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_History_Payment_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_History_Payment_DataType] = new DefaultGenerated2_Payroll_History_Payment_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_History_Payment_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_History_Payment_RequestType] = new DefaultGenerated2_Put_Payroll_History_Payment_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_History_Payment_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_History_Payment_ResponseType] = new DefaultGenerated2_Put_Payroll_History_Payment_ResponseTypeFormat {}
  implicit lazy val Generated2_History_Payment_DataTypeFormat: scalaxb.XMLFormat[generated2.History_Payment_DataType] = new DefaultGenerated2_History_Payment_DataTypeFormat {}
  implicit lazy val Generated2_History_Payment_Input_DataTypeFormat: scalaxb.XMLFormat[generated2.History_Payment_Input_DataType] = new DefaultGenerated2_History_Payment_Input_DataTypeFormat {}
  implicit lazy val Generated2_History_Payment_Input_Line_DataTypeFormat: scalaxb.XMLFormat[generated2.History_Payment_Input_Line_DataType] = new DefaultGenerated2_History_Payment_Input_Line_DataTypeFormat {}
  implicit lazy val Generated2_Submit_Payroll_Input_RequestTypeFormat: scalaxb.XMLFormat[generated2.Submit_Payroll_Input_RequestType] = new DefaultGenerated2_Submit_Payroll_Input_RequestTypeFormat {}
  implicit lazy val Generated2_Submit_Payroll_Input_DataTypeFormat: scalaxb.XMLFormat[generated2.Submit_Payroll_Input_DataType] = new DefaultGenerated2_Submit_Payroll_Input_DataTypeFormat {}
  implicit lazy val Generated2_Additional_Input_DetailsTypeFormat: scalaxb.XMLFormat[generated2.Additional_Input_DetailsType] = new DefaultGenerated2_Additional_Input_DetailsTypeFormat {}
  implicit lazy val Generated2_Submit_Payroll_Input_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Submit_Payroll_Input_ResponseType] = new DefaultGenerated2_Submit_Payroll_Input_ResponseTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_History_Payments_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_History_Payments_RequestType] = new DefaultGenerated2_Get_Payroll_History_Payments_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_History_PaymentTypeFormat: scalaxb.XMLFormat[generated2.Payroll_History_PaymentType] = new DefaultGenerated2_Payroll_History_PaymentTypeFormat {}
  implicit lazy val Generated2_Payroll_History_Payment_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_History_Payment_Response_DataType] = new DefaultGenerated2_Payroll_History_Payment_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_History_Payments_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_History_Payments_ResponseType] = new DefaultGenerated2_Get_Payroll_History_Payments_ResponseTypeFormat {}
  implicit lazy val Generated2_Worker_Payroll_Reporting_Code_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Payroll_Reporting_Code_DataType] = new DefaultGenerated2_Worker_Payroll_Reporting_Code_DataTypeFormat {}
  implicit lazy val Generated2_Period_Schedule_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Period_Schedule_Request_ReferencesType] = new DefaultGenerated2_Period_Schedule_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Period_Schedule_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Period_Schedule_Request_CriteriaType] = new DefaultGenerated2_Period_Schedule_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Period_Schedule_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Period_Schedule_Response_GroupType] = new DefaultGenerated2_Period_Schedule_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Period_Schedules_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Period_Schedules_RequestType] = new DefaultGenerated2_Get_Period_Schedules_RequestTypeFormat {}
  implicit lazy val Generated2_Period_ScheduleTypeFormat: scalaxb.XMLFormat[generated2.Period_ScheduleType] = new DefaultGenerated2_Period_ScheduleTypeFormat {}
  implicit lazy val Generated2_Period_Schedule_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Period_Schedule_Response_DataType] = new DefaultGenerated2_Period_Schedule_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Period_Schedules_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Period_Schedules_ResponseType] = new DefaultGenerated2_Get_Period_Schedules_ResponseTypeFormat {}
  implicit lazy val Generated2_Originating_Party_WWS_DataTypeFormat: scalaxb.XMLFormat[generated2.Originating_Party_WWS_DataType] = new DefaultGenerated2_Originating_Party_WWS_DataTypeFormat {}
  implicit lazy val Generated2_Period_Schedule_DataTypeFormat: scalaxb.XMLFormat[generated2.Period_Schedule_DataType] = new DefaultGenerated2_Period_Schedule_DataTypeFormat {}
  implicit lazy val Generated2_Period_DataTypeFormat: scalaxb.XMLFormat[generated2.Period_DataType] = new DefaultGenerated2_Period_DataTypeFormat {}
  implicit lazy val Generated2_Put_Period_Schedule_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Period_Schedule_RequestType] = new DefaultGenerated2_Put_Period_Schedule_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Period_Schedule_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Period_Schedule_ResponseType] = new DefaultGenerated2_Put_Period_Schedule_ResponseTypeFormat {}
  implicit lazy val Generated2_Receiving_Party_WWS_DataTypeFormat: scalaxb.XMLFormat[generated2.Receiving_Party_WWS_DataType] = new DefaultGenerated2_Receiving_Party_WWS_DataTypeFormat {}
  implicit lazy val Generated2_Originating_Party_Bank_DataTypeFormat: scalaxb.XMLFormat[generated2.Originating_Party_Bank_DataType] = new DefaultGenerated2_Originating_Party_Bank_DataTypeFormat {}
  implicit lazy val Generated2_Get_Submit_Payroll_Inputs_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Submit_Payroll_Inputs_RequestType] = new DefaultGenerated2_Get_Submit_Payroll_Inputs_RequestTypeFormat {}
  implicit lazy val Generated2_Get_Submit_Payroll_Inputs_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Submit_Payroll_Inputs_ResponseType] = new DefaultGenerated2_Get_Submit_Payroll_Inputs_ResponseTypeFormat {}
  implicit lazy val Generated2_Submit_Payroll_Input_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Submit_Payroll_Input_Response_DataType] = new DefaultGenerated2_Submit_Payroll_Input_Response_DataTypeFormat {}
  implicit lazy val Generated2_Submit_Payroll_InputTypeFormat: scalaxb.XMLFormat[generated2.Submit_Payroll_InputType] = new DefaultGenerated2_Submit_Payroll_InputTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_DataType] = new DefaultGenerated2_Payroll_Remittance_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_Worker_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_Worker_DataType] = new DefaultGenerated2_Payroll_Remittance_Worker_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_Gross_And_Net_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_Gross_And_Net_DataType] = new DefaultGenerated2_Payroll_Remittance_Gross_And_Net_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_Total_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_Total_DataType] = new DefaultGenerated2_Payroll_Remittance_Total_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_Earnings_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_Earnings_DataType] = new DefaultGenerated2_Payroll_Remittance_Earnings_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_Pre_Tax_Deduction_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_Pre_Tax_Deduction_DataType] = new DefaultGenerated2_Payroll_Remittance_Pre_Tax_Deduction_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_Post_Tax_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_Post_Tax_DataType] = new DefaultGenerated2_Payroll_Remittance_Post_Tax_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_Employee_Taxes_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_Employee_Taxes_DataType] = new DefaultGenerated2_Payroll_Remittance_Employee_Taxes_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_Employer_Paid_Benefits_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_Employer_Paid_Benefits_DataType] = new DefaultGenerated2_Payroll_Remittance_Employer_Paid_Benefits_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_Taxable_Wages_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_Taxable_Wages_DataType] = new DefaultGenerated2_Payroll_Remittance_Taxable_Wages_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_Absence_PlanTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_Absence_PlanType] = new DefaultGenerated2_Payroll_Remittance_Absence_PlanTypeFormat {}
  implicit lazy val Generated2_Payroll_Remittance_Payslip_Message_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Remittance_Payslip_Message_DataType] = new DefaultGenerated2_Payroll_Remittance_Payslip_Message_DataTypeFormat {}
  implicit lazy val Generated2_Payment_History_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payment_History_Request_ReferencesType] = new DefaultGenerated2_Payment_History_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Costing_Allocation_DataTypeFormat: scalaxb.XMLFormat[generated2.Costing_Allocation_DataType] = new DefaultGenerated2_Costing_Allocation_DataTypeFormat {}
  implicit lazy val Generated2_Assign_Costing_Allocation_RequestTypeFormat: scalaxb.XMLFormat[generated2.Assign_Costing_Allocation_RequestType] = new DefaultGenerated2_Assign_Costing_Allocation_RequestTypeFormat {}
  implicit lazy val Generated2_Assign_Costing_Allocation_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Assign_Costing_Allocation_ResponseType] = new DefaultGenerated2_Assign_Costing_Allocation_ResponseTypeFormat {}
  implicit lazy val Generated2_Worker_Annual_Tax_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Annual_Tax_DataType] = new DefaultGenerated2_Worker_Annual_Tax_DataTypeFormat {}
  implicit lazy val Generated2_Nonu45Qualified_Pension_DataTypeFormat: scalaxb.XMLFormat[generated2.Nonu45Qualified_Pension_DataType] = new DefaultGenerated2_Nonu45Qualified_Pension_DataTypeFormat {}
  implicit lazy val Generated2_Deferred_and_Other_Compensation_DataTypeFormat: scalaxb.XMLFormat[generated2.Deferred_and_Other_Compensation_DataType] = new DefaultGenerated2_Deferred_and_Other_Compensation_DataTypeFormat {}
  implicit lazy val Generated2_Additional_DataTypeFormat: scalaxb.XMLFormat[generated2.Additional_DataType] = new DefaultGenerated2_Additional_DataTypeFormat {}
  implicit lazy val Generated2_Other_Data_WrapperTypeFormat: scalaxb.XMLFormat[generated2.Other_Data_WrapperType] = new DefaultGenerated2_Other_Data_WrapperTypeFormat {}
  implicit lazy val Generated2_Other_DataTypeFormat: scalaxb.XMLFormat[generated2.Other_DataType] = new DefaultGenerated2_Other_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Annual_Tax_Data_WrapperTypeFormat: scalaxb.XMLFormat[generated2.Worker_Annual_Tax_Data_WrapperType] = new DefaultGenerated2_Worker_Annual_Tax_Data_WrapperTypeFormat {}
  implicit lazy val Generated2_Payroll_Payslip_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payslip_Request_CriteriaType] = new DefaultGenerated2_Payroll_Payslip_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payslips_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payslips_RequestType] = new DefaultGenerated2_Get_Payroll_Payslips_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_PayslipTypeFormat: scalaxb.XMLFormat[generated2.Payroll_PayslipType] = new DefaultGenerated2_Payroll_PayslipTypeFormat {}
  implicit lazy val Generated2_Payroll_Payslip_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payslip_Response_DataType] = new DefaultGenerated2_Payroll_Payslip_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payslips_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payslips_ResponseType] = new DefaultGenerated2_Get_Payroll_Payslips_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Payslip_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payslip_DataType] = new DefaultGenerated2_Payroll_Payslip_DataTypeFormat {}
  implicit lazy val Generated2_Payslip_Run_Category_DataTypeFormat: scalaxb.XMLFormat[generated2.Payslip_Run_Category_DataType] = new DefaultGenerated2_Payslip_Run_Category_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Payslip_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payslip_Response_GroupType] = new DefaultGenerated2_Payroll_Payslip_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Payslip_Payment_DataTypeFormat: scalaxb.XMLFormat[generated2.Payslip_Payment_DataType] = new DefaultGenerated2_Payslip_Payment_DataTypeFormat {}
  implicit lazy val Generated2_Local_Name_DataTypeFormat: scalaxb.XMLFormat[generated2.Local_Name_DataType] = new DefaultGenerated2_Local_Name_DataTypeFormat {}
  implicit lazy val Generated2_Local_Last_Name_DataTypeFormat: scalaxb.XMLFormat[generated2.Local_Last_Name_DataType] = new DefaultGenerated2_Local_Last_Name_DataTypeFormat {}
  implicit lazy val Generated2_Costing_Allocation_Interval_DataTypeFormat: scalaxb.XMLFormat[generated2.Costing_Allocation_Interval_DataType] = new DefaultGenerated2_Costing_Allocation_Interval_DataTypeFormat {}
  implicit lazy val Generated2_Costing_Allocation_Detail_Replacement_DataTypeFormat: scalaxb.XMLFormat[generated2.Costing_Allocation_Detail_Replacement_DataType] = new DefaultGenerated2_Costing_Allocation_Detail_Replacement_DataTypeFormat {}
  implicit lazy val Generated2_Get_Quarterly_Worker_Tax_Data_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Quarterly_Worker_Tax_Data_RequestType] = new DefaultGenerated2_Get_Quarterly_Worker_Tax_Data_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_FICA_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_FICA_RequestType] = new DefaultGenerated2_Put_Payroll_Payee_FICA_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_FICA_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_FICA_ResponseType] = new DefaultGenerated2_Put_Payroll_Payee_FICA_ResponseTypeFormat {}
  implicit lazy val Generated2_Quarterly_Worker_Tax_Data_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Quarterly_Worker_Tax_Data_Response_GroupType] = new DefaultGenerated2_Quarterly_Worker_Tax_Data_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Quarterly_Worker_Tax_Data_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Quarterly_Worker_Tax_Data_Request_CriteriaType] = new DefaultGenerated2_Quarterly_Worker_Tax_Data_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_Quarterly_Worker_Tax_Data_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Quarterly_Worker_Tax_Data_ResponseType] = new DefaultGenerated2_Get_Quarterly_Worker_Tax_Data_ResponseTypeFormat {}
  implicit lazy val Generated2_Quarterly_Worker_Tax_Data_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Quarterly_Worker_Tax_Data_Response_DataType] = new DefaultGenerated2_Quarterly_Worker_Tax_Data_Response_DataTypeFormat {}
  implicit lazy val Generated2_Quarterly_Worker_Tax_Filing_DataTypeFormat: scalaxb.XMLFormat[generated2.Quarterly_Worker_Tax_Filing_DataType] = new DefaultGenerated2_Quarterly_Worker_Tax_Filing_DataTypeFormat {}
  implicit lazy val Generated2_Periodic_Tax_Filing_Data_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Periodic_Tax_Filing_Data_Request_CriteriaType] = new DefaultGenerated2_Periodic_Tax_Filing_Data_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_Periodic_Worker_Tax_Filing_Data_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Periodic_Worker_Tax_Filing_Data_RequestType] = new DefaultGenerated2_Get_Periodic_Worker_Tax_Filing_Data_RequestTypeFormat {}
  implicit lazy val Generated2_Periodic_Tax_Filing_Data_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Periodic_Tax_Filing_Data_Response_GroupType] = new DefaultGenerated2_Periodic_Tax_Filing_Data_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Periodic_Worker_Tax_Filing_Data_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Periodic_Worker_Tax_Filing_Data_ResponseType] = new DefaultGenerated2_Get_Periodic_Worker_Tax_Filing_Data_ResponseTypeFormat {}
  implicit lazy val Generated2_Periodic_Worker_Tax_Filing_Data_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Periodic_Worker_Tax_Filing_Data_Response_DataType] = new DefaultGenerated2_Periodic_Worker_Tax_Filing_Data_Response_DataTypeFormat {}
  implicit lazy val Generated2_Peridoic_Worker_Tax_Filing_DataTypeFormat: scalaxb.XMLFormat[generated2.Peridoic_Worker_Tax_Filing_DataType] = new DefaultGenerated2_Peridoic_Worker_Tax_Filing_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Result_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Result_DataType] = new DefaultGenerated2_Payroll_Result_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Result_Detail_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Result_Detail_DataType] = new DefaultGenerated2_Payroll_Result_Detail_DataTypeFormat {}
  implicit lazy val Generated2_QTD_Tax_Filing_Data_for_Periodic_WorkerTypeFormat: scalaxb.XMLFormat[generated2.QTD_Tax_Filing_Data_for_Periodic_WorkerType] = new DefaultGenerated2_QTD_Tax_Filing_Data_for_Periodic_WorkerTypeFormat {}
  implicit lazy val Generated2_YTD_Tax_Filing_Data_for_Periodic_WorkerTypeFormat: scalaxb.XMLFormat[generated2.YTD_Tax_Filing_Data_for_Periodic_WorkerType] = new DefaultGenerated2_YTD_Tax_Filing_Data_for_Periodic_WorkerTypeFormat {}
  implicit lazy val Generated2_Get_Periodic_Company_Tax_Filing_Data_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Periodic_Company_Tax_Filing_Data_RequestType] = new DefaultGenerated2_Get_Periodic_Company_Tax_Filing_Data_RequestTypeFormat {}
  implicit lazy val Generated2_Get_Periodic_Company_Tax_Filing_Data_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Periodic_Company_Tax_Filing_Data_ResponseType] = new DefaultGenerated2_Get_Periodic_Company_Tax_Filing_Data_ResponseTypeFormat {}
  implicit lazy val Generated2_Periodic_Company_Tax_Filing_Data_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Periodic_Company_Tax_Filing_Data_Response_DataType] = new DefaultGenerated2_Periodic_Company_Tax_Filing_Data_Response_DataTypeFormat {}
  implicit lazy val Generated2_Periodic_Company_Tax_Filing_DataTypeFormat: scalaxb.XMLFormat[generated2.Periodic_Company_Tax_Filing_DataType] = new DefaultGenerated2_Periodic_Company_Tax_Filing_DataTypeFormat {}
  implicit lazy val Generated2_QTD_Tax_Filing_Data_for_Periodic_CompanyTypeFormat: scalaxb.XMLFormat[generated2.QTD_Tax_Filing_Data_for_Periodic_CompanyType] = new DefaultGenerated2_QTD_Tax_Filing_Data_for_Periodic_CompanyTypeFormat {}
  implicit lazy val Generated2_YTD_Tax_Filing_Data_for_Periodic_CompanyTypeFormat: scalaxb.XMLFormat[generated2.YTD_Tax_Filing_Data_for_Periodic_CompanyType] = new DefaultGenerated2_YTD_Tax_Filing_Data_for_Periodic_CompanyTypeFormat {}
  implicit lazy val Generated2_Quarterly_Deduction_Tax_Filing_DataTypeFormat: scalaxb.XMLFormat[generated2.Quarterly_Deduction_Tax_Filing_DataType] = new DefaultGenerated2_Quarterly_Deduction_Tax_Filing_DataTypeFormat {}
  implicit lazy val Generated2_YTD_Tax_Filing_Data_for_Quarterly_WorkerTypeFormat: scalaxb.XMLFormat[generated2.YTD_Tax_Filing_Data_for_Quarterly_WorkerType] = new DefaultGenerated2_YTD_Tax_Filing_Data_for_Quarterly_WorkerTypeFormat {}
  implicit lazy val Generated2_QTD_Tax_Filing_Data_for_Quarterly_WorkerTypeFormat: scalaxb.XMLFormat[generated2.QTD_Tax_Filing_Data_for_Quarterly_WorkerType] = new DefaultGenerated2_QTD_Tax_Filing_Data_for_Quarterly_WorkerTypeFormat {}
  implicit lazy val Generated2_Quarterly_Tax_Filing_Configuration_Data_WrapperTypeFormat: scalaxb.XMLFormat[generated2.Quarterly_Tax_Filing_Configuration_Data_WrapperType] = new DefaultGenerated2_Quarterly_Tax_Filing_Configuration_Data_WrapperTypeFormat {}
  implicit lazy val Generated2_Quarterly_Tax_Filing_Configuration_DataTypeFormat: scalaxb.XMLFormat[generated2.Quarterly_Tax_Filing_Configuration_DataType] = new DefaultGenerated2_Quarterly_Tax_Filing_Configuration_DataTypeFormat {}
  implicit lazy val Generated2_Quarterly_Tax_Filing_Category_DataTypeFormat: scalaxb.XMLFormat[generated2.Quarterly_Tax_Filing_Category_DataType] = new DefaultGenerated2_Quarterly_Tax_Filing_Category_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Tax_Authority_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Tax_Authority_DataType] = new DefaultGenerated2_Payroll_Tax_Authority_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_FICA_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_FICA_DataType] = new DefaultGenerated2_Payroll_Payee_FICA_DataTypeFormat {}
  implicit lazy val Generated2_Valuation_Date_Override_DataTypeFormat: scalaxb.XMLFormat[generated2.Valuation_Date_Override_DataType] = new DefaultGenerated2_Valuation_Date_Override_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_PT1_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_PT1_Request_ReferencesType] = new DefaultGenerated2_Payroll_Payee_PT1_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_PT1_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_PT1_Request_CriteriaType] = new DefaultGenerated2_Payroll_Payee_PT1_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_PT1_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_PT1_Response_GroupType] = new DefaultGenerated2_Payroll_Payee_PT1_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_PT1s_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_PT1s_RequestType] = new DefaultGenerated2_Get_Payroll_Payee_PT1s_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_PT1TypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_PT1Type] = new DefaultGenerated2_Payroll_Payee_PT1TypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_PT1_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_PT1_Response_DataType] = new DefaultGenerated2_Payroll_Payee_PT1_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_PT1s_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_PT1s_ResponseType] = new DefaultGenerated2_Get_Payroll_Payee_PT1s_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_PT1_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_PT1_DataType] = new DefaultGenerated2_Payroll_Payee_PT1_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_PT1_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_PT1_RequestType] = new DefaultGenerated2_Put_Payroll_Payee_PT1_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_PT1_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_PT1_ResponseType] = new DefaultGenerated2_Put_Payroll_Payee_PT1_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Data_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Data_Request_ReferencesType] = new DefaultGenerated2_Payroll_Payee_Tax_Data_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Data_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Data_Request_CriteriaType] = new DefaultGenerated2_Payroll_Payee_Tax_Data_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Data_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Data_Response_GroupType] = new DefaultGenerated2_Payroll_Payee_Tax_Data_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_FICAs_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_FICAs_RequestType] = new DefaultGenerated2_Get_Payroll_Payee_FICAs_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_DataType] = new DefaultGenerated2_Payroll_Payee_Tax_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Data_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Data_Response_DataType] = new DefaultGenerated2_Payroll_Payee_Tax_Data_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_FICAs_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_FICAs_ResponseType] = new DefaultGenerated2_Get_Payroll_Payee_FICAs_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Offu45cycle_Result_Override_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_Result_Override_Request_ReferencesType] = new DefaultGenerated2_Payroll_Offu45cycle_Result_Override_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Offu45cycle_Result_Override_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_Result_Override_Request_CriteriaType] = new DefaultGenerated2_Payroll_Offu45cycle_Result_Override_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Offu45cycle_Payments_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Offu45cycle_Payments_RequestType] = new DefaultGenerated2_Get_Payroll_Offu45cycle_Payments_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Offu45cycle_PaymentTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_PaymentType] = new DefaultGenerated2_Payroll_Offu45cycle_PaymentTypeFormat {}
  implicit lazy val Generated2_Payroll_Offu45cycle_Result_Override_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_Result_Override_Response_DataType] = new DefaultGenerated2_Payroll_Offu45cycle_Result_Override_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Offu45cycle_Payments_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Offu45cycle_Payments_ResponseType] = new DefaultGenerated2_Get_Payroll_Offu45cycle_Payments_ResponseTypeFormat {}
  implicit lazy val Generated2_Get_Company_Payment_Dates_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Company_Payment_Dates_RequestType] = new DefaultGenerated2_Get_Company_Payment_Dates_RequestTypeFormat {}
  implicit lazy val Generated2_Get_Company_Payment_Dates_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Company_Payment_Dates_ResponseType] = new DefaultGenerated2_Get_Company_Payment_Dates_ResponseTypeFormat {}
  implicit lazy val Generated2_Company_Payment_Dates_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Company_Payment_Dates_Request_CriteriaType] = new DefaultGenerated2_Company_Payment_Dates_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Company_Payment_Dates_DataTypeFormat: scalaxb.XMLFormat[generated2.Company_Payment_Dates_DataType] = new DefaultGenerated2_Company_Payment_Dates_DataTypeFormat {}
  implicit lazy val Generated2_Company_Payment_Dates_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Company_Payment_Dates_Response_DataType] = new DefaultGenerated2_Company_Payment_Dates_Response_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_TD1_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_TD1_Request_ReferencesType] = new DefaultGenerated2_Payroll_Payee_TD1_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_TD1_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_TD1_Request_CriteriaType] = new DefaultGenerated2_Payroll_Payee_TD1_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_TD1_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_TD1_Response_GroupType] = new DefaultGenerated2_Payroll_Payee_TD1_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_TD1s_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_TD1s_RequestType] = new DefaultGenerated2_Get_Payroll_Payee_TD1s_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_TD1TypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_TD1Type] = new DefaultGenerated2_Payroll_Payee_TD1TypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_TD1_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_TD1_Response_DataType] = new DefaultGenerated2_Payroll_Payee_TD1_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_TD1s_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_TD1s_ResponseType] = new DefaultGenerated2_Get_Payroll_Payee_TD1s_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_TD1_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_TD1_DataType] = new DefaultGenerated2_Payroll_Payee_TD1_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_TD1_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_TD1_RequestType] = new DefaultGenerated2_Put_Payroll_Payee_TD1_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_T1_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_T1_ResponseType] = new DefaultGenerated2_Put_Payroll_Payee_T1_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Result_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Result_Request_ReferencesType] = new DefaultGenerated2_Payroll_Result_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Canadian_Record_of_Employment_Data_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Canadian_Record_of_Employment_Data_Request_ReferencesType] = new DefaultGenerated2_Canadian_Record_of_Employment_Data_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Canadian_Record_of_Employment_Data_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Canadian_Record_of_Employment_Data_Request_CriteriaType] = new DefaultGenerated2_Canadian_Record_of_Employment_Data_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Canadian_Record_of_Employment_Data_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Canadian_Record_of_Employment_Data_Response_GroupType] = new DefaultGenerated2_Canadian_Record_of_Employment_Data_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Canadian_Record_of_Employment_Data_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Canadian_Record_of_Employment_Data_RequestType] = new DefaultGenerated2_Get_Canadian_Record_of_Employment_Data_RequestTypeFormat {}
  implicit lazy val Generated2_Canadian_Record_of_Employment_DataTypeFormat: scalaxb.XMLFormat[generated2.Canadian_Record_of_Employment_DataType] = new DefaultGenerated2_Canadian_Record_of_Employment_DataTypeFormat {}
  implicit lazy val Generated2_Canadian_Record_of_Employment_Data_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Canadian_Record_of_Employment_Data_Response_DataType] = new DefaultGenerated2_Canadian_Record_of_Employment_Data_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Canadian_Record_of_Employment_Data_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Canadian_Record_of_Employment_Data_ResponseType] = new DefaultGenerated2_Get_Canadian_Record_of_Employment_Data_ResponseTypeFormat {}
  implicit lazy val Generated2_Canadian_Record_of_Employment_Insurable_Earnings_By_Period_DataTypeFormat: scalaxb.XMLFormat[generated2.Canadian_Record_of_Employment_Insurable_Earnings_By_Period_DataType] = new DefaultGenerated2_Canadian_Record_of_Employment_Insurable_Earnings_By_Period_DataTypeFormat {}
  implicit lazy val Generated2_ROE_History_DataTypeFormat: scalaxb.XMLFormat[generated2.ROE_History_DataType] = new DefaultGenerated2_ROE_History_DataTypeFormat {}
  implicit lazy val Generated2_Put_ROE_History_Data_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_ROE_History_Data_RequestType] = new DefaultGenerated2_Put_ROE_History_Data_RequestTypeFormat {}
  implicit lazy val Generated2_Put_ROE_History_Data_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_ROE_History_Data_ResponseType] = new DefaultGenerated2_Put_ROE_History_Data_ResponseTypeFormat {}
  implicit lazy val Generated2_ROE_History_Data_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.ROE_History_Data_Request_ReferencesType] = new DefaultGenerated2_ROE_History_Data_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_ROE_History_Data_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.ROE_History_Data_Request_CriteriaType] = new DefaultGenerated2_ROE_History_Data_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_ROE_History_Data_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.ROE_History_Data_Response_GroupType] = new DefaultGenerated2_ROE_History_Data_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_ROE_History_Data_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_ROE_History_Data_RequestType] = new DefaultGenerated2_Get_ROE_History_Data_RequestTypeFormat {}
  implicit lazy val Generated2_ROE_History_Data_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.ROE_History_Data_Response_DataType] = new DefaultGenerated2_ROE_History_Data_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_ROE_History_Data_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_ROE_History_Data_ResponseType] = new DefaultGenerated2_Get_ROE_History_Data_ResponseTypeFormat {}
  implicit lazy val Generated2_ROE_HistoryTypeFormat: scalaxb.XMLFormat[generated2.ROE_HistoryType] = new DefaultGenerated2_ROE_HistoryTypeFormat {}
  implicit lazy val Generated2_Other_Monies_DataTypeFormat: scalaxb.XMLFormat[generated2.Other_Monies_DataType] = new DefaultGenerated2_Other_Monies_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Offu45cycle_Payment_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_Payment_Response_DataType] = new DefaultGenerated2_Payroll_Offu45cycle_Payment_Response_DataTypeFormat {}
  implicit lazy val Generated2_Canadian_Record_of_Employment_Paid_Sick_Leave__Maternity_and_Wage_Loss_Detail_DataTypeFormat: scalaxb.XMLFormat[generated2.Canadian_Record_of_Employment_Paid_Sick_Leave__Maternity_and_Wage_Loss_Detail_DataType] = new DefaultGenerated2_Canadian_Record_of_Employment_Paid_Sick_Leave__Maternity_and_Wage_Loss_Detail_DataTypeFormat {}
  implicit lazy val Generated2_Canadian_Record_of_Employment_Data_DataTypeFormat: scalaxb.XMLFormat[generated2.Canadian_Record_of_Employment_Data_DataType] = new DefaultGenerated2_Canadian_Record_of_Employment_Data_DataTypeFormat {}
  implicit lazy val Generated2_Put_Canadian_Record_of_Employment_Data_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Canadian_Record_of_Employment_Data_RequestType] = new DefaultGenerated2_Put_Canadian_Record_of_Employment_Data_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Canadian_Record_of_Employment_Data_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Canadian_Record_of_Employment_Data_ResponseType] = new DefaultGenerated2_Put_Canadian_Record_of_Employment_Data_ResponseTypeFormat {}
  implicit lazy val Generated2_Pay_Accumulation_Data_for_Get_Payroll_ResultsTypeFormat: scalaxb.XMLFormat[generated2.Pay_Accumulation_Data_for_Get_Payroll_ResultsType] = new DefaultGenerated2_Pay_Accumulation_Data_for_Get_Payroll_ResultsTypeFormat {}
  implicit lazy val Generated2_Medicare_Exempt_DataTypeFormat: scalaxb.XMLFormat[generated2.Medicare_Exempt_DataType] = new DefaultGenerated2_Medicare_Exempt_DataTypeFormat {}
  implicit lazy val Generated2_OASDI_Exempt_DataTypeFormat: scalaxb.XMLFormat[generated2.OASDI_Exempt_DataType] = new DefaultGenerated2_OASDI_Exempt_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Federal_Wu454_Tax_Election_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Federal_Wu454_Tax_Election_Request_ReferencesType] = new DefaultGenerated2_Payroll_Federal_Wu454_Tax_Election_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Federal_Wu454_Tax_Election_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Federal_Wu454_Tax_Election_Request_CriteriaType] = new DefaultGenerated2_Payroll_Federal_Wu454_Tax_Election_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_Federal_Wu454_Tax_Election_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Federal_Wu454_Tax_Election_Response_GroupType] = new DefaultGenerated2_Payroll_Federal_Wu454_Tax_Election_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Federal_Wu454_Tax_Elections_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Federal_Wu454_Tax_Elections_RequestType] = new DefaultGenerated2_Get_Payroll_Federal_Wu454_Tax_Elections_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Federal_Wu454_Tax_ElectionTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Federal_Wu454_Tax_ElectionType] = new DefaultGenerated2_Payroll_Federal_Wu454_Tax_ElectionTypeFormat {}
  implicit lazy val Generated2_Payroll_Federal_Wu454_Tax_Election_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Federal_Wu454_Tax_Election_Response_DataType] = new DefaultGenerated2_Payroll_Federal_Wu454_Tax_Election_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Federal_Wu454_Tax_Elections_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Federal_Wu454_Tax_Elections_ResponseType] = new DefaultGenerated2_Get_Payroll_Federal_Wu454_Tax_Elections_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Federal_Wu454_Tax_Election_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Federal_Wu454_Tax_Election_DataType] = new DefaultGenerated2_Payroll_Federal_Wu454_Tax_Election_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Federal_Wu454_Tax_Election_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Federal_Wu454_Tax_Election_RequestType] = new DefaultGenerated2_Put_Payroll_Federal_Wu454_Tax_Election_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Federal_Wu454_Tax_Election_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Federal_Wu454_Tax_Election_ResponseType] = new DefaultGenerated2_Put_Payroll_Federal_Wu454_Tax_Election_ResponseTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Federal_Wu454_Tax_Election_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Federal_Wu454_Tax_Election_Response_DataType] = new DefaultGenerated2_Put_Payroll_Federal_Wu454_Tax_Election_Response_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Tax_Treaty_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Tax_Treaty_DataType] = new DefaultGenerated2_Worker_Tax_Treaty_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Worker_Tax_Treaty_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Worker_Tax_Treaty_RequestType] = new DefaultGenerated2_Put_Payroll_Worker_Tax_Treaty_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Worker_Tax_Treaty_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Worker_Tax_Treaty_ResponseType] = new DefaultGenerated2_Put_Worker_Tax_Treaty_ResponseTypeFormat {}
  implicit lazy val Generated2_Worker_Tax_Treaties_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Worker_Tax_Treaties_Request_ReferencesType] = new DefaultGenerated2_Worker_Tax_Treaties_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Worker_Tax_Treaties_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Worker_Tax_Treaties_Request_CriteriaType] = new DefaultGenerated2_Worker_Tax_Treaties_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Worker_Tax_Treaties_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Worker_Tax_Treaties_RequestType] = new DefaultGenerated2_Get_Payroll_Worker_Tax_Treaties_RequestTypeFormat {}
  implicit lazy val Generated2_Worker_Tax_TreatyTypeFormat: scalaxb.XMLFormat[generated2.Worker_Tax_TreatyType] = new DefaultGenerated2_Worker_Tax_TreatyTypeFormat {}
  implicit lazy val Generated2_Worker_Tax_Treaties_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Tax_Treaties_Response_DataType] = new DefaultGenerated2_Worker_Tax_Treaties_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Worker_Tax_Treaties_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Worker_Tax_Treaties_ResponseType] = new DefaultGenerated2_Get_Worker_Tax_Treaties_ResponseTypeFormat {}
  implicit lazy val Generated2_Put_Worker_Tax_Treaty_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Put_Worker_Tax_Treaty_Response_DataType] = new DefaultGenerated2_Put_Worker_Tax_Treaty_Response_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Involuntary_Withholding_Order_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Involuntary_Withholding_Order_Request_ReferencesType] = new DefaultGenerated2_Payroll_Involuntary_Withholding_Order_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Involuntary_Withholding_Order_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Involuntary_Withholding_Order_Request_CriteriaType] = new DefaultGenerated2_Payroll_Involuntary_Withholding_Order_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_Involuntary_Withholding_Order_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Involuntary_Withholding_Order_Response_GroupType] = new DefaultGenerated2_Payroll_Involuntary_Withholding_Order_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Involuntary_Withholding_Orders_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Involuntary_Withholding_Orders_RequestType] = new DefaultGenerated2_Get_Payroll_Involuntary_Withholding_Orders_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Involuntary_Withholding_OrderTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Involuntary_Withholding_OrderType] = new DefaultGenerated2_Payroll_Involuntary_Withholding_OrderTypeFormat {}
  implicit lazy val Generated2_Payroll_Involuntary_Withholding_Order_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Involuntary_Withholding_Order_Response_DataType] = new DefaultGenerated2_Payroll_Involuntary_Withholding_Order_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Involuntary_Withholding_Orders_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Involuntary_Withholding_Orders_ResponseType] = new DefaultGenerated2_Get_Payroll_Involuntary_Withholding_Orders_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Involuntary_Withholding_Order_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Involuntary_Withholding_Order_DataType] = new DefaultGenerated2_Payroll_Involuntary_Withholding_Order_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Support_Order_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Support_Order_DataType] = new DefaultGenerated2_Payroll_Support_Order_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Support_Order_Detail_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Support_Order_Detail_DataType] = new DefaultGenerated2_Payroll_Support_Order_Detail_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Involuntary_Withholding_Order_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Involuntary_Withholding_Order_RequestType] = new DefaultGenerated2_Put_Payroll_Involuntary_Withholding_Order_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Involuntary_Withholding_Order_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Involuntary_Withholding_Order_ResponseType] = new DefaultGenerated2_Put_Payroll_Involuntary_Withholding_Order_ResponseTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Involuntary_Withholding_Order_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Involuntary_Withholding_Order_Response_DataType] = new DefaultGenerated2_Put_Payroll_Involuntary_Withholding_Order_Response_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Support_Order_Lump_Sum_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Support_Order_Lump_Sum_DataType] = new DefaultGenerated2_Payroll_Support_Order_Lump_Sum_DataTypeFormat {}
  implicit lazy val Generated2_State_Tax_Levy_Order_DataTypeFormat: scalaxb.XMLFormat[generated2.State_Tax_Levy_Order_DataType] = new DefaultGenerated2_State_Tax_Levy_Order_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Support_Order_Amend_or_Terminate_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Support_Order_Amend_or_Terminate_DataType] = new DefaultGenerated2_Payroll_Support_Order_Amend_or_Terminate_DataTypeFormat {}
  implicit lazy val Generated2_State_Tax_Levy_Federal_DataTypeFormat: scalaxb.XMLFormat[generated2.State_Tax_Levy_Federal_DataType] = new DefaultGenerated2_State_Tax_Levy_Federal_DataTypeFormat {}
  implicit lazy val Generated2_Periodic_Company_Tax_Filing_Pay_Group_DataTypeFormat: scalaxb.XMLFormat[generated2.Periodic_Company_Tax_Filing_Pay_Group_DataType] = new DefaultGenerated2_Periodic_Company_Tax_Filing_Pay_Group_DataTypeFormat {}
  implicit lazy val Generated2_Change_No_Retro_Processing_Prior_To_DataTypeFormat: scalaxb.XMLFormat[generated2.Change_No_Retro_Processing_Prior_To_DataType] = new DefaultGenerated2_Change_No_Retro_Processing_Prior_To_DataTypeFormat {}
  implicit lazy val Generated2_Change_No_Retro_Processing_Prior_To_RequestTypeFormat: scalaxb.XMLFormat[generated2.Change_No_Retro_Processing_Prior_To_RequestType] = new DefaultGenerated2_Change_No_Retro_Processing_Prior_To_RequestTypeFormat {}
  implicit lazy val Generated2_Change_No_Retro_Processing_Prior_To_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Change_No_Retro_Processing_Prior_To_ResponseType] = new DefaultGenerated2_Change_No_Retro_Processing_Prior_To_ResponseTypeFormat {}
  implicit lazy val Generated2_Canadian_Record_of_Employment_Statutory_Holiday_Detail_DataTypeFormat: scalaxb.XMLFormat[generated2.Canadian_Record_of_Employment_Statutory_Holiday_Detail_DataType] = new DefaultGenerated2_Canadian_Record_of_Employment_Statutory_Holiday_Detail_DataTypeFormat {}
  implicit lazy val Generated2_WA_IIF_Deduction_DataTypeFormat: scalaxb.XMLFormat[generated2.WA_IIF_Deduction_DataType] = new DefaultGenerated2_WA_IIF_Deduction_DataTypeFormat {}
  implicit lazy val Generated2_Multiple_Worksite_Report_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Multiple_Worksite_Report_Request_CriteriaType] = new DefaultGenerated2_Multiple_Worksite_Report_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_Multiple_Worksite_Report_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Multiple_Worksite_Report_RequestType] = new DefaultGenerated2_Get_Multiple_Worksite_Report_RequestTypeFormat {}
  implicit lazy val Generated2_Get_Multiple_Worksite_Report_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Multiple_Worksite_Report_ResponseType] = new DefaultGenerated2_Get_Multiple_Worksite_Report_ResponseTypeFormat {}
  implicit lazy val Generated2_Multiple_Worksite_Report_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Multiple_Worksite_Report_Response_DataType] = new DefaultGenerated2_Multiple_Worksite_Report_Response_DataTypeFormat {}
  implicit lazy val Generated2_Multiple_Worksite_Report_DataTypeFormat: scalaxb.XMLFormat[generated2.Multiple_Worksite_Report_DataType] = new DefaultGenerated2_Multiple_Worksite_Report_DataTypeFormat {}
  implicit lazy val Generated2_Multiple_Worksite_Report_State_DataTypeFormat: scalaxb.XMLFormat[generated2.Multiple_Worksite_Report_State_DataType] = new DefaultGenerated2_Multiple_Worksite_Report_State_DataTypeFormat {}
  implicit lazy val Generated2_Worksite_DataTypeFormat: scalaxb.XMLFormat[generated2.Worksite_DataType] = new DefaultGenerated2_Worksite_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Limit_Override_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Limit_Override_Request_ReferencesType] = new DefaultGenerated2_Payroll_Limit_Override_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Limit_Override_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Limit_Override_Request_CriteriaType] = new DefaultGenerated2_Payroll_Limit_Override_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_Limit_Override_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Limit_Override_Response_GroupType] = new DefaultGenerated2_Payroll_Limit_Override_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Limit_Overrides_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Limit_Overrides_RequestType] = new DefaultGenerated2_Get_Payroll_Limit_Overrides_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Limit_OverrideTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Limit_OverrideType] = new DefaultGenerated2_Payroll_Limit_OverrideTypeFormat {}
  implicit lazy val Generated2_Payroll_Limit_Override_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Limit_Override_Response_DataType] = new DefaultGenerated2_Payroll_Limit_Override_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Limit_Overrides_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Limit_Overrides_ResponseType] = new DefaultGenerated2_Get_Payroll_Limit_Overrides_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Limit_Override_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Limit_Override_DataType] = new DefaultGenerated2_Payroll_Limit_Override_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Limit_Override_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Limit_Override_RequestType] = new DefaultGenerated2_Put_Payroll_Limit_Override_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Limit_Override_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Limit_Override_ResponseType] = new DefaultGenerated2_Put_Payroll_Limit_Override_ResponseTypeFormat {}
  implicit lazy val Generated2_Costing_Interval_Update_KeyTypeFormat: scalaxb.XMLFormat[generated2.Costing_Interval_Update_KeyType] = new DefaultGenerated2_Costing_Interval_Update_KeyTypeFormat {}
  implicit lazy val Generated2_Get_Worker_Costing_Allocations_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Worker_Costing_Allocations_RequestType] = new DefaultGenerated2_Get_Worker_Costing_Allocations_RequestTypeFormat {}
  implicit lazy val Generated2_Worker_Costing_Allocations_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Worker_Costing_Allocations_Request_CriteriaType] = new DefaultGenerated2_Worker_Costing_Allocations_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Worker_Costing_Allocations_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Worker_Costing_Allocations_Response_GroupType] = new DefaultGenerated2_Worker_Costing_Allocations_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Costing_Override_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Costing_Override_CriteriaType] = new DefaultGenerated2_Costing_Override_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_Worker_Costing_Allocations_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Worker_Costing_Allocations_ResponseType] = new DefaultGenerated2_Get_Worker_Costing_Allocations_ResponseTypeFormat {}
  implicit lazy val Generated2_Worker_Costing_Allocations_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Costing_Allocations_Response_DataType] = new DefaultGenerated2_Worker_Costing_Allocations_Response_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Costing_Allocations_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Costing_Allocations_DataType] = new DefaultGenerated2_Worker_Costing_Allocations_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Costing_Allocation_Interval_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Costing_Allocation_Interval_DataType] = new DefaultGenerated2_Worker_Costing_Allocation_Interval_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Costing_Allocation_Detail_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Costing_Allocation_Detail_DataType] = new DefaultGenerated2_Worker_Costing_Allocation_Detail_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesType] = new DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupType] = new DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestType] = new DefaultGenerated2_Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_RPP_or_DPSP_Registration_NumberTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumberType] = new DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_NumberTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_DataType] = new DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseType] = new DefaultGenerated2_Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_DataType] = new DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestType] = new DefaultGenerated2_Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseType] = new DefaultGenerated2_Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaType] = new DefaultGenerated2_Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_USA_State_and_Local_Tax_Election_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_USA_State_and_Local_Tax_Election_Response_GroupType] = new DefaultGenerated2_Payroll_USA_State_and_Local_Tax_Election_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_USA_State_and_Local_Tax_Elections_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_RequestType] = new DefaultGenerated2_Get_Payroll_USA_State_and_Local_Tax_Elections_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_State_and_Local_Tax_Election_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_State_and_Local_Tax_Election_Response_DataType] = new DefaultGenerated2_Payroll_State_and_Local_Tax_Election_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseType] = new DefaultGenerated2_Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_State_and_Local_Tax_ElectionsTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_State_and_Local_Tax_ElectionsType] = new DefaultGenerated2_Payroll_Payee_State_and_Local_Tax_ElectionsTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_State_Election_for_State_and_LocalTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_State_Election_for_State_and_LocalType] = new DefaultGenerated2_Payroll_Payee_State_Election_for_State_and_LocalTypeFormat {}
  implicit lazy val Generated2_State_Tax_Election_DataTypeFormat: scalaxb.XMLFormat[generated2.State_Tax_Election_DataType] = new DefaultGenerated2_State_Tax_Election_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_SUTA_Electon_for_State_and_LocalTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_SUTA_Electon_for_State_and_LocalType] = new DefaultGenerated2_Payroll_Payee_SUTA_Electon_for_State_and_LocalTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_EIC_Election_for_State_and_LocalTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_EIC_Election_for_State_and_LocalType] = new DefaultGenerated2_Payroll_Payee_EIC_Election_for_State_and_LocalTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_County_Election_for_State_and_LocalTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_County_Election_for_State_and_LocalType] = new DefaultGenerated2_Payroll_Payee_County_Election_for_State_and_LocalTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_City_Election_for_State_and_LocalTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_City_Election_for_State_and_LocalType] = new DefaultGenerated2_Payroll_Payee_City_Election_for_State_and_LocalTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_School_District_Election_for_State_and_LocalTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_School_District_Election_for_State_and_LocalType] = new DefaultGenerated2_Payroll_Payee_School_District_Election_for_State_and_LocalTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Other_Election_for_State_and_LocalTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Other_Election_for_State_and_LocalType] = new DefaultGenerated2_Payroll_Payee_Other_Election_for_State_and_LocalTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_USA_State_and_Local_Tax_Election_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_USA_State_and_Local_Tax_Election_RequestType] = new DefaultGenerated2_Put_Payroll_USA_State_and_Local_Tax_Election_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_USA_State_and_Local_Tax_Election_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_USA_State_and_Local_Tax_Election_ResponseType] = new DefaultGenerated2_Put_Payroll_USA_State_and_Local_Tax_Election_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesType] = new DefaultGenerated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaType] = new DefaultGenerated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType] = new DefaultGenerated2_Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType] = new DefaultGenerated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType] = new DefaultGenerated2_Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_ElectionTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_ElectionType] = new DefaultGenerated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_ElectionTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataType] = new DefaultGenerated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Ongoing_Jurisdiction_Splits_Tax_Election_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Ongoing_Jurisdiction_Splits_Tax_Election_DataType] = new DefaultGenerated2_Payroll_Payee_Ongoing_Jurisdiction_Splits_Tax_Election_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType] = new DefaultGenerated2_Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType] = new DefaultGenerated2_Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType] = new DefaultGenerated2_Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataTypeFormat {}
  implicit lazy val Generated2_Custom_Organization_Worktag_DataTypeFormat: scalaxb.XMLFormat[generated2.Custom_Organization_Worktag_DataType] = new DefaultGenerated2_Custom_Organization_Worktag_DataTypeFormat {}
  implicit lazy val Generated2_Federal_Student_Loan_Specific_DataTypeFormat: scalaxb.XMLFormat[generated2.Federal_Student_Loan_Specific_DataType] = new DefaultGenerated2_Federal_Student_Loan_Specific_DataTypeFormat {}
  implicit lazy val Generated2_Put_Import_Process_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Import_Process_ResponseType] = new DefaultGenerated2_Put_Import_Process_ResponseTypeFormat {}
  implicit lazy val Generated2_Monthly_Worker_Tax_Filing_Data_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Monthly_Worker_Tax_Filing_Data_CriteriaType] = new DefaultGenerated2_Monthly_Worker_Tax_Filing_Data_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_Monthly_Worker_Tax_Filing_Data_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Monthly_Worker_Tax_Filing_Data_RequestType] = new DefaultGenerated2_Get_Monthly_Worker_Tax_Filing_Data_RequestTypeFormat {}
  implicit lazy val Generated2_Monthly_Worker_Tax_Filing_Data_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Monthly_Worker_Tax_Filing_Data_Response_GroupType] = new DefaultGenerated2_Monthly_Worker_Tax_Filing_Data_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Monthly_Worker_Tax_Filing_Data_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Monthly_Worker_Tax_Filing_Data_ResponseType] = new DefaultGenerated2_Get_Monthly_Worker_Tax_Filing_Data_ResponseTypeFormat {}
  implicit lazy val Generated2_Monthly_Worker_Tax_Filing_Data_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Monthly_Worker_Tax_Filing_Data_Response_DataType] = new DefaultGenerated2_Monthly_Worker_Tax_Filing_Data_Response_DataTypeFormat {}
  implicit lazy val Generated2_Monthly_Worker_Tax_Filing_DataTypeFormat: scalaxb.XMLFormat[generated2.Monthly_Worker_Tax_Filing_DataType] = new DefaultGenerated2_Monthly_Worker_Tax_Filing_DataTypeFormat {}
  implicit lazy val Generated2_Monthly_Tax_Filing_Deduction_DataTypeFormat: scalaxb.XMLFormat[generated2.Monthly_Tax_Filing_Deduction_DataType] = new DefaultGenerated2_Monthly_Tax_Filing_Deduction_DataTypeFormat {}
  implicit lazy val Generated2_MTD_Tax_Filing_DataTypeFormat: scalaxb.XMLFormat[generated2.MTD_Tax_Filing_DataType] = new DefaultGenerated2_MTD_Tax_Filing_DataTypeFormat {}
  implicit lazy val Generated2_YTD_Tax_Filing_DataTypeFormat: scalaxb.XMLFormat[generated2.YTD_Tax_Filing_DataType] = new DefaultGenerated2_YTD_Tax_Filing_DataTypeFormat {}
  implicit lazy val Generated2_Limit_Interface_DataTypeFormat: scalaxb.XMLFormat[generated2.Limit_Interface_DataType] = new DefaultGenerated2_Limit_Interface_DataTypeFormat {}
  implicit lazy val Generated2_Repository_Document_MetadataTypeFormat: scalaxb.XMLFormat[generated2.Repository_Document_MetadataType] = new DefaultGenerated2_Repository_Document_MetadataTypeFormat {}
  implicit lazy val Generated2_Successor_Employer_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Successor_Employer_Request_ReferencesType] = new DefaultGenerated2_Successor_Employer_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Successor_Employer_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Successor_Employer_Response_GroupType] = new DefaultGenerated2_Successor_Employer_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Successor_Employers_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Successor_Employers_RequestType] = new DefaultGenerated2_Get_Successor_Employers_RequestTypeFormat {}
  implicit lazy val Generated2_Successor_EmployerTypeFormat: scalaxb.XMLFormat[generated2.Successor_EmployerType] = new DefaultGenerated2_Successor_EmployerTypeFormat {}
  implicit lazy val Generated2_Successor_Employer_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Successor_Employer_Response_DataType] = new DefaultGenerated2_Successor_Employer_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Successor_Employers_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Successor_Employers_ResponseType] = new DefaultGenerated2_Get_Successor_Employers_ResponseTypeFormat {}
  implicit lazy val Generated2_Successor_Employer_DataTypeFormat: scalaxb.XMLFormat[generated2.Successor_Employer_DataType] = new DefaultGenerated2_Successor_Employer_DataTypeFormat {}
  implicit lazy val Generated2_Put_Successor_Employer_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Successor_Employer_RequestType] = new DefaultGenerated2_Put_Successor_Employer_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Successor_Employer_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Successor_Employer_ResponseType] = new DefaultGenerated2_Put_Successor_Employer_ResponseTypeFormat {}
  implicit lazy val Generated2_Offu45Cycle_DataTypeFormat: scalaxb.XMLFormat[generated2.Offu45Cycle_DataType] = new DefaultGenerated2_Offu45Cycle_DataTypeFormat {}
  implicit lazy val Generated2_Background_Process_Message_Data_WSTypeFormat: scalaxb.XMLFormat[generated2.Background_Process_Message_Data_WSType] = new DefaultGenerated2_Background_Process_Message_Data_WSTypeFormat {}
  implicit lazy val Generated2_Payroll_ROE_Prior_History_Results_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_ROE_Prior_History_Results_DataType] = new DefaultGenerated2_Payroll_ROE_Prior_History_Results_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_ROE_Prior_Period_History_Results_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_ROE_Prior_Period_History_Results_RequestType] = new DefaultGenerated2_Put_Payroll_ROE_Prior_Period_History_Results_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_ROE_Prior_Period_History_Results_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_ROE_Prior_Period_History_Results_ResponseType] = new DefaultGenerated2_Put_Payroll_ROE_Prior_Period_History_Results_ResponseTypeFormat {}
  implicit lazy val Generated2_Intermediary_Bank_Account_WWS_DataTypeFormat: scalaxb.XMLFormat[generated2.Intermediary_Bank_Account_WWS_DataType] = new DefaultGenerated2_Intermediary_Bank_Account_WWS_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_FUTA_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_FUTA_RequestType] = new DefaultGenerated2_Put_Payroll_Payee_FUTA_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_FUTA_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_FUTA_ResponseType] = new DefaultGenerated2_Put_Payroll_Payee_FUTA_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_FUTA_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_FUTA_Request_ReferencesType] = new DefaultGenerated2_Payroll_Payee_FUTA_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_FUTA_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_FUTA_Request_CriteriaType] = new DefaultGenerated2_Payroll_Payee_FUTA_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_FUTA_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_FUTA_Response_GroupType] = new DefaultGenerated2_Payroll_Payee_FUTA_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_FUTAs_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_FUTAs_RequestType] = new DefaultGenerated2_Get_Payroll_Payee_FUTAs_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_FUTATypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_FUTAType] = new DefaultGenerated2_Payroll_Payee_FUTATypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_FUTA_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_FUTA_Response_DataType] = new DefaultGenerated2_Payroll_Payee_FUTA_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_FUTAs_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_FUTAs_ResponseType] = new DefaultGenerated2_Get_Payroll_Payee_FUTAs_ResponseTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_FUTA_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_FUTA_Response_DataType] = new DefaultGenerated2_Put_Payroll_Payee_FUTA_Response_DataTypeFormat {}
  implicit lazy val Generated2_Tax_Frequency_Override_DataTypeFormat: scalaxb.XMLFormat[generated2.Tax_Frequency_Override_DataType] = new DefaultGenerated2_Tax_Frequency_Override_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Deduction_Recipient_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Deduction_Recipient_Request_ReferencesType] = new DefaultGenerated2_Payroll_Deduction_Recipient_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Deduction_Recipient_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Deduction_Recipient_Response_GroupType] = new DefaultGenerated2_Payroll_Deduction_Recipient_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Deduction_Recipients_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Deduction_Recipients_RequestType] = new DefaultGenerated2_Get_Payroll_Deduction_Recipients_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Deduction_RecipientTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Deduction_RecipientType] = new DefaultGenerated2_Payroll_Deduction_RecipientTypeFormat {}
  implicit lazy val Generated2_Payroll_Deduction_Recipient_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Deduction_Recipient_Response_DataType] = new DefaultGenerated2_Payroll_Deduction_Recipient_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Deduction_Recipients_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Deduction_Recipients_ResponseType] = new DefaultGenerated2_Get_Payroll_Deduction_Recipients_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Deduction_Recipient_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Deduction_Recipient_DataType] = new DefaultGenerated2_Payroll_Deduction_Recipient_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Deduction_Recipient_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Deduction_Recipient_RequestType] = new DefaultGenerated2_Put_Payroll_Deduction_Recipient_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Deduction_Recipient_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Deduction_Recipient_ResponseType] = new DefaultGenerated2_Put_Payroll_Deduction_Recipient_ResponseTypeFormat {}
  implicit lazy val Generated2_Get_Paycheck_Deliveries_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Paycheck_Deliveries_RequestType] = new DefaultGenerated2_Get_Paycheck_Deliveries_RequestTypeFormat {}
  implicit lazy val Generated2_Get_Paycheck_Deliveries_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Paycheck_Deliveries_ResponseType] = new DefaultGenerated2_Get_Paycheck_Deliveries_ResponseTypeFormat {}
  implicit lazy val Generated2_Put_Paycheck_Delivery__Public__RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Paycheck_Delivery__Public__RequestType] = new DefaultGenerated2_Put_Paycheck_Delivery__Public__RequestTypeFormat {}
  implicit lazy val Generated2_Put_Paycheck_Delivery__Public__ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Paycheck_Delivery__Public__ResponseType] = new DefaultGenerated2_Put_Paycheck_Delivery__Public__ResponseTypeFormat {}
  implicit lazy val Generated2_Business_Process_Attachment_DataTypeFormat: scalaxb.XMLFormat[generated2.Business_Process_Attachment_DataType] = new DefaultGenerated2_Business_Process_Attachment_DataTypeFormat {}
  implicit lazy val Generated2_Put_Single_Legal_Entity_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Single_Legal_Entity_RequestType] = new DefaultGenerated2_Put_Single_Legal_Entity_RequestTypeFormat {}
  implicit lazy val Generated2_Single_Legal_Entity_DataTypeFormat: scalaxb.XMLFormat[generated2.Single_Legal_Entity_DataType] = new DefaultGenerated2_Single_Legal_Entity_DataTypeFormat {}
  implicit lazy val Generated2_Put_Single_Legal_Entity_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Single_Legal_Entity_ResponseType] = new DefaultGenerated2_Put_Single_Legal_Entity_ResponseTypeFormat {}
  implicit lazy val Generated2_Get_Single_Legal_Entities_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Single_Legal_Entities_RequestType] = new DefaultGenerated2_Get_Single_Legal_Entities_RequestTypeFormat {}
  implicit lazy val Generated2_Single_Legal_Entity_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Single_Legal_Entity_Request_ReferencesType] = new DefaultGenerated2_Single_Legal_Entity_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Single_Legal_Entity_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Single_Legal_Entity_Response_GroupType] = new DefaultGenerated2_Single_Legal_Entity_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Single_Legal_Entities_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Single_Legal_Entities_ResponseType] = new DefaultGenerated2_Get_Single_Legal_Entities_ResponseTypeFormat {}
  implicit lazy val Generated2_Single_Legal_Entity_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Single_Legal_Entity_Response_DataType] = new DefaultGenerated2_Single_Legal_Entity_Response_DataTypeFormat {}
  implicit lazy val Generated2_Single_Legal_EntityTypeFormat: scalaxb.XMLFormat[generated2.Single_Legal_EntityType] = new DefaultGenerated2_Single_Legal_EntityTypeFormat {}
  implicit lazy val Generated2_Wu452_Wu452C_Printing_Election_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Wu452_Wu452C_Printing_Election_Request_CriteriaType] = new DefaultGenerated2_Wu452_Wu452C_Printing_Election_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Wu452_Wu452C_Printing_Election_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Wu452_Wu452C_Printing_Election_Response_GroupType] = new DefaultGenerated2_Wu452_Wu452C_Printing_Election_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Wu452_Wu452C_Printing_Election_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Wu452_Wu452C_Printing_Election_RequestType] = new DefaultGenerated2_Get_Wu452_Wu452C_Printing_Election_RequestTypeFormat {}
  implicit lazy val Generated2_Wu452_Wu452C_Printing_ElectionTypeFormat: scalaxb.XMLFormat[generated2.Wu452_Wu452C_Printing_ElectionType] = new DefaultGenerated2_Wu452_Wu452C_Printing_ElectionTypeFormat {}
  implicit lazy val Generated2_Wu452_Wu452C_Printing_Election_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Wu452_Wu452C_Printing_Election_Response_DataType] = new DefaultGenerated2_Wu452_Wu452C_Printing_Election_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Wu452_Wu452C_Printing_Election_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Wu452_Wu452C_Printing_Election_ResponseType] = new DefaultGenerated2_Get_Wu452_Wu452C_Printing_Election_ResponseTypeFormat {}
  implicit lazy val Generated2_Wu452_Wu452C_Printing_Election_DataTypeFormat: scalaxb.XMLFormat[generated2.Wu452_Wu452C_Printing_Election_DataType] = new DefaultGenerated2_Wu452_Wu452C_Printing_Election_DataTypeFormat {}
  implicit lazy val Generated2_Wu452_Wu452C_Printing_Election_Request_DataTypeFormat: scalaxb.XMLFormat[generated2.Wu452_Wu452C_Printing_Election_Request_DataType] = new DefaultGenerated2_Wu452_Wu452C_Printing_Election_Request_DataTypeFormat {}
  implicit lazy val Generated2_Put_Wu452_Wu452C_Printing_Election_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Wu452_Wu452C_Printing_Election_RequestType] = new DefaultGenerated2_Put_Wu452_Wu452C_Printing_Election_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseType] = new DefaultGenerated2_Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseTypeFormat {}
  implicit lazy val Generated2_Wu452_Wu452C_Printing_Election_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Wu452_Wu452C_Printing_Election_Request_ReferencesType] = new DefaultGenerated2_Wu452_Wu452C_Printing_Election_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_ROE_Vacation_Pay_DataTypeFormat: scalaxb.XMLFormat[generated2.ROE_Vacation_Pay_DataType] = new DefaultGenerated2_ROE_Vacation_Pay_DataTypeFormat {}
  implicit lazy val Generated2_Get_Tax_Levy_Deduction_Restrictions_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Tax_Levy_Deduction_Restrictions_RequestType] = new DefaultGenerated2_Get_Tax_Levy_Deduction_Restrictions_RequestTypeFormat {}
  implicit lazy val Generated2_Get_Tax_Levy_Deduction_Restrictions_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Tax_Levy_Deduction_Restrictions_ResponseType] = new DefaultGenerated2_Get_Tax_Levy_Deduction_Restrictions_ResponseTypeFormat {}
  implicit lazy val Generated2_Tax_Levy_Deduction_Restriction_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Tax_Levy_Deduction_Restriction_Request_ReferencesType] = new DefaultGenerated2_Tax_Levy_Deduction_Restriction_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Tax_Levy_Deduction_Restriction_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Tax_Levy_Deduction_Restriction_Request_CriteriaType] = new DefaultGenerated2_Tax_Levy_Deduction_Restriction_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Tax_Levy_Deduction_Restrictions_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Tax_Levy_Deduction_Restrictions_Response_DataType] = new DefaultGenerated2_Tax_Levy_Deduction_Restrictions_Response_DataTypeFormat {}
  implicit lazy val Generated2_Tax_Levy_Deduction_Restriction_DataTypeFormat: scalaxb.XMLFormat[generated2.Tax_Levy_Deduction_Restriction_DataType] = new DefaultGenerated2_Tax_Levy_Deduction_Restriction_DataTypeFormat {}
  implicit lazy val Generated2_Tax_Levy_Deduction_for_Baseline_DataTypeFormat: scalaxb.XMLFormat[generated2.Tax_Levy_Deduction_for_Baseline_DataType] = new DefaultGenerated2_Tax_Levy_Deduction_for_Baseline_DataTypeFormat {}
  implicit lazy val Generated2_Tax_Levy_Deduction_for_Override_DataTypeFormat: scalaxb.XMLFormat[generated2.Tax_Levy_Deduction_for_Override_DataType] = new DefaultGenerated2_Tax_Levy_Deduction_for_Override_DataTypeFormat {}
  implicit lazy val Generated2_Tax_Levy_Deduction_Restriction_Baseline_DataTypeFormat: scalaxb.XMLFormat[generated2.Tax_Levy_Deduction_Restriction_Baseline_DataType] = new DefaultGenerated2_Tax_Levy_Deduction_Restriction_Baseline_DataTypeFormat {}
  implicit lazy val Generated2_Tax_Levy_Deduction_Restriction_Override_DataTypeFormat: scalaxb.XMLFormat[generated2.Tax_Levy_Deduction_Restriction_Override_DataType] = new DefaultGenerated2_Tax_Levy_Deduction_Restriction_Override_DataTypeFormat {}
  implicit lazy val Generated2_Tax_Levy_Deduction_Restriction_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Tax_Levy_Deduction_Restriction_Response_GroupType] = new DefaultGenerated2_Tax_Levy_Deduction_Restriction_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Put_Tax_Levy_Deduction_Restriction_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Tax_Levy_Deduction_Restriction_RequestType] = new DefaultGenerated2_Put_Tax_Levy_Deduction_Restriction_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Tax_Levy_Deduction_Restriction_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Tax_Levy_Deduction_Restriction_ResponseType] = new DefaultGenerated2_Put_Tax_Levy_Deduction_Restriction_ResponseTypeFormat {}
  implicit lazy val Generated2_Tax_Levy_Deduction_RestrictionsTypeFormat: scalaxb.XMLFormat[generated2.Tax_Levy_Deduction_RestrictionsType] = new DefaultGenerated2_Tax_Levy_Deduction_RestrictionsTypeFormat {}
  implicit lazy val Generated2_Payroll_ID_Data_DisplayTypeFormat: scalaxb.XMLFormat[generated2.Payroll_ID_Data_DisplayType] = new DefaultGenerated2_Payroll_ID_Data_DisplayTypeFormat {}
  implicit lazy val Generated2_Import_Payroll_Input_RequestTypeFormat: scalaxb.XMLFormat[generated2.Import_Payroll_Input_RequestType] = new DefaultGenerated2_Import_Payroll_Input_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_History_Result_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_History_Result_Request_CriteriaType] = new DefaultGenerated2_Payroll_History_Result_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Import_Payroll_Offu45cycle_Payment_RequestTypeFormat: scalaxb.XMLFormat[generated2.Import_Payroll_Offu45cycle_Payment_RequestType] = new DefaultGenerated2_Import_Payroll_Offu45cycle_Payment_RequestTypeFormat {}
  implicit lazy val Generated2_Tax_Document_Delivery_DataTypeFormat: scalaxb.XMLFormat[generated2.Tax_Document_Delivery_DataType] = new DefaultGenerated2_Tax_Document_Delivery_DataTypeFormat {}
  implicit lazy val Generated2_Put_Tax_Document_Delivery_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Tax_Document_Delivery_RequestType] = new DefaultGenerated2_Put_Tax_Document_Delivery_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Tax_Document_Delivery_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Tax_Document_Delivery_ResponseType] = new DefaultGenerated2_Put_Tax_Document_Delivery_ResponseTypeFormat {}
  implicit lazy val Generated2_Tax_Document_Delivery_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Tax_Document_Delivery_Request_ReferencesType] = new DefaultGenerated2_Tax_Document_Delivery_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Tax_Document_Delivery_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Tax_Document_Delivery_Request_CriteriaType] = new DefaultGenerated2_Tax_Document_Delivery_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Tax_Document_Delivery_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Tax_Document_Delivery_Response_GroupType] = new DefaultGenerated2_Tax_Document_Delivery_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Tax_Document_Deliveries_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Tax_Document_Deliveries_RequestType] = new DefaultGenerated2_Get_Tax_Document_Deliveries_RequestTypeFormat {}
  implicit lazy val Generated2_Tax_Document_DeliveryTypeFormat: scalaxb.XMLFormat[generated2.Tax_Document_DeliveryType] = new DefaultGenerated2_Tax_Document_DeliveryTypeFormat {}
  implicit lazy val Generated2_Tax_Document_Delivery_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Tax_Document_Delivery_Response_DataType] = new DefaultGenerated2_Tax_Document_Delivery_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Tax_Document_Deliveries_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Tax_Document_Deliveries_ResponseType] = new DefaultGenerated2_Get_Tax_Document_Deliveries_ResponseTypeFormat {}
  implicit lazy val Generated2_Import_ROE_Prior_Period_History_Results_RequestTypeFormat: scalaxb.XMLFormat[generated2.Import_ROE_Prior_Period_History_Results_RequestType] = new DefaultGenerated2_Import_ROE_Prior_Period_History_Results_RequestTypeFormat {}
  implicit lazy val Generated2_Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestType] = new DefaultGenerated2_Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestTypeFormat {}
  implicit lazy val Generated2_Periodic_CAN_Tax_Remittance_Data_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Periodic_CAN_Tax_Remittance_Data_Request_CriteriaType] = new DefaultGenerated2_Periodic_CAN_Tax_Remittance_Data_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Periodic_CAN_Tax_Remittance_Data_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Periodic_CAN_Tax_Remittance_Data_Response_GroupType] = new DefaultGenerated2_Periodic_CAN_Tax_Remittance_Data_Response_GroupTypeFormat {}
  implicit lazy val Generated2_YTD_Tax_FilterTypeFormat: scalaxb.XMLFormat[generated2.YTD_Tax_FilterType] = new DefaultGenerated2_YTD_Tax_FilterTypeFormat {}
  implicit lazy val Generated2_Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseType] = new DefaultGenerated2_Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseTypeFormat {}
  implicit lazy val Generated2_Periodic_Company_CAN_Tax_Remittance_Data_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Periodic_Company_CAN_Tax_Remittance_Data_Response_DataType] = new DefaultGenerated2_Periodic_Company_CAN_Tax_Remittance_Data_Response_DataTypeFormat {}
  implicit lazy val Generated2_Periodic_Company_CAN_Tax_Remittance_DataTypeFormat: scalaxb.XMLFormat[generated2.Periodic_Company_CAN_Tax_Remittance_DataType] = new DefaultGenerated2_Periodic_Company_CAN_Tax_Remittance_DataTypeFormat {}
  implicit lazy val Generated2_MTD_Tax_Remittance_Data_for_Periodic_CompanyTypeFormat: scalaxb.XMLFormat[generated2.MTD_Tax_Remittance_Data_for_Periodic_CompanyType] = new DefaultGenerated2_MTD_Tax_Remittance_Data_for_Periodic_CompanyTypeFormat {}
  implicit lazy val Generated2_QTD_Tax_Remittance_Data_for_Periodic_CompanyTypeFormat: scalaxb.XMLFormat[generated2.QTD_Tax_Remittance_Data_for_Periodic_CompanyType] = new DefaultGenerated2_QTD_Tax_Remittance_Data_for_Periodic_CompanyTypeFormat {}
  implicit lazy val Generated2_YTD_Tax_Remittance_Data_for_Periodic_CompanyTypeFormat: scalaxb.XMLFormat[generated2.YTD_Tax_Remittance_Data_for_Periodic_CompanyType] = new DefaultGenerated2_YTD_Tax_Remittance_Data_for_Periodic_CompanyTypeFormat {}
  implicit lazy val Generated2_Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestType] = new DefaultGenerated2_Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Withholding_Order_Local_Minimum_Wage_DataTypeFormat: scalaxb.XMLFormat[generated2.Put_Withholding_Order_Local_Minimum_Wage_DataType] = new DefaultGenerated2_Put_Withholding_Order_Local_Minimum_Wage_DataTypeFormat {}
  implicit lazy val Generated2_Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType] = new DefaultGenerated2_Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseTypeFormat {}
  implicit lazy val Generated2_Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestType] = new DefaultGenerated2_Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Local_Minimum_Wage_Rate_RequestTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Local_Minimum_Wage_Rate_RequestType] = new DefaultGenerated2_Withholding_Order_Local_Minimum_Wage_Rate_RequestTypeFormat {}
  implicit lazy val Generated2_Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType] = new DefaultGenerated2_Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseTypeFormat {}
  implicit lazy val Generated2_Get_Withholding_Order_Local_Minimum_Wage_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Get_Withholding_Order_Local_Minimum_Wage_Response_DataType] = new DefaultGenerated2_Get_Withholding_Order_Local_Minimum_Wage_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Withholding_Order_Local_Minimum_Wage_DataTypeFormat: scalaxb.XMLFormat[generated2.Get_Withholding_Order_Local_Minimum_Wage_DataType] = new DefaultGenerated2_Get_Withholding_Order_Local_Minimum_Wage_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Tax_Mappings_on_Location_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Tax_Mappings_on_Location_RequestType] = new DefaultGenerated2_Get_Payroll_Tax_Mappings_on_Location_RequestTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Tax_Mappings_on_Location_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Tax_Mappings_on_Location_ResponseType] = new DefaultGenerated2_Get_Payroll_Tax_Mappings_on_Location_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Tax_Mappings_on_Location_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Tax_Mappings_on_Location_Request_CriteriaType] = new DefaultGenerated2_Payroll_Tax_Mappings_on_Location_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Payroll_Tax_Location_Mapping_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Tax_Location_Mapping_DataType] = new DefaultGenerated2_Payroll_Tax_Location_Mapping_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Tax_Mappings_on_Location_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Tax_Mappings_on_Location_Response_DataType] = new DefaultGenerated2_Payroll_Tax_Mappings_on_Location_Response_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Tax_Mappings_on_Location_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Tax_Mappings_on_Location_Request_ReferencesType] = new DefaultGenerated2_Payroll_Tax_Mappings_on_Location_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Tax_Location_MappingTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Tax_Location_MappingType] = new DefaultGenerated2_Payroll_Tax_Location_MappingTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Tax_Mapping_on_Location_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Tax_Mapping_on_Location_RequestType] = new DefaultGenerated2_Put_Payroll_Tax_Mapping_on_Location_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Tax_Mapping_on_Location_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Tax_Mapping_on_Location_ResponseType] = new DefaultGenerated2_Put_Payroll_Tax_Mapping_on_Location_ResponseTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Tax_Location_Mapping_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Tax_Location_Mapping_Response_DataType] = new DefaultGenerated2_Put_Payroll_Tax_Location_Mapping_Response_DataTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_DataTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_DataType] = new DefaultGenerated2_Run_Pay_Calculation_DataTypeFormat {}
  implicit lazy val Generated2_Put_Run_Pay_Calculation_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Run_Pay_Calculation_RequestType] = new DefaultGenerated2_Put_Run_Pay_Calculation_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Run_Pay_Calculation_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Run_Pay_Calculation_ResponseType] = new DefaultGenerated2_Put_Run_Pay_Calculation_ResponseTypeFormat {}
  implicit lazy val Generated2_Background_Process_Runtime_DataTypeFormat: scalaxb.XMLFormat[generated2.Background_Process_Runtime_DataType] = new DefaultGenerated2_Background_Process_Runtime_DataTypeFormat {}
  implicit lazy val Generated2_Get_EFW2_Year_End_Worker_Filing_Data_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_EFW2_Year_End_Worker_Filing_Data_RequestType] = new DefaultGenerated2_Get_EFW2_Year_End_Worker_Filing_Data_RequestTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Worker_Filing_Data_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Worker_Filing_Data_Request_CriteriaType] = new DefaultGenerated2_EFW2_Year_End_Worker_Filing_Data_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_EFW2_Year_End_Worker_Filing_Data_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_EFW2_Year_End_Worker_Filing_Data_ResponseType] = new DefaultGenerated2_Get_EFW2_Year_End_Worker_Filing_Data_ResponseTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Worker_Filing_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Worker_Filing_Response_DataType] = new DefaultGenerated2_EFW2_Year_End_Worker_Filing_Response_DataTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Worker_FilingTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Worker_FilingType] = new DefaultGenerated2_EFW2_Year_End_Worker_FilingTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Worker_Filing_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Worker_Filing_DataType] = new DefaultGenerated2_EFW2_Year_End_Worker_Filing_DataTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Worker_Box_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Worker_Box_DataType] = new DefaultGenerated2_EFW2_Year_End_Worker_Box_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_ID_Balance_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_ID_Balance_DataType] = new DefaultGenerated2_Payroll_ID_Balance_DataTypeFormat {}
  implicit lazy val Generated2_EFW2_Deferred_and_Other_Compensation_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Deferred_and_Other_Compensation_DataType] = new DefaultGenerated2_EFW2_Deferred_and_Other_Compensation_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Puerto_Rico_Annual_Tax_Data_WrapperTypeFormat: scalaxb.XMLFormat[generated2.Worker_Puerto_Rico_Annual_Tax_Data_WrapperType] = new DefaultGenerated2_Worker_Puerto_Rico_Annual_Tax_Data_WrapperTypeFormat {}
  implicit lazy val Generated2_Worker_Puerto_Rico_Annual_Tax_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Puerto_Rico_Annual_Tax_DataType] = new DefaultGenerated2_Worker_Puerto_Rico_Annual_Tax_DataTypeFormat {}
  implicit lazy val Generated2_Box_16_Au45A_DataTypeFormat: scalaxb.XMLFormat[generated2.Box_16_Au45A_DataType] = new DefaultGenerated2_Box_16_Au45A_DataTypeFormat {}
  implicit lazy val Generated2_Box_16_Au45B_DataTypeFormat: scalaxb.XMLFormat[generated2.Box_16_Au45B_DataType] = new DefaultGenerated2_Box_16_Au45B_DataTypeFormat {}
  implicit lazy val Generated2_Box_16_Data_WrapperTypeFormat: scalaxb.XMLFormat[generated2.Box_16_Data_WrapperType] = new DefaultGenerated2_Box_16_Data_WrapperTypeFormat {}
  implicit lazy val Generated2_Box_16_Au45C_DataTypeFormat: scalaxb.XMLFormat[generated2.Box_16_Au45C_DataType] = new DefaultGenerated2_Box_16_Au45C_DataTypeFormat {}
  implicit lazy val Generated2_Box_16_Au45D_DataTypeFormat: scalaxb.XMLFormat[generated2.Box_16_Au45D_DataType] = new DefaultGenerated2_Box_16_Au45D_DataTypeFormat {}
  implicit lazy val Generated2_Box_16_Au45E_DataTypeFormat: scalaxb.XMLFormat[generated2.Box_16_Au45E_DataType] = new DefaultGenerated2_Box_16_Au45E_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Wu452PR_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Wu452PR_DataType] = new DefaultGenerated2_Worker_Wu452PR_DataTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Withholding_Frequency_DataTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Withholding_Frequency_DataType] = new DefaultGenerated2_Withholding_Order_Withholding_Frequency_DataTypeFormat {}
  implicit lazy val Generated2_EFW2_Other_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Other_DataType] = new DefaultGenerated2_EFW2_Other_DataTypeFormat {}
  implicit lazy val Generated2_EFW2_Additional_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Additional_DataType] = new DefaultGenerated2_EFW2_Additional_DataTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Worker_State_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Worker_State_DataType] = new DefaultGenerated2_EFW2_Year_End_Worker_State_DataTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Worker_Local_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Worker_Local_DataType] = new DefaultGenerated2_EFW2_Year_End_Worker_Local_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Preu45Printed_Payslips_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Preu45Printed_Payslips_RequestType] = new DefaultGenerated2_Get_Payroll_Preu45Printed_Payslips_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Preu45Printed_Payslips_Request_ReferenceTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Preu45Printed_Payslips_Request_ReferenceType] = new DefaultGenerated2_Payroll_Preu45Printed_Payslips_Request_ReferenceTypeFormat {}
  implicit lazy val Generated2_Payroll_Preu45Printed_Payslips_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Preu45Printed_Payslips_Response_GroupType] = new DefaultGenerated2_Payroll_Preu45Printed_Payslips_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Payroll_Preu45Printed_Payslips_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Preu45Printed_Payslips_Request_CriteriaType] = new DefaultGenerated2_Payroll_Preu45Printed_Payslips_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Preu45Printed_Payslips_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Preu45Printed_Payslips_ResponseType] = new DefaultGenerated2_Get_Payroll_Preu45Printed_Payslips_ResponseTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Preu45Printed_Payslips_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Preu45Printed_Payslips_Response_DataType] = new DefaultGenerated2_Get_Payroll_Preu45Printed_Payslips_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_EFW2_Year_End_Employer_Filing_Data_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_EFW2_Year_End_Employer_Filing_Data_RequestType] = new DefaultGenerated2_Get_EFW2_Year_End_Employer_Filing_Data_RequestTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Employer_Filing_Data_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Employer_Filing_Data_Request_CriteriaType] = new DefaultGenerated2_EFW2_Year_End_Employer_Filing_Data_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_EFW2_Year_End_Employer_Filing_Data_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_EFW2_Year_End_Employer_Filing_Data_ResponseType] = new DefaultGenerated2_Get_EFW2_Year_End_Employer_Filing_Data_ResponseTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Employer_Filing_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Employer_Filing_Response_DataType] = new DefaultGenerated2_EFW2_Year_End_Employer_Filing_Response_DataTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Employer_FilingTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Employer_FilingType] = new DefaultGenerated2_EFW2_Year_End_Employer_FilingTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Employer_Filing_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Employer_Filing_DataType] = new DefaultGenerated2_EFW2_Year_End_Employer_Filing_DataTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Employer_Box_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Employer_Box_DataType] = new DefaultGenerated2_EFW2_Year_End_Employer_Box_DataTypeFormat {}
  implicit lazy val Generated2_EFW2_Employer_Deferred_and_Other_Compensation_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Employer_Deferred_and_Other_Compensation_DataType] = new DefaultGenerated2_EFW2_Employer_Deferred_and_Other_Compensation_DataTypeFormat {}
  implicit lazy val Generated2_EFW2_Year_End_Submitter_DataTypeFormat: scalaxb.XMLFormat[generated2.EFW2_Year_End_Submitter_DataType] = new DefaultGenerated2_EFW2_Year_End_Submitter_DataTypeFormat {}
  implicit lazy val Generated2_Salary_Over_the_Cap_Costing_Allocation_Detail_DataTypeFormat: scalaxb.XMLFormat[generated2.Salary_Over_the_Cap_Costing_Allocation_Detail_DataType] = new DefaultGenerated2_Salary_Over_the_Cap_Costing_Allocation_Detail_DataTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_Request_ReferencesType] = new DefaultGenerated2_Run_Pay_Calculation_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_Request_CriteriaType] = new DefaultGenerated2_Run_Pay_Calculation_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_Response_GroupTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_Response_GroupType] = new DefaultGenerated2_Run_Pay_Calculation_Response_GroupTypeFormat {}
  implicit lazy val Generated2_Get_Run_Pay_Calculation_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Run_Pay_Calculation_RequestType] = new DefaultGenerated2_Get_Run_Pay_Calculation_RequestTypeFormat {}
  implicit lazy val Generated2_Run_Pay_CalculationTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_CalculationType] = new DefaultGenerated2_Run_Pay_CalculationTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_Response_DataType] = new DefaultGenerated2_Run_Pay_Calculation_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Run_Pay_Calculation_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Run_Pay_Calculation_ResponseType] = new DefaultGenerated2_Get_Run_Pay_Calculation_ResponseTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_Process_Calculation_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_Process_Calculation_CriteriaType] = new DefaultGenerated2_Run_Pay_Calculation_Process_Calculation_CriteriaTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_Process_InformationTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_Process_InformationType] = new DefaultGenerated2_Run_Pay_Calculation_Process_InformationTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_Process_HistoryTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_Process_HistoryType] = new DefaultGenerated2_Run_Pay_Calculation_Process_HistoryTypeFormat {}
  implicit lazy val Generated2_Pay_Groups_Being_CalculatedTypeFormat: scalaxb.XMLFormat[generated2.Pay_Groups_Being_CalculatedType] = new DefaultGenerated2_Pay_Groups_Being_CalculatedTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_MessagesTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_MessagesType] = new DefaultGenerated2_Run_Pay_Calculation_MessagesTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Location_Mapping_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Location_Mapping_Request_ReferencesType] = new DefaultGenerated2_Payroll_Payee_Tax_Location_Mapping_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Location_Mapping_Request_CriteriaTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Location_Mapping_Request_CriteriaType] = new DefaultGenerated2_Payroll_Payee_Tax_Location_Mapping_Request_CriteriaTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_Tax_Location_Mappings_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_Tax_Location_Mappings_RequestType] = new DefaultGenerated2_Get_Payroll_Payee_Tax_Location_Mappings_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Location_Mapping_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Location_Mapping_Response_DataType] = new DefaultGenerated2_Payroll_Payee_Tax_Location_Mapping_Response_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Payee_Tax_Location_Mappings_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Payee_Tax_Location_Mappings_ResponseType] = new DefaultGenerated2_Get_Payroll_Payee_Tax_Location_Mappings_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Location_Mapping_Get_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Location_Mapping_Get_DataType] = new DefaultGenerated2_Payroll_Payee_Tax_Location_Mapping_Get_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Location_Mapping_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Location_Mapping_DataType] = new DefaultGenerated2_Payroll_Payee_Tax_Location_Mapping_DataTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_Tax_Location_Mapping_RequestTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_Tax_Location_Mapping_RequestType] = new DefaultGenerated2_Put_Payroll_Payee_Tax_Location_Mapping_RequestTypeFormat {}
  implicit lazy val Generated2_Put_Payroll_Payee_Tax_Location_Mapping_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Put_Payroll_Payee_Tax_Location_Mapping_ResponseType] = new DefaultGenerated2_Put_Payroll_Payee_Tax_Location_Mapping_ResponseTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_StatusesTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_StatusesType] = new DefaultGenerated2_Run_Pay_Calculation_StatusesTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_MessageTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_MessageType] = new DefaultGenerated2_Run_Pay_Calculation_MessageTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_Step_DetailTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_Step_DetailType] = new DefaultGenerated2_Run_Pay_Calculation_Step_DetailTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_Technical_DetailsTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_Technical_DetailsType] = new DefaultGenerated2_Run_Pay_Calculation_Technical_DetailsTypeFormat {}
  implicit lazy val Generated2_Run_Pay_Calculation_Step_DetailsTypeFormat: scalaxb.XMLFormat[generated2.Run_Pay_Calculation_Step_DetailsType] = new DefaultGenerated2_Run_Pay_Calculation_Step_DetailsTypeFormat {}
  implicit lazy val Generated2_Payroll_Run_Detail_Pay_Calc_StatusTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Run_Detail_Pay_Calc_StatusType] = new DefaultGenerated2_Payroll_Run_Detail_Pay_Calc_StatusTypeFormat {}
  implicit lazy val Generated2_Calc_StatusTypeFormat: scalaxb.XMLFormat[generated2.Calc_StatusType] = new DefaultGenerated2_Calc_StatusTypeFormat {}
  implicit lazy val Generated2_Pay_Group_Period_Pay_Calculation_Status_As_Of_NowTypeFormat: scalaxb.XMLFormat[generated2.Pay_Group_Period_Pay_Calculation_Status_As_Of_NowType] = new DefaultGenerated2_Pay_Group_Period_Pay_Calculation_Status_As_Of_NowTypeFormat {}
  implicit lazy val Generated2_Email_Address_DataTypeFormat: scalaxb.XMLFormat[generated2.Email_Address_DataType] = new DefaultGenerated2_Email_Address_DataTypeFormat {}
  implicit lazy val Generated2_Wu452VI_Deferred_and_Other_Compensation_DataTypeFormat: scalaxb.XMLFormat[generated2.Wu452VI_Deferred_and_Other_Compensation_DataType] = new DefaultGenerated2_Wu452VI_Deferred_and_Other_Compensation_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Guam_Annual_Tax_Data_WrapperTypeFormat: scalaxb.XMLFormat[generated2.Worker_Guam_Annual_Tax_Data_WrapperType] = new DefaultGenerated2_Worker_Guam_Annual_Tax_Data_WrapperTypeFormat {}
  implicit lazy val Generated2_Wu452GU_Deferred_and_Other_Compensation_DataTypeFormat: scalaxb.XMLFormat[generated2.Wu452GU_Deferred_and_Other_Compensation_DataType] = new DefaultGenerated2_Wu452GU_Deferred_and_Other_Compensation_DataTypeFormat {}
  implicit lazy val Generated2_Wu452VI_Nonu45Qualified_Pension_DataTypeFormat: scalaxb.XMLFormat[generated2.Wu452VI_Nonu45Qualified_Pension_DataType] = new DefaultGenerated2_Wu452VI_Nonu45Qualified_Pension_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Virgin_Islands_Annual_Tax_Data_WrapperTypeFormat: scalaxb.XMLFormat[generated2.Worker_Virgin_Islands_Annual_Tax_Data_WrapperType] = new DefaultGenerated2_Worker_Virgin_Islands_Annual_Tax_Data_WrapperTypeFormat {}
  implicit lazy val Generated2_Worker_Virgin_Islands_Annual_Tax_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Virgin_Islands_Annual_Tax_DataType] = new DefaultGenerated2_Worker_Virgin_Islands_Annual_Tax_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Wu452VI_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Wu452VI_DataType] = new DefaultGenerated2_Worker_Wu452VI_DataTypeFormat {}
  implicit lazy val Generated2_Wu452VI_Additional_DataTypeFormat: scalaxb.XMLFormat[generated2.Wu452VI_Additional_DataType] = new DefaultGenerated2_Wu452VI_Additional_DataTypeFormat {}
  implicit lazy val Generated2_Wu452GU_Other_Data_WrapperTypeFormat: scalaxb.XMLFormat[generated2.Wu452GU_Other_Data_WrapperType] = new DefaultGenerated2_Wu452GU_Other_Data_WrapperTypeFormat {}
  implicit lazy val Generated2_Wu452GU_Nonu45Qualified_Pension_DataTypeFormat: scalaxb.XMLFormat[generated2.Wu452GU_Nonu45Qualified_Pension_DataType] = new DefaultGenerated2_Wu452GU_Nonu45Qualified_Pension_DataTypeFormat {}
  implicit lazy val Generated2_Wu452GU_Other_DataTypeFormat: scalaxb.XMLFormat[generated2.Wu452GU_Other_DataType] = new DefaultGenerated2_Wu452GU_Other_DataTypeFormat {}
  implicit lazy val Generated2_Wu452VI_Other_DataTypeFormat: scalaxb.XMLFormat[generated2.Wu452VI_Other_DataType] = new DefaultGenerated2_Wu452VI_Other_DataTypeFormat {}
  implicit lazy val Generated2_Wu452VI_Other_Data_WrapperTypeFormat: scalaxb.XMLFormat[generated2.Wu452VI_Other_Data_WrapperType] = new DefaultGenerated2_Wu452VI_Other_Data_WrapperTypeFormat {}
  implicit lazy val Generated2_Wu452GU_Additional_DataTypeFormat: scalaxb.XMLFormat[generated2.Wu452GU_Additional_DataType] = new DefaultGenerated2_Wu452GU_Additional_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Wu452GU_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Wu452GU_DataType] = new DefaultGenerated2_Worker_Wu452GU_DataTypeFormat {}
  implicit lazy val Generated2_Worker_Guam_Annual_Tax_DataTypeFormat: scalaxb.XMLFormat[generated2.Worker_Guam_Annual_Tax_DataType] = new DefaultGenerated2_Worker_Guam_Annual_Tax_DataTypeFormat {}
  implicit lazy val Generated2_Maintain_Worker_Payroll_Reporting_Codes_Data__HV_TypeFormat: scalaxb.XMLFormat[generated2.Maintain_Worker_Payroll_Reporting_Codes_Data__HV_Type] = new DefaultGenerated2_Maintain_Worker_Payroll_Reporting_Codes_Data__HV_TypeFormat {}
  implicit lazy val Generated2_Maintain_Worker_Payroll_Reporting_Codes_Event_Data__HV_TypeFormat: scalaxb.XMLFormat[generated2.Maintain_Worker_Payroll_Reporting_Codes_Event_Data__HV_Type] = new DefaultGenerated2_Maintain_Worker_Payroll_Reporting_Codes_Event_Data__HV_TypeFormat {}
  implicit lazy val Generated2_Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestTypeFormat: scalaxb.XMLFormat[generated2.Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestType] = new DefaultGenerated2_Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestTypeFormat {}
  implicit lazy val Generated2_Box_16_Au45F_DataTypeFormat: scalaxb.XMLFormat[generated2.Box_16_Au45F_DataType] = new DefaultGenerated2_Box_16_Au45F_DataTypeFormat {}
  implicit lazy val Generated2_Box_16_Au45G_DataTypeFormat: scalaxb.XMLFormat[generated2.Box_16_Au45G_DataType] = new DefaultGenerated2_Box_16_Au45G_DataTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Reporting_Codes_for_Workers_RequestTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Reporting_Codes_for_Workers_RequestType] = new DefaultGenerated2_Get_Payroll_Reporting_Codes_for_Workers_RequestTypeFormat {}
  implicit lazy val Generated2_Payroll_Reporting_Codes_for_WorkerTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Reporting_Codes_for_WorkerType] = new DefaultGenerated2_Payroll_Reporting_Codes_for_WorkerTypeFormat {}
  implicit lazy val Generated2_Payroll_Reporting_Codes_for_Workers_Response_DataTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Reporting_Codes_for_Workers_Response_DataType] = new DefaultGenerated2_Payroll_Reporting_Codes_for_Workers_Response_DataTypeFormat {}
  implicit lazy val Generated2_Payroll_Reporting_Code_For_Workers_Request_ReferencesTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Reporting_Code_For_Workers_Request_ReferencesType] = new DefaultGenerated2_Payroll_Reporting_Code_For_Workers_Request_ReferencesTypeFormat {}
  implicit lazy val Generated2_Get_Payroll_Reporting_Codes_for_Workers_ResponseTypeFormat: scalaxb.XMLFormat[generated2.Get_Payroll_Reporting_Codes_for_Workers_ResponseType] = new DefaultGenerated2_Get_Payroll_Reporting_Codes_for_Workers_ResponseTypeFormat {}
  implicit lazy val Generated2_Payroll_Reporting_Codes_for_PositionTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Reporting_Codes_for_PositionType] = new DefaultGenerated2_Payroll_Reporting_Codes_for_PositionTypeFormat {}
  implicit lazy val Generated2_LocationObjectIDTypeFormat: scalaxb.XMLFormat[generated2.LocationObjectIDType] = new DefaultGenerated2_LocationObjectIDTypeFormat {}
  implicit lazy val Generated2_Job_ProfileObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Job_ProfileObjectIDType] = new DefaultGenerated2_Job_ProfileObjectIDTypeFormat {}
  implicit lazy val Generated2_Organization_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Organization_TypeObjectIDType] = new DefaultGenerated2_Organization_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_EmployeeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.EmployeeObjectIDType] = new DefaultGenerated2_EmployeeObjectIDTypeFormat {}
  implicit lazy val Generated2_Instant_Messenger_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Instant_Messenger_TypeObjectIDType] = new DefaultGenerated2_Instant_Messenger_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_WorkerObjectIDTypeFormat: scalaxb.XMLFormat[generated2.WorkerObjectIDType] = new DefaultGenerated2_WorkerObjectIDTypeFormat {}
  implicit lazy val Generated2_FrequencyObjectIDTypeFormat: scalaxb.XMLFormat[generated2.FrequencyObjectIDType] = new DefaultGenerated2_FrequencyObjectIDTypeFormat {}
  implicit lazy val Generated2_Pay_Rate_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Pay_Rate_TypeObjectIDType] = new DefaultGenerated2_Pay_Rate_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Integration_System__Audited_ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Integration_System__Audited_ObjectIDType] = new DefaultGenerated2_Integration_System__Audited_ObjectIDTypeFormat {}
  implicit lazy val Generated2_Background_Process_Runtime_StatusObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Background_Process_Runtime_StatusObjectIDType] = new DefaultGenerated2_Background_Process_Runtime_StatusObjectIDTypeFormat {}
  implicit lazy val Generated2_Bank_AccountObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Bank_AccountObjectIDType] = new DefaultGenerated2_Bank_AccountObjectIDTypeFormat {}
  implicit lazy val Generated2_Payment_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payment_TypeObjectIDType] = new DefaultGenerated2_Payment_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Phone_Device_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Phone_Device_TypeObjectIDType] = new DefaultGenerated2_Phone_Device_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Pay_Group_DetailObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Pay_Group_DetailObjectIDType] = new DefaultGenerated2_Pay_Group_DetailObjectIDTypeFormat {}
  implicit lazy val Generated2_Period_ScheduleObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Period_ScheduleObjectIDType] = new DefaultGenerated2_Period_ScheduleObjectIDTypeFormat {}
  implicit lazy val Generated2_PeriodObjectIDTypeFormat: scalaxb.XMLFormat[generated2.PeriodObjectIDType] = new DefaultGenerated2_PeriodObjectIDTypeFormat {}
  implicit lazy val Generated2_Run_CategoryObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Run_CategoryObjectIDType] = new DefaultGenerated2_Run_CategoryObjectIDTypeFormat {}
  implicit lazy val Generated2_Earning__All_ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Earning__All_ObjectIDType] = new DefaultGenerated2_Earning__All_ObjectIDTypeFormat {}
  implicit lazy val Generated2_Deduction__All_ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Deduction__All_ObjectIDType] = new DefaultGenerated2_Deduction__All_ObjectIDTypeFormat {}
  implicit lazy val Generated2_Pay_Accumulation__All_ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Pay_Accumulation__All_ObjectIDType] = new DefaultGenerated2_Pay_Accumulation__All_ObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_CalculationObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_CalculationObjectIDType] = new DefaultGenerated2_Payroll_CalculationObjectIDTypeFormat {}
  implicit lazy val Generated2_Balance_Period__All_ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Balance_Period__All_ObjectIDType] = new DefaultGenerated2_Balance_Period__All_ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_01ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_01ObjectIDType] = new DefaultGenerated2_Custom_Worktag_01ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_02ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_02ObjectIDType] = new DefaultGenerated2_Custom_Worktag_02ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_03ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_03ObjectIDType] = new DefaultGenerated2_Custom_Worktag_03ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_04ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_04ObjectIDType] = new DefaultGenerated2_Custom_Worktag_04ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_05ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_05ObjectIDType] = new DefaultGenerated2_Custom_Worktag_05ObjectIDTypeFormat {}
  implicit lazy val Generated2_Financial_InstitutionObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Financial_InstitutionObjectIDType] = new DefaultGenerated2_Financial_InstitutionObjectIDTypeFormat {}
  implicit lazy val Generated2_Pay_ComponentObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Pay_ComponentObjectIDType] = new DefaultGenerated2_Pay_ComponentObjectIDTypeFormat {}
  implicit lazy val Generated2_Related_Calculation__All_ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Related_Calculation__All_ObjectIDType] = new DefaultGenerated2_Related_Calculation__All_ObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_InputObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_InputObjectIDType] = new DefaultGenerated2_Payroll_InputObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Withholding_StatusObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Withholding_StatusObjectIDType] = new DefaultGenerated2_Payroll_Withholding_StatusObjectIDTypeFormat {}
  implicit lazy val Generated2_Communication_Usage_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Communication_Usage_TypeObjectIDType] = new DefaultGenerated2_Communication_Usage_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Communication_Usage_BehaviorObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Communication_Usage_BehaviorObjectIDType] = new DefaultGenerated2_Communication_Usage_BehaviorObjectIDTypeFormat {}
  implicit lazy val Generated2_Period_Date_IndicatorObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Period_Date_IndicatorObjectIDType] = new DefaultGenerated2_Period_Date_IndicatorObjectIDTypeFormat {}
  implicit lazy val Generated2_CountryObjectIDTypeFormat: scalaxb.XMLFormat[generated2.CountryObjectIDType] = new DefaultGenerated2_CountryObjectIDTypeFormat {}
  implicit lazy val Generated2_Country_RegionObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Country_RegionObjectIDType] = new DefaultGenerated2_Country_RegionObjectIDTypeFormat {}
  implicit lazy val Generated2_CurrencyObjectIDTypeFormat: scalaxb.XMLFormat[generated2.CurrencyObjectIDType] = new DefaultGenerated2_CurrencyObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_DataObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_DataObjectIDType] = new DefaultGenerated2_Payroll_Payee_Tax_DataObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_FUTAObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_FUTAObjectIDType] = new DefaultGenerated2_Payroll_Payee_FUTAObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Tax_AuthorityObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Tax_AuthorityObjectIDType] = new DefaultGenerated2_Payroll_Tax_AuthorityObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_State_AuthorityObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_State_AuthorityObjectIDType] = new DefaultGenerated2_Payroll_State_AuthorityObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Local_AuthorityObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Local_AuthorityObjectIDType] = new DefaultGenerated2_Payroll_Local_AuthorityObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Local_County_AuthorityObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Local_County_AuthorityObjectIDType] = new DefaultGenerated2_Payroll_Local_County_AuthorityObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Local_City_AuthorityObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Local_City_AuthorityObjectIDType] = new DefaultGenerated2_Payroll_Local_City_AuthorityObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Local_School_District_AuthorityObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Local_School_District_AuthorityObjectIDType] = new DefaultGenerated2_Payroll_Local_School_District_AuthorityObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Other_AuthorityObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Other_AuthorityObjectIDType] = new DefaultGenerated2_Payroll_Other_AuthorityObjectIDTypeFormat {}
  implicit lazy val Generated2_Project_Plan_TaskObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Project_Plan_TaskObjectIDType] = new DefaultGenerated2_Project_Plan_TaskObjectIDTypeFormat {}
  implicit lazy val Generated2_ProjectObjectIDTypeFormat: scalaxb.XMLFormat[generated2.ProjectObjectIDType] = new DefaultGenerated2_ProjectObjectIDTypeFormat {}
  implicit lazy val Generated2_Frequency_BehaviorObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Frequency_BehaviorObjectIDType] = new DefaultGenerated2_Frequency_BehaviorObjectIDTypeFormat {}
  implicit lazy val Generated2_Settlement_InstructionObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Settlement_InstructionObjectIDType] = new DefaultGenerated2_Settlement_InstructionObjectIDTypeFormat {}
  implicit lazy val Generated2_Pay_GroupObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Pay_GroupObjectIDType] = new DefaultGenerated2_Pay_GroupObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Limit_OverrideObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Limit_OverrideObjectIDType] = new DefaultGenerated2_Payroll_Limit_OverrideObjectIDTypeFormat {}
  implicit lazy val Generated2_Bank_Account_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Bank_Account_TypeObjectIDType] = new DefaultGenerated2_Bank_Account_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Payment_MethodObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payment_MethodObjectIDType] = new DefaultGenerated2_Payment_MethodObjectIDTypeFormat {}
  implicit lazy val Generated2_Pay_Run_Group_SelectionObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Pay_Run_Group_SelectionObjectIDType] = new DefaultGenerated2_Pay_Run_Group_SelectionObjectIDTypeFormat {}
  implicit lazy val Generated2_Deduction__Workday_Owned_ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Deduction__Workday_Owned_ObjectIDType] = new DefaultGenerated2_Deduction__Workday_Owned_ObjectIDTypeFormat {}
  implicit lazy val Generated2_DeductionObjectIDTypeFormat: scalaxb.XMLFormat[generated2.DeductionObjectIDType] = new DefaultGenerated2_DeductionObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_T1ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_T1ObjectIDType] = new DefaultGenerated2_Payroll_Payee_T1ObjectIDTypeFormat {}
  implicit lazy val Generated2_Limit_InterfaceObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Limit_InterfaceObjectIDType] = new DefaultGenerated2_Limit_InterfaceObjectIDTypeFormat {}
  implicit lazy val Generated2_MonthObjectIDTypeFormat: scalaxb.XMLFormat[generated2.MonthObjectIDType] = new DefaultGenerated2_MonthObjectIDTypeFormat {}
  implicit lazy val Generated2_Support_OrderObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Support_OrderObjectIDType] = new DefaultGenerated2_Support_OrderObjectIDTypeFormat {}
  implicit lazy val Generated2_Support_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Support_TypeObjectIDType] = new DefaultGenerated2_Support_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Withholding_OrderObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Withholding_OrderObjectIDType] = new DefaultGenerated2_Withholding_OrderObjectIDTypeFormat {}
  implicit lazy val Generated2_Background_Process_RuntimeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Background_Process_RuntimeObjectIDType] = new DefaultGenerated2_Background_Process_RuntimeObjectIDTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_CaseObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_CaseObjectIDType] = new DefaultGenerated2_Withholding_Order_CaseObjectIDTypeFormat {}
  implicit lazy val Generated2_Metadata_Payroll_WorktagObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Metadata_Payroll_WorktagObjectIDType] = new DefaultGenerated2_Metadata_Payroll_WorktagObjectIDTypeFormat {}
  implicit lazy val Generated2_Tenanted_Payroll_WorktagObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Tenanted_Payroll_WorktagObjectIDType] = new DefaultGenerated2_Tenanted_Payroll_WorktagObjectIDTypeFormat {}
  implicit lazy val Generated2_Deduction_RecipientObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Deduction_RecipientObjectIDType] = new DefaultGenerated2_Deduction_RecipientObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Constant_TextObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Constant_TextObjectIDType] = new DefaultGenerated2_Payroll_Constant_TextObjectIDTypeFormat {}
  implicit lazy val Generated2_Payment_CategoryObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payment_CategoryObjectIDType] = new DefaultGenerated2_Payment_CategoryObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_WorktagObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_WorktagObjectIDType] = new DefaultGenerated2_Payroll_WorktagObjectIDTypeFormat {}
  implicit lazy val Generated2_Supervisory_OrganizationObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Supervisory_OrganizationObjectIDType] = new DefaultGenerated2_Supervisory_OrganizationObjectIDTypeFormat {}
  implicit lazy val Generated2_CompanyObjectIDTypeFormat: scalaxb.XMLFormat[generated2.CompanyObjectIDType] = new DefaultGenerated2_CompanyObjectIDTypeFormat {}
  implicit lazy val Generated2_Cost_CenterObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Cost_CenterObjectIDType] = new DefaultGenerated2_Cost_CenterObjectIDTypeFormat {}
  implicit lazy val Generated2_RegionObjectIDTypeFormat: scalaxb.XMLFormat[generated2.RegionObjectIDType] = new DefaultGenerated2_RegionObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_OrganizationObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_OrganizationObjectIDType] = new DefaultGenerated2_Custom_OrganizationObjectIDTypeFormat {}
  implicit lazy val Generated2_PayeeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.PayeeObjectIDType] = new DefaultGenerated2_PayeeObjectIDTypeFormat {}
  implicit lazy val Generated2_Background_Process_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Background_Process_TypeObjectIDType] = new DefaultGenerated2_Background_Process_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Constant_PercentObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Constant_PercentObjectIDType] = new DefaultGenerated2_Payroll_Constant_PercentObjectIDTypeFormat {}
  implicit lazy val Generated2_Settlement_Bank_AccountObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Settlement_Bank_AccountObjectIDType] = new DefaultGenerated2_Settlement_Bank_AccountObjectIDTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Fee_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Fee_TypeObjectIDType] = new DefaultGenerated2_Withholding_Order_Fee_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Constant_NumberObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Constant_NumberObjectIDType] = new DefaultGenerated2_Payroll_Constant_NumberObjectIDTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Amount_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Amount_TypeObjectIDType] = new DefaultGenerated2_Withholding_Order_Amount_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Offu45cycle_Result_OverrideObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_Result_OverrideObjectIDType] = new DefaultGenerated2_Payroll_Offu45cycle_Result_OverrideObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Offu45cycle_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_TypeObjectIDType] = new DefaultGenerated2_Payroll_Offu45cycle_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Calendar_QuarterObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Calendar_QuarterObjectIDType] = new DefaultGenerated2_Calendar_QuarterObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Action_ReasonObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Action_ReasonObjectIDType] = new DefaultGenerated2_Payroll_Action_ReasonObjectIDTypeFormat {}
  implicit lazy val Generated2_Background_ProcessObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Background_ProcessObjectIDType] = new DefaultGenerated2_Background_ProcessObjectIDTypeFormat {}
  implicit lazy val Generated2_Paycheck_Delivery_MethodObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Paycheck_Delivery_MethodObjectIDType] = new DefaultGenerated2_Paycheck_Delivery_MethodObjectIDTypeFormat {}
  implicit lazy val Generated2_Repository_DocumentObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Repository_DocumentObjectIDType] = new DefaultGenerated2_Repository_DocumentObjectIDTypeFormat {}
  implicit lazy val Generated2_National_ID_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.National_ID_TypeObjectIDType] = new DefaultGenerated2_National_ID_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Payslip_Printing_OverrideObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payslip_Printing_OverrideObjectIDType] = new DefaultGenerated2_Payslip_Printing_OverrideObjectIDTypeFormat {}
  implicit lazy val Generated2_Paycheck_DeliveryObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Paycheck_DeliveryObjectIDType] = new DefaultGenerated2_Paycheck_DeliveryObjectIDTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_TypeObjectIDType] = new DefaultGenerated2_Withholding_Order_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Application_BatchObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Application_BatchObjectIDType] = new DefaultGenerated2_Application_BatchObjectIDTypeFormat {}
  implicit lazy val Generated2_Unique_IdentifierObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Unique_IdentifierObjectIDType] = new DefaultGenerated2_Unique_IdentifierObjectIDTypeFormat {}
  implicit lazy val Generated2_Alternate_Name_UsageObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Alternate_Name_UsageObjectIDType] = new DefaultGenerated2_Alternate_Name_UsageObjectIDTypeFormat {}
  implicit lazy val Generated2_Workers_Compensation_CodeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Workers_Compensation_CodeObjectIDType] = new DefaultGenerated2_Workers_Compensation_CodeObjectIDTypeFormat {}
  implicit lazy val Generated2_Calendar_YearObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Calendar_YearObjectIDType] = new DefaultGenerated2_Calendar_YearObjectIDTypeFormat {}
  implicit lazy val Generated2_Project_Plan_PhaseObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Project_Plan_PhaseObjectIDType] = new DefaultGenerated2_Project_Plan_PhaseObjectIDTypeFormat {}
  implicit lazy val Generated2_External_Field_and_Parameter_Initialization_ProviderObjectIDTypeFormat: scalaxb.XMLFormat[generated2.External_Field_and_Parameter_Initialization_ProviderObjectIDType] = new DefaultGenerated2_External_Field_and_Parameter_Initialization_ProviderObjectIDTypeFormat {}
  implicit lazy val Generated2_Position_ElementObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Position_ElementObjectIDType] = new DefaultGenerated2_Position_ElementObjectIDTypeFormat {}
  implicit lazy val Generated2_FundObjectIDTypeFormat: scalaxb.XMLFormat[generated2.FundObjectIDType] = new DefaultGenerated2_FundObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Reporting_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Reporting_TypeObjectIDType] = new DefaultGenerated2_Payroll_Reporting_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Tax_LevyObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Tax_LevyObjectIDType] = new DefaultGenerated2_Tax_LevyObjectIDTypeFormat {}
  implicit lazy val Generated2_Integration_Document_FieldObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Integration_Document_FieldObjectIDType] = new DefaultGenerated2_Integration_Document_FieldObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Reference_NumberObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Reference_NumberObjectIDType] = new DefaultGenerated2_Payroll_Reference_NumberObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_PT1ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_PT1ObjectIDType] = new DefaultGenerated2_Payroll_Payee_PT1ObjectIDTypeFormat {}
  implicit lazy val Generated2_PositionObjectIDTypeFormat: scalaxb.XMLFormat[generated2.PositionObjectIDType] = new DefaultGenerated2_PositionObjectIDTypeFormat {}
  implicit lazy val Generated2_Period_Schedule_UsageObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Period_Schedule_UsageObjectIDType] = new DefaultGenerated2_Period_Schedule_UsageObjectIDTypeFormat {}
  implicit lazy val Generated2_Outsourced_Payment_GroupObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Outsourced_Payment_GroupObjectIDType] = new DefaultGenerated2_Outsourced_Payment_GroupObjectIDTypeFormat {}
  implicit lazy val Generated2_Position_RestrictionsObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Position_RestrictionsObjectIDType] = new DefaultGenerated2_Position_RestrictionsObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Reporting_Code__All_ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Reporting_Code__All_ObjectIDType] = new DefaultGenerated2_Payroll_Reporting_Code__All_ObjectIDTypeFormat {}
  implicit lazy val Generated2_Time_Tracking_Eligibility_RuleObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Time_Tracking_Eligibility_RuleObjectIDType] = new DefaultGenerated2_Time_Tracking_Eligibility_RuleObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_FICA_Exempt_ReasonObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectIDType] = new DefaultGenerated2_Payroll_Payee_FICA_Exempt_ReasonObjectIDTypeFormat {}
  implicit lazy val Generated2_ProgramObjectIDTypeFormat: scalaxb.XMLFormat[generated2.ProgramObjectIDType] = new DefaultGenerated2_ProgramObjectIDTypeFormat {}
  implicit lazy val Generated2_GrantObjectIDTypeFormat: scalaxb.XMLFormat[generated2.GrantObjectIDType] = new DefaultGenerated2_GrantObjectIDTypeFormat {}
  implicit lazy val Generated2_Business_UnitObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Business_UnitObjectIDType] = new DefaultGenerated2_Business_UnitObjectIDTypeFormat {}
  implicit lazy val Generated2_Object_ClassObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Object_ClassObjectIDType] = new DefaultGenerated2_Object_ClassObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Income_CodeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Income_CodeObjectIDType] = new DefaultGenerated2_Payroll_Income_CodeObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_IRS_CountryObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_IRS_CountryObjectIDType] = new DefaultGenerated2_Payroll_IRS_CountryObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Treaty_USAObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Treaty_USAObjectIDType] = new DefaultGenerated2_Payroll_Payee_Tax_Treaty_USAObjectIDTypeFormat {}
  implicit lazy val Generated2_Kind_of_Employer_for_Payroll_Tax_FilingObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectIDType] = new DefaultGenerated2_Kind_of_Employer_for_Payroll_Tax_FilingObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Income_Code_SubtypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Income_Code_SubtypeObjectIDType] = new DefaultGenerated2_Payroll_Income_Code_SubtypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDType] = new DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDTypeFormat {}
  implicit lazy val Generated2_Tax_Address_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Tax_Address_TypeObjectIDType] = new DefaultGenerated2_Tax_Address_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_06ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_06ObjectIDType] = new DefaultGenerated2_Custom_Worktag_06ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_07ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_07ObjectIDType] = new DefaultGenerated2_Custom_Worktag_07ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_08ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_08ObjectIDType] = new DefaultGenerated2_Custom_Worktag_08ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_09ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_09ObjectIDType] = new DefaultGenerated2_Custom_Worktag_09ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_10ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_10ObjectIDType] = new DefaultGenerated2_Custom_Worktag_10ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_11ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_11ObjectIDType] = new DefaultGenerated2_Custom_Worktag_11ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_12ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_12ObjectIDType] = new DefaultGenerated2_Custom_Worktag_12ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_13ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_13ObjectIDType] = new DefaultGenerated2_Custom_Worktag_13ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_14ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_14ObjectIDType] = new DefaultGenerated2_Custom_Worktag_14ObjectIDTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_15ObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_15ObjectIDType] = new DefaultGenerated2_Custom_Worktag_15ObjectIDTypeFormat {}
  implicit lazy val Generated2_GiftObjectIDTypeFormat: scalaxb.XMLFormat[generated2.GiftObjectIDType] = new DefaultGenerated2_GiftObjectIDTypeFormat {}
  implicit lazy val Generated2_Address_ReferenceObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Address_ReferenceObjectIDType] = new DefaultGenerated2_Address_ReferenceObjectIDTypeFormat {}
  implicit lazy val Generated2_Web_Service_Background_Process_RuntimeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Web_Service_Background_Process_RuntimeObjectIDType] = new DefaultGenerated2_Web_Service_Background_Process_RuntimeObjectIDTypeFormat {}
  implicit lazy val Generated2_Report_Output_TagObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Report_Output_TagObjectIDType] = new DefaultGenerated2_Report_Output_TagObjectIDTypeFormat {}
  implicit lazy val Generated2_Successor_EmployerObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Successor_EmployerObjectIDType] = new DefaultGenerated2_Successor_EmployerObjectIDTypeFormat {}
  implicit lazy val Generated2_Company_Relationship_TypeObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Company_Relationship_TypeObjectIDType] = new DefaultGenerated2_Company_Relationship_TypeObjectIDTypeFormat {}
  implicit lazy val Generated2_Communication_Usage_Behavior_TenantedObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Communication_Usage_Behavior_TenantedObjectIDType] = new DefaultGenerated2_Communication_Usage_Behavior_TenantedObjectIDTypeFormat {}
  implicit lazy val Generated2_Time_Unit_for_AnnualizationObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Time_Unit_for_AnnualizationObjectIDType] = new DefaultGenerated2_Time_Unit_for_AnnualizationObjectIDTypeFormat {}
  implicit lazy val Generated2_Single_Legal_EntityObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Single_Legal_EntityObjectIDType] = new DefaultGenerated2_Single_Legal_EntityObjectIDTypeFormat {}
  implicit lazy val Generated2_ARRCOu45AGIRC_Rubric_ValueObjectIDTypeFormat: scalaxb.XMLFormat[generated2.ARRCOu45AGIRC_Rubric_ValueObjectIDType] = new DefaultGenerated2_ARRCOu45AGIRC_Rubric_ValueObjectIDTypeFormat {}
  implicit lazy val Generated2_NI_CategoryObjectIDTypeFormat: scalaxb.XMLFormat[generated2.NI_CategoryObjectIDType] = new DefaultGenerated2_NI_CategoryObjectIDTypeFormat {}
  implicit lazy val Generated2_EstablishmentObjectIDTypeFormat: scalaxb.XMLFormat[generated2.EstablishmentObjectIDType] = new DefaultGenerated2_EstablishmentObjectIDTypeFormat {}
  implicit lazy val Generated2_Event_Attachment_CategoryObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Event_Attachment_CategoryObjectIDType] = new DefaultGenerated2_Event_Attachment_CategoryObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_IDObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_IDObjectIDType] = new DefaultGenerated2_Payroll_IDObjectIDTypeFormat {}
  implicit lazy val Generated2_Country_CityObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Country_CityObjectIDType] = new DefaultGenerated2_Country_CityObjectIDTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Override_Completion_CriteriaObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Override_Completion_CriteriaObjectIDType] = new DefaultGenerated2_Withholding_Order_Override_Completion_CriteriaObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDType] = new DefaultGenerated2_Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Tax_Location_MappingObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Tax_Location_MappingObjectIDType] = new DefaultGenerated2_Payroll_Tax_Location_MappingObjectIDTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Withholding_FrequencyObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Withholding_FrequencyObjectIDType] = new DefaultGenerated2_Withholding_Order_Withholding_FrequencyObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Location_MappingObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Location_MappingObjectIDType] = new DefaultGenerated2_Payroll_Payee_Tax_Location_MappingObjectIDTypeFormat {}
  implicit lazy val Generated2_Pay_Group_Pay_Run_Group_SelectionObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Pay_Group_Pay_Run_Group_SelectionObjectIDType] = new DefaultGenerated2_Pay_Group_Pay_Run_Group_SelectionObjectIDTypeFormat {}
  implicit lazy val Generated2_Email_ReferenceObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Email_ReferenceObjectIDType] = new DefaultGenerated2_Email_ReferenceObjectIDTypeFormat {}
  implicit lazy val Generated2_Payslip_Printing_OptionObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payslip_Printing_OptionObjectIDType] = new DefaultGenerated2_Payslip_Printing_OptionObjectIDTypeFormat {}
  implicit lazy val Generated2_Payroll_Event_CategoryObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Event_CategoryObjectIDType] = new DefaultGenerated2_Payroll_Event_CategoryObjectIDTypeFormat {}
  implicit lazy val Generated2_Phone_ReferenceObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Phone_ReferenceObjectIDType] = new DefaultGenerated2_Phone_ReferenceObjectIDTypeFormat {}
  implicit lazy val Generated2_Web_Address_ReferenceObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Web_Address_ReferenceObjectIDType] = new DefaultGenerated2_Web_Address_ReferenceObjectIDTypeFormat {}
  implicit lazy val Generated2_Instant_Messenger_ReferenceObjectIDTypeFormat: scalaxb.XMLFormat[generated2.Instant_Messenger_ReferenceObjectIDType] = new DefaultGenerated2_Instant_Messenger_ReferenceObjectIDTypeFormat {}
  implicit lazy val Generated2_LocationObjectTypeFormat: scalaxb.XMLFormat[generated2.LocationObjectType] = new DefaultGenerated2_LocationObjectTypeFormat {}
  implicit lazy val Generated2_Job_ProfileObjectTypeFormat: scalaxb.XMLFormat[generated2.Job_ProfileObjectType] = new DefaultGenerated2_Job_ProfileObjectTypeFormat {}
  implicit lazy val Generated2_Organization_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Organization_TypeObjectType] = new DefaultGenerated2_Organization_TypeObjectTypeFormat {}
  implicit lazy val Generated2_EmployeeObjectTypeFormat: scalaxb.XMLFormat[generated2.EmployeeObjectType] = new DefaultGenerated2_EmployeeObjectTypeFormat {}
  implicit lazy val Generated2_Instant_Messenger_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Instant_Messenger_TypeObjectType] = new DefaultGenerated2_Instant_Messenger_TypeObjectTypeFormat {}
  implicit lazy val Generated2_WorkerObjectTypeFormat: scalaxb.XMLFormat[generated2.WorkerObjectType] = new DefaultGenerated2_WorkerObjectTypeFormat {}
  implicit lazy val Generated2_FrequencyObjectTypeFormat: scalaxb.XMLFormat[generated2.FrequencyObjectType] = new DefaultGenerated2_FrequencyObjectTypeFormat {}
  implicit lazy val Generated2_Pay_Rate_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Pay_Rate_TypeObjectType] = new DefaultGenerated2_Pay_Rate_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Integration_System__Audited_ObjectTypeFormat: scalaxb.XMLFormat[generated2.Integration_System__Audited_ObjectType] = new DefaultGenerated2_Integration_System__Audited_ObjectTypeFormat {}
  implicit lazy val Generated2_Background_Process_Runtime_StatusObjectTypeFormat: scalaxb.XMLFormat[generated2.Background_Process_Runtime_StatusObjectType] = new DefaultGenerated2_Background_Process_Runtime_StatusObjectTypeFormat {}
  implicit lazy val Generated2_Bank_AccountObjectTypeFormat: scalaxb.XMLFormat[generated2.Bank_AccountObjectType] = new DefaultGenerated2_Bank_AccountObjectTypeFormat {}
  implicit lazy val Generated2_Payment_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Payment_TypeObjectType] = new DefaultGenerated2_Payment_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Phone_Device_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Phone_Device_TypeObjectType] = new DefaultGenerated2_Phone_Device_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Pay_Group_DetailObjectTypeFormat: scalaxb.XMLFormat[generated2.Pay_Group_DetailObjectType] = new DefaultGenerated2_Pay_Group_DetailObjectTypeFormat {}
  implicit lazy val Generated2_Period_ScheduleObjectTypeFormat: scalaxb.XMLFormat[generated2.Period_ScheduleObjectType] = new DefaultGenerated2_Period_ScheduleObjectTypeFormat {}
  implicit lazy val Generated2_PeriodObjectTypeFormat: scalaxb.XMLFormat[generated2.PeriodObjectType] = new DefaultGenerated2_PeriodObjectTypeFormat {}
  implicit lazy val Generated2_Run_CategoryObjectTypeFormat: scalaxb.XMLFormat[generated2.Run_CategoryObjectType] = new DefaultGenerated2_Run_CategoryObjectTypeFormat {}
  implicit lazy val Generated2_Earning__All_ObjectTypeFormat: scalaxb.XMLFormat[generated2.Earning__All_ObjectType] = new DefaultGenerated2_Earning__All_ObjectTypeFormat {}
  implicit lazy val Generated2_Deduction__All_ObjectTypeFormat: scalaxb.XMLFormat[generated2.Deduction__All_ObjectType] = new DefaultGenerated2_Deduction__All_ObjectTypeFormat {}
  implicit lazy val Generated2_Pay_Accumulation__All_ObjectTypeFormat: scalaxb.XMLFormat[generated2.Pay_Accumulation__All_ObjectType] = new DefaultGenerated2_Pay_Accumulation__All_ObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_CalculationObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_CalculationObjectType] = new DefaultGenerated2_Payroll_CalculationObjectTypeFormat {}
  implicit lazy val Generated2_Balance_Period__All_ObjectTypeFormat: scalaxb.XMLFormat[generated2.Balance_Period__All_ObjectType] = new DefaultGenerated2_Balance_Period__All_ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_01ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_01ObjectType] = new DefaultGenerated2_Custom_Worktag_01ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_02ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_02ObjectType] = new DefaultGenerated2_Custom_Worktag_02ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_03ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_03ObjectType] = new DefaultGenerated2_Custom_Worktag_03ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_04ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_04ObjectType] = new DefaultGenerated2_Custom_Worktag_04ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_05ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_05ObjectType] = new DefaultGenerated2_Custom_Worktag_05ObjectTypeFormat {}
  implicit lazy val Generated2_Financial_InstitutionObjectTypeFormat: scalaxb.XMLFormat[generated2.Financial_InstitutionObjectType] = new DefaultGenerated2_Financial_InstitutionObjectTypeFormat {}
  implicit lazy val Generated2_Pay_ComponentObjectTypeFormat: scalaxb.XMLFormat[generated2.Pay_ComponentObjectType] = new DefaultGenerated2_Pay_ComponentObjectTypeFormat {}
  implicit lazy val Generated2_Related_Calculation__All_ObjectTypeFormat: scalaxb.XMLFormat[generated2.Related_Calculation__All_ObjectType] = new DefaultGenerated2_Related_Calculation__All_ObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_InputObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_InputObjectType] = new DefaultGenerated2_Payroll_InputObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Withholding_StatusObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Withholding_StatusObjectType] = new DefaultGenerated2_Payroll_Withholding_StatusObjectTypeFormat {}
  implicit lazy val Generated2_Communication_Usage_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Communication_Usage_TypeObjectType] = new DefaultGenerated2_Communication_Usage_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Communication_Usage_BehaviorObjectTypeFormat: scalaxb.XMLFormat[generated2.Communication_Usage_BehaviorObjectType] = new DefaultGenerated2_Communication_Usage_BehaviorObjectTypeFormat {}
  implicit lazy val Generated2_Period_Date_IndicatorObjectTypeFormat: scalaxb.XMLFormat[generated2.Period_Date_IndicatorObjectType] = new DefaultGenerated2_Period_Date_IndicatorObjectTypeFormat {}
  implicit lazy val Generated2_CountryObjectTypeFormat: scalaxb.XMLFormat[generated2.CountryObjectType] = new DefaultGenerated2_CountryObjectTypeFormat {}
  implicit lazy val Generated2_Country_RegionObjectTypeFormat: scalaxb.XMLFormat[generated2.Country_RegionObjectType] = new DefaultGenerated2_Country_RegionObjectTypeFormat {}
  implicit lazy val Generated2_CurrencyObjectTypeFormat: scalaxb.XMLFormat[generated2.CurrencyObjectType] = new DefaultGenerated2_CurrencyObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_DataObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_DataObjectType] = new DefaultGenerated2_Payroll_Payee_Tax_DataObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_FUTAObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_FUTAObjectType] = new DefaultGenerated2_Payroll_Payee_FUTAObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Tax_AuthorityObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Tax_AuthorityObjectType] = new DefaultGenerated2_Payroll_Tax_AuthorityObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_State_AuthorityObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_State_AuthorityObjectType] = new DefaultGenerated2_Payroll_State_AuthorityObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Local_AuthorityObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Local_AuthorityObjectType] = new DefaultGenerated2_Payroll_Local_AuthorityObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Local_County_AuthorityObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Local_County_AuthorityObjectType] = new DefaultGenerated2_Payroll_Local_County_AuthorityObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Local_City_AuthorityObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Local_City_AuthorityObjectType] = new DefaultGenerated2_Payroll_Local_City_AuthorityObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Local_School_District_AuthorityObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Local_School_District_AuthorityObjectType] = new DefaultGenerated2_Payroll_Local_School_District_AuthorityObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Other_AuthorityObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Other_AuthorityObjectType] = new DefaultGenerated2_Payroll_Other_AuthorityObjectTypeFormat {}
  implicit lazy val Generated2_Project_Plan_TaskObjectTypeFormat: scalaxb.XMLFormat[generated2.Project_Plan_TaskObjectType] = new DefaultGenerated2_Project_Plan_TaskObjectTypeFormat {}
  implicit lazy val Generated2_ProjectObjectTypeFormat: scalaxb.XMLFormat[generated2.ProjectObjectType] = new DefaultGenerated2_ProjectObjectTypeFormat {}
  implicit lazy val Generated2_Frequency_BehaviorObjectTypeFormat: scalaxb.XMLFormat[generated2.Frequency_BehaviorObjectType] = new DefaultGenerated2_Frequency_BehaviorObjectTypeFormat {}
  implicit lazy val Generated2_Settlement_InstructionObjectTypeFormat: scalaxb.XMLFormat[generated2.Settlement_InstructionObjectType] = new DefaultGenerated2_Settlement_InstructionObjectTypeFormat {}
  implicit lazy val Generated2_Pay_GroupObjectTypeFormat: scalaxb.XMLFormat[generated2.Pay_GroupObjectType] = new DefaultGenerated2_Pay_GroupObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Limit_OverrideObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Limit_OverrideObjectType] = new DefaultGenerated2_Payroll_Limit_OverrideObjectTypeFormat {}
  implicit lazy val Generated2_Bank_Account_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Bank_Account_TypeObjectType] = new DefaultGenerated2_Bank_Account_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Payment_MethodObjectTypeFormat: scalaxb.XMLFormat[generated2.Payment_MethodObjectType] = new DefaultGenerated2_Payment_MethodObjectTypeFormat {}
  implicit lazy val Generated2_Pay_Run_Group_SelectionObjectTypeFormat: scalaxb.XMLFormat[generated2.Pay_Run_Group_SelectionObjectType] = new DefaultGenerated2_Pay_Run_Group_SelectionObjectTypeFormat {}
  implicit lazy val Generated2_Deduction__Workday_Owned_ObjectTypeFormat: scalaxb.XMLFormat[generated2.Deduction__Workday_Owned_ObjectType] = new DefaultGenerated2_Deduction__Workday_Owned_ObjectTypeFormat {}
  implicit lazy val Generated2_DeductionObjectTypeFormat: scalaxb.XMLFormat[generated2.DeductionObjectType] = new DefaultGenerated2_DeductionObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_T1ObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_T1ObjectType] = new DefaultGenerated2_Payroll_Payee_T1ObjectTypeFormat {}
  implicit lazy val Generated2_Limit_InterfaceObjectTypeFormat: scalaxb.XMLFormat[generated2.Limit_InterfaceObjectType] = new DefaultGenerated2_Limit_InterfaceObjectTypeFormat {}
  implicit lazy val Generated2_MonthObjectTypeFormat: scalaxb.XMLFormat[generated2.MonthObjectType] = new DefaultGenerated2_MonthObjectTypeFormat {}
  implicit lazy val Generated2_Support_OrderObjectTypeFormat: scalaxb.XMLFormat[generated2.Support_OrderObjectType] = new DefaultGenerated2_Support_OrderObjectTypeFormat {}
  implicit lazy val Generated2_Support_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Support_TypeObjectType] = new DefaultGenerated2_Support_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Withholding_OrderObjectTypeFormat: scalaxb.XMLFormat[generated2.Withholding_OrderObjectType] = new DefaultGenerated2_Withholding_OrderObjectTypeFormat {}
  implicit lazy val Generated2_Background_Process_RuntimeObjectTypeFormat: scalaxb.XMLFormat[generated2.Background_Process_RuntimeObjectType] = new DefaultGenerated2_Background_Process_RuntimeObjectTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_CaseObjectTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_CaseObjectType] = new DefaultGenerated2_Withholding_Order_CaseObjectTypeFormat {}
  implicit lazy val Generated2_Metadata_Payroll_WorktagObjectTypeFormat: scalaxb.XMLFormat[generated2.Metadata_Payroll_WorktagObjectType] = new DefaultGenerated2_Metadata_Payroll_WorktagObjectTypeFormat {}
  implicit lazy val Generated2_Tenanted_Payroll_WorktagObjectTypeFormat: scalaxb.XMLFormat[generated2.Tenanted_Payroll_WorktagObjectType] = new DefaultGenerated2_Tenanted_Payroll_WorktagObjectTypeFormat {}
  implicit lazy val Generated2_Deduction_RecipientObjectTypeFormat: scalaxb.XMLFormat[generated2.Deduction_RecipientObjectType] = new DefaultGenerated2_Deduction_RecipientObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Constant_TextObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Constant_TextObjectType] = new DefaultGenerated2_Payroll_Constant_TextObjectTypeFormat {}
  implicit lazy val Generated2_Payment_CategoryObjectTypeFormat: scalaxb.XMLFormat[generated2.Payment_CategoryObjectType] = new DefaultGenerated2_Payment_CategoryObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_WorktagObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_WorktagObjectType] = new DefaultGenerated2_Payroll_WorktagObjectTypeFormat {}
  implicit lazy val Generated2_Supervisory_OrganizationObjectTypeFormat: scalaxb.XMLFormat[generated2.Supervisory_OrganizationObjectType] = new DefaultGenerated2_Supervisory_OrganizationObjectTypeFormat {}
  implicit lazy val Generated2_CompanyObjectTypeFormat: scalaxb.XMLFormat[generated2.CompanyObjectType] = new DefaultGenerated2_CompanyObjectTypeFormat {}
  implicit lazy val Generated2_Cost_CenterObjectTypeFormat: scalaxb.XMLFormat[generated2.Cost_CenterObjectType] = new DefaultGenerated2_Cost_CenterObjectTypeFormat {}
  implicit lazy val Generated2_RegionObjectTypeFormat: scalaxb.XMLFormat[generated2.RegionObjectType] = new DefaultGenerated2_RegionObjectTypeFormat {}
  implicit lazy val Generated2_Custom_OrganizationObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_OrganizationObjectType] = new DefaultGenerated2_Custom_OrganizationObjectTypeFormat {}
  implicit lazy val Generated2_PayeeObjectTypeFormat: scalaxb.XMLFormat[generated2.PayeeObjectType] = new DefaultGenerated2_PayeeObjectTypeFormat {}
  implicit lazy val Generated2_Background_Process_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Background_Process_TypeObjectType] = new DefaultGenerated2_Background_Process_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Constant_PercentObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Constant_PercentObjectType] = new DefaultGenerated2_Payroll_Constant_PercentObjectTypeFormat {}
  implicit lazy val Generated2_Settlement_Bank_AccountObjectTypeFormat: scalaxb.XMLFormat[generated2.Settlement_Bank_AccountObjectType] = new DefaultGenerated2_Settlement_Bank_AccountObjectTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Fee_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Fee_TypeObjectType] = new DefaultGenerated2_Withholding_Order_Fee_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Constant_NumberObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Constant_NumberObjectType] = new DefaultGenerated2_Payroll_Constant_NumberObjectTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Amount_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Amount_TypeObjectType] = new DefaultGenerated2_Withholding_Order_Amount_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Offu45cycle_Result_OverrideObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_Result_OverrideObjectType] = new DefaultGenerated2_Payroll_Offu45cycle_Result_OverrideObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Offu45cycle_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_TypeObjectType] = new DefaultGenerated2_Payroll_Offu45cycle_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Calendar_QuarterObjectTypeFormat: scalaxb.XMLFormat[generated2.Calendar_QuarterObjectType] = new DefaultGenerated2_Calendar_QuarterObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Action_ReasonObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Action_ReasonObjectType] = new DefaultGenerated2_Payroll_Action_ReasonObjectTypeFormat {}
  implicit lazy val Generated2_Background_ProcessObjectTypeFormat: scalaxb.XMLFormat[generated2.Background_ProcessObjectType] = new DefaultGenerated2_Background_ProcessObjectTypeFormat {}
  implicit lazy val Generated2_Paycheck_Delivery_MethodObjectTypeFormat: scalaxb.XMLFormat[generated2.Paycheck_Delivery_MethodObjectType] = new DefaultGenerated2_Paycheck_Delivery_MethodObjectTypeFormat {}
  implicit lazy val Generated2_Repository_DocumentObjectTypeFormat: scalaxb.XMLFormat[generated2.Repository_DocumentObjectType] = new DefaultGenerated2_Repository_DocumentObjectTypeFormat {}
  implicit lazy val Generated2_National_ID_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.National_ID_TypeObjectType] = new DefaultGenerated2_National_ID_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Payslip_Printing_OverrideObjectTypeFormat: scalaxb.XMLFormat[generated2.Payslip_Printing_OverrideObjectType] = new DefaultGenerated2_Payslip_Printing_OverrideObjectTypeFormat {}
  implicit lazy val Generated2_Paycheck_DeliveryObjectTypeFormat: scalaxb.XMLFormat[generated2.Paycheck_DeliveryObjectType] = new DefaultGenerated2_Paycheck_DeliveryObjectTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_TypeObjectType] = new DefaultGenerated2_Withholding_Order_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Application_BatchObjectTypeFormat: scalaxb.XMLFormat[generated2.Application_BatchObjectType] = new DefaultGenerated2_Application_BatchObjectTypeFormat {}
  implicit lazy val Generated2_Unique_IdentifierObjectTypeFormat: scalaxb.XMLFormat[generated2.Unique_IdentifierObjectType] = new DefaultGenerated2_Unique_IdentifierObjectTypeFormat {}
  implicit lazy val Generated2_Alternate_Name_UsageObjectTypeFormat: scalaxb.XMLFormat[generated2.Alternate_Name_UsageObjectType] = new DefaultGenerated2_Alternate_Name_UsageObjectTypeFormat {}
  implicit lazy val Generated2_Workers_Compensation_CodeObjectTypeFormat: scalaxb.XMLFormat[generated2.Workers_Compensation_CodeObjectType] = new DefaultGenerated2_Workers_Compensation_CodeObjectTypeFormat {}
  implicit lazy val Generated2_Calendar_YearObjectTypeFormat: scalaxb.XMLFormat[generated2.Calendar_YearObjectType] = new DefaultGenerated2_Calendar_YearObjectTypeFormat {}
  implicit lazy val Generated2_Project_Plan_PhaseObjectTypeFormat: scalaxb.XMLFormat[generated2.Project_Plan_PhaseObjectType] = new DefaultGenerated2_Project_Plan_PhaseObjectTypeFormat {}
  implicit lazy val Generated2_External_Field_and_Parameter_Initialization_ProviderObjectTypeFormat: scalaxb.XMLFormat[generated2.External_Field_and_Parameter_Initialization_ProviderObjectType] = new DefaultGenerated2_External_Field_and_Parameter_Initialization_ProviderObjectTypeFormat {}
  implicit lazy val Generated2_Position_ElementObjectTypeFormat: scalaxb.XMLFormat[generated2.Position_ElementObjectType] = new DefaultGenerated2_Position_ElementObjectTypeFormat {}
  implicit lazy val Generated2_FundObjectTypeFormat: scalaxb.XMLFormat[generated2.FundObjectType] = new DefaultGenerated2_FundObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Reporting_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Reporting_TypeObjectType] = new DefaultGenerated2_Payroll_Reporting_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Tax_LevyObjectTypeFormat: scalaxb.XMLFormat[generated2.Tax_LevyObjectType] = new DefaultGenerated2_Tax_LevyObjectTypeFormat {}
  implicit lazy val Generated2_Integration_Document_FieldObjectTypeFormat: scalaxb.XMLFormat[generated2.Integration_Document_FieldObjectType] = new DefaultGenerated2_Integration_Document_FieldObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Reference_NumberObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Reference_NumberObjectType] = new DefaultGenerated2_Payroll_Reference_NumberObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_PT1ObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_PT1ObjectType] = new DefaultGenerated2_Payroll_Payee_PT1ObjectTypeFormat {}
  implicit lazy val Generated2_PositionObjectTypeFormat: scalaxb.XMLFormat[generated2.PositionObjectType] = new DefaultGenerated2_PositionObjectTypeFormat {}
  implicit lazy val Generated2_Period_Schedule_UsageObjectTypeFormat: scalaxb.XMLFormat[generated2.Period_Schedule_UsageObjectType] = new DefaultGenerated2_Period_Schedule_UsageObjectTypeFormat {}
  implicit lazy val Generated2_Outsourced_Payment_GroupObjectTypeFormat: scalaxb.XMLFormat[generated2.Outsourced_Payment_GroupObjectType] = new DefaultGenerated2_Outsourced_Payment_GroupObjectTypeFormat {}
  implicit lazy val Generated2_Position_RestrictionsObjectTypeFormat: scalaxb.XMLFormat[generated2.Position_RestrictionsObjectType] = new DefaultGenerated2_Position_RestrictionsObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Reporting_Code__All_ObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Reporting_Code__All_ObjectType] = new DefaultGenerated2_Payroll_Reporting_Code__All_ObjectTypeFormat {}
  implicit lazy val Generated2_Time_Tracking_Eligibility_RuleObjectTypeFormat: scalaxb.XMLFormat[generated2.Time_Tracking_Eligibility_RuleObjectType] = new DefaultGenerated2_Time_Tracking_Eligibility_RuleObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_FICA_Exempt_ReasonObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectType] = new DefaultGenerated2_Payroll_Payee_FICA_Exempt_ReasonObjectTypeFormat {}
  implicit lazy val Generated2_ProgramObjectTypeFormat: scalaxb.XMLFormat[generated2.ProgramObjectType] = new DefaultGenerated2_ProgramObjectTypeFormat {}
  implicit lazy val Generated2_GrantObjectTypeFormat: scalaxb.XMLFormat[generated2.GrantObjectType] = new DefaultGenerated2_GrantObjectTypeFormat {}
  implicit lazy val Generated2_Business_UnitObjectTypeFormat: scalaxb.XMLFormat[generated2.Business_UnitObjectType] = new DefaultGenerated2_Business_UnitObjectTypeFormat {}
  implicit lazy val Generated2_Object_ClassObjectTypeFormat: scalaxb.XMLFormat[generated2.Object_ClassObjectType] = new DefaultGenerated2_Object_ClassObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Income_CodeObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Income_CodeObjectType] = new DefaultGenerated2_Payroll_Income_CodeObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_IRS_CountryObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_IRS_CountryObjectType] = new DefaultGenerated2_Payroll_IRS_CountryObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Treaty_USAObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Treaty_USAObjectType] = new DefaultGenerated2_Payroll_Payee_Tax_Treaty_USAObjectTypeFormat {}
  implicit lazy val Generated2_Kind_of_Employer_for_Payroll_Tax_FilingObjectTypeFormat: scalaxb.XMLFormat[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectType] = new DefaultGenerated2_Kind_of_Employer_for_Payroll_Tax_FilingObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Income_Code_SubtypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Income_Code_SubtypeObjectType] = new DefaultGenerated2_Payroll_Income_Code_SubtypeObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType] = new DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectTypeFormat {}
  implicit lazy val Generated2_Tax_Address_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Tax_Address_TypeObjectType] = new DefaultGenerated2_Tax_Address_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_06ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_06ObjectType] = new DefaultGenerated2_Custom_Worktag_06ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_07ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_07ObjectType] = new DefaultGenerated2_Custom_Worktag_07ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_08ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_08ObjectType] = new DefaultGenerated2_Custom_Worktag_08ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_09ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_09ObjectType] = new DefaultGenerated2_Custom_Worktag_09ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_10ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_10ObjectType] = new DefaultGenerated2_Custom_Worktag_10ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_11ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_11ObjectType] = new DefaultGenerated2_Custom_Worktag_11ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_12ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_12ObjectType] = new DefaultGenerated2_Custom_Worktag_12ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_13ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_13ObjectType] = new DefaultGenerated2_Custom_Worktag_13ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_14ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_14ObjectType] = new DefaultGenerated2_Custom_Worktag_14ObjectTypeFormat {}
  implicit lazy val Generated2_Custom_Worktag_15ObjectTypeFormat: scalaxb.XMLFormat[generated2.Custom_Worktag_15ObjectType] = new DefaultGenerated2_Custom_Worktag_15ObjectTypeFormat {}
  implicit lazy val Generated2_GiftObjectTypeFormat: scalaxb.XMLFormat[generated2.GiftObjectType] = new DefaultGenerated2_GiftObjectTypeFormat {}
  implicit lazy val Generated2_Address_ReferenceObjectTypeFormat: scalaxb.XMLFormat[generated2.Address_ReferenceObjectType] = new DefaultGenerated2_Address_ReferenceObjectTypeFormat {}
  implicit lazy val Generated2_Web_Service_Background_Process_RuntimeObjectTypeFormat: scalaxb.XMLFormat[generated2.Web_Service_Background_Process_RuntimeObjectType] = new DefaultGenerated2_Web_Service_Background_Process_RuntimeObjectTypeFormat {}
  implicit lazy val Generated2_Report_Output_TagObjectTypeFormat: scalaxb.XMLFormat[generated2.Report_Output_TagObjectType] = new DefaultGenerated2_Report_Output_TagObjectTypeFormat {}
  implicit lazy val Generated2_Successor_EmployerObjectTypeFormat: scalaxb.XMLFormat[generated2.Successor_EmployerObjectType] = new DefaultGenerated2_Successor_EmployerObjectTypeFormat {}
  implicit lazy val Generated2_Company_Relationship_TypeObjectTypeFormat: scalaxb.XMLFormat[generated2.Company_Relationship_TypeObjectType] = new DefaultGenerated2_Company_Relationship_TypeObjectTypeFormat {}
  implicit lazy val Generated2_Communication_Usage_Behavior_TenantedObjectTypeFormat: scalaxb.XMLFormat[generated2.Communication_Usage_Behavior_TenantedObjectType] = new DefaultGenerated2_Communication_Usage_Behavior_TenantedObjectTypeFormat {}
  implicit lazy val Generated2_Time_Unit_for_AnnualizationObjectTypeFormat: scalaxb.XMLFormat[generated2.Time_Unit_for_AnnualizationObjectType] = new DefaultGenerated2_Time_Unit_for_AnnualizationObjectTypeFormat {}
  implicit lazy val Generated2_Single_Legal_EntityObjectTypeFormat: scalaxb.XMLFormat[generated2.Single_Legal_EntityObjectType] = new DefaultGenerated2_Single_Legal_EntityObjectTypeFormat {}
  implicit lazy val Generated2_ARRCOu45AGIRC_Rubric_ValueObjectTypeFormat: scalaxb.XMLFormat[generated2.ARRCOu45AGIRC_Rubric_ValueObjectType] = new DefaultGenerated2_ARRCOu45AGIRC_Rubric_ValueObjectTypeFormat {}
  implicit lazy val Generated2_NI_CategoryObjectTypeFormat: scalaxb.XMLFormat[generated2.NI_CategoryObjectType] = new DefaultGenerated2_NI_CategoryObjectTypeFormat {}
  implicit lazy val Generated2_EstablishmentObjectTypeFormat: scalaxb.XMLFormat[generated2.EstablishmentObjectType] = new DefaultGenerated2_EstablishmentObjectTypeFormat {}
  implicit lazy val Generated2_Event_Attachment_CategoryObjectTypeFormat: scalaxb.XMLFormat[generated2.Event_Attachment_CategoryObjectType] = new DefaultGenerated2_Event_Attachment_CategoryObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_IDObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_IDObjectType] = new DefaultGenerated2_Payroll_IDObjectTypeFormat {}
  implicit lazy val Generated2_Country_CityObjectTypeFormat: scalaxb.XMLFormat[generated2.Country_CityObjectType] = new DefaultGenerated2_Country_CityObjectTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Override_Completion_CriteriaObjectTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Override_Completion_CriteriaObjectType] = new DefaultGenerated2_Withholding_Order_Override_Completion_CriteriaObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectType] = new DefaultGenerated2_Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Tax_Location_MappingObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Tax_Location_MappingObjectType] = new DefaultGenerated2_Payroll_Tax_Location_MappingObjectTypeFormat {}
  implicit lazy val Generated2_Withholding_Order_Withholding_FrequencyObjectTypeFormat: scalaxb.XMLFormat[generated2.Withholding_Order_Withholding_FrequencyObjectType] = new DefaultGenerated2_Withholding_Order_Withholding_FrequencyObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Payee_Tax_Location_MappingObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Location_MappingObjectType] = new DefaultGenerated2_Payroll_Payee_Tax_Location_MappingObjectTypeFormat {}
  implicit lazy val Generated2_Pay_Group_Pay_Run_Group_SelectionObjectTypeFormat: scalaxb.XMLFormat[generated2.Pay_Group_Pay_Run_Group_SelectionObjectType] = new DefaultGenerated2_Pay_Group_Pay_Run_Group_SelectionObjectTypeFormat {}
  implicit lazy val Generated2_Email_ReferenceObjectTypeFormat: scalaxb.XMLFormat[generated2.Email_ReferenceObjectType] = new DefaultGenerated2_Email_ReferenceObjectTypeFormat {}
  implicit lazy val Generated2_Payslip_Printing_OptionObjectTypeFormat: scalaxb.XMLFormat[generated2.Payslip_Printing_OptionObjectType] = new DefaultGenerated2_Payslip_Printing_OptionObjectTypeFormat {}
  implicit lazy val Generated2_Payroll_Event_CategoryObjectTypeFormat: scalaxb.XMLFormat[generated2.Payroll_Event_CategoryObjectType] = new DefaultGenerated2_Payroll_Event_CategoryObjectTypeFormat {}
  implicit lazy val Generated2_Phone_ReferenceObjectTypeFormat: scalaxb.XMLFormat[generated2.Phone_ReferenceObjectType] = new DefaultGenerated2_Phone_ReferenceObjectTypeFormat {}
  implicit lazy val Generated2_Web_Address_ReferenceObjectTypeFormat: scalaxb.XMLFormat[generated2.Web_Address_ReferenceObjectType] = new DefaultGenerated2_Web_Address_ReferenceObjectTypeFormat {}
  implicit lazy val Generated2_Instant_Messenger_ReferenceObjectTypeFormat: scalaxb.XMLFormat[generated2.Instant_Messenger_ReferenceObjectType] = new DefaultGenerated2_Instant_Messenger_ReferenceObjectTypeFormat {}
  implicit lazy val Generated2_Validation_FaultTypeFormat: scalaxb.XMLFormat[generated2.Validation_FaultType] = new DefaultGenerated2_Validation_FaultTypeFormat {}
  implicit lazy val Generated2_Processing_FaultTypeFormat: scalaxb.XMLFormat[generated2.Processing_FaultType] = new DefaultGenerated2_Processing_FaultTypeFormat {}
  implicit lazy val Generated2_Validation_ErrorTypeFormat: scalaxb.XMLFormat[generated2.Validation_ErrorType] = new DefaultGenerated2_Validation_ErrorTypeFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("Get_Payroll_Reporting_Codes_for_Workers_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Reporting_Codes_for_Workers_ResponseType](elem)))
      case (Some("Import_Maintain_Payroll_Reporting_Codes_for_Worker_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestType](elem)))
      case (Some("Put_Payroll_Payee_Tax_Location_Mapping_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_Tax_Location_Mapping_RequestType](elem)))
      case (Some("Get_Payroll_Payee_Tax_Location_Mappings_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_Tax_Location_Mappings_RequestType](elem)))
      case (Some("Get_Run_Pay_Calculation_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Run_Pay_Calculation_RequestType](elem)))
      case (Some("Get_EFW2_Year_End_Employer_Filing_Data_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_EFW2_Year_End_Employer_Filing_Data_RequestType](elem)))
      case (Some("Get_Payroll_Pre-Printed_Payslips_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Preu45Printed_Payslips_RequestType](elem)))
      case (Some("Get_EFW2_Year_End_Worker_Filing_Data_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_EFW2_Year_End_Worker_Filing_Data_RequestType](elem)))
      case (Some("Put_Run_Pay_Calculation_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Run_Pay_Calculation_RequestType](elem)))
      case (Some("Put_Payroll_Tax_Mapping_on_Location_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Tax_Mapping_on_Location_RequestType](elem)))
      case (Some("Get_Payroll_Tax_Mappings_on_Location_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Tax_Mappings_on_Location_RequestType](elem)))
      case (Some("Get_Withholding_Order_Local_Minimum_Wage_Rate_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestType](elem)))
      case (Some("Put_Withholding_Order_Local_Minimum_Wage_Rate_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestType](elem)))
      case (Some("Get_Periodic_Company_CAN_Tax_Remittance_Data_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestType](elem)))
      case (Some("Get_Tax_Document_Deliveries_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Tax_Document_Deliveries_ResponseType](elem)))
      case (Some("Put_Tax_Document_Delivery_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Tax_Document_Delivery_ResponseType](elem)))
      case (Some("Workday_Common_Header"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Workday_Common_HeaderType](elem)))
      case (Some("Import_Payroll_Input_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Import_Payroll_Input_RequestType](elem)))
      case (Some("Put_Tax_Levy_Deduction_Restriction_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Tax_Levy_Deduction_Restriction_RequestType](elem)))
      case (Some("Get_Tax_Levy_Deduction_Restrictions_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Tax_Levy_Deduction_Restrictions_RequestType](elem)))
      case (Some("Put_W-2_W-2C_Printing_Election_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Wu452_Wu452C_Printing_Election_RequestType](elem)))
      case (Some("Get_W-2_W-2C_Printing_Election_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Wu452_Wu452C_Printing_Election_RequestType](elem)))
      case (Some("Get_Single_Legal_Entities_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Single_Legal_Entities_RequestType](elem)))
      case (Some("Put_Single_Legal_Entity_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Single_Legal_Entity_RequestType](elem)))
      case (Some("Put_Paycheck_Delivery__Public__Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Paycheck_Delivery__Public__RequestType](elem)))
      case (Some("Get_Paycheck_Deliveries_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Paycheck_Deliveries_RequestType](elem)))
      case (Some("Put_Payroll_Deduction_Recipient_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Deduction_Recipient_RequestType](elem)))
      case (Some("Get_Payroll_Deduction_Recipients_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Deduction_Recipients_RequestType](elem)))
      case (Some("Get_Payroll_Payee_FUTAs_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_FUTAs_RequestType](elem)))
      case (Some("Put_Payroll_Payee_FUTA_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_FUTA_RequestType](elem)))
      case (Some("Put_Payroll_ROE_Prior_Period_History_Results_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_ROE_Prior_Period_History_Results_RequestType](elem)))
      case (Some("Put_Successor_Employer_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Successor_Employer_RequestType](elem)))
      case (Some("Get_Successor_Employers_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Successor_Employers_RequestType](elem)))
      case (Some("Get_Monthly_Worker_Tax_Filing_Data_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Monthly_Worker_Tax_Filing_Data_RequestType](elem)))
      case (Some("Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType](elem)))
      case (Some("Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType](elem)))
      case (Some("Put_Payroll_USA_State_and_Local_Tax_Election_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_USA_State_and_Local_Tax_Election_ResponseType](elem)))
      case (Some("Get_Payroll_USA_State_and_Local_Tax_Elections_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseType](elem)))
      case (Some("Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseType](elem)))
      case (Some("Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseType](elem)))
      case (Some("Get_Worker_Costing_Allocations_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Worker_Costing_Allocations_ResponseType](elem)))
      case (Some("Put_Payroll_Limit_Override_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Limit_Override_ResponseType](elem)))
      case (Some("Get_Payroll_Limit_Overrides_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Limit_Overrides_ResponseType](elem)))
      case (Some("Get_Multiple_Worksite_Report_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Multiple_Worksite_Report_ResponseType](elem)))
      case (Some("Change_No_Retro_Processing_Prior_To_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Change_No_Retro_Processing_Prior_To_ResponseType](elem)))
      case (Some("Put_Payroll_Involuntary_Withholding_Order_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Involuntary_Withholding_Order_ResponseType](elem)))
      case (Some("Get_Payroll_Involuntary_Withholding_Orders_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Involuntary_Withholding_Orders_ResponseType](elem)))
      case (Some("Get_Worker_Tax_Treaties_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Worker_Tax_Treaties_ResponseType](elem)))
      case (Some("Put_Worker_Tax_Treaty_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Worker_Tax_Treaty_ResponseType](elem)))
      case (Some("Put_Payroll_Federal_W-4_Tax_Election_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Federal_Wu454_Tax_Election_ResponseType](elem)))
      case (Some("Get_Payroll_Federal_W-4_Tax_Elections_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Federal_Wu454_Tax_Elections_ResponseType](elem)))
      case (Some("Put_Canadian_Record_of_Employment_Data_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Canadian_Record_of_Employment_Data_ResponseType](elem)))
      case (Some("Get_ROE_History_Data_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_ROE_History_Data_ResponseType](elem)))
      case (Some("Put_ROE_History_Data_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_ROE_History_Data_ResponseType](elem)))
      case (Some("Get_Canadian_Record_of_Employment_Data_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Canadian_Record_of_Employment_Data_ResponseType](elem)))
      case (Some("Put_Payroll_Payee_T1_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_T1_ResponseType](elem)))
      case (Some("Get_Payroll_Payee_TD1s_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_TD1s_ResponseType](elem)))
      case (Some("Get_Company_Payment_Dates_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Company_Payment_Dates_ResponseType](elem)))
      case (Some("Get_Payroll_Off-cycle_Payments_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Offu45cycle_Payments_ResponseType](elem)))
      case (Some("Get_Payroll_Payee_FICAs_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_FICAs_ResponseType](elem)))
      case (Some("Put_Payroll_Payee_PT1_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_PT1_ResponseType](elem)))
      case (Some("Get_Payroll_Payee_PT1s_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_PT1s_ResponseType](elem)))
      case (Some("Get_Periodic_Company_Tax_Filing_Data_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Periodic_Company_Tax_Filing_Data_ResponseType](elem)))
      case (Some("Get_Periodic_Worker_Tax_Filing_Data_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Periodic_Worker_Tax_Filing_Data_ResponseType](elem)))
      case (Some("Get_Quarterly_Worker_Tax_Data_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Quarterly_Worker_Tax_Data_ResponseType](elem)))
      case (Some("Put_Payroll_Payee_FICA_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_FICA_RequestType](elem)))
      case (Some("Get_Payroll_Payslips_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payslips_ResponseType](elem)))
      case (Some("Assign_Costing_Allocation_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Assign_Costing_Allocation_ResponseType](elem)))
      case (Some("Get_Submit_Payroll_Inputs_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Submit_Payroll_Inputs_ResponseType](elem)))
      case (Some("Put_Period_Schedule_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Period_Schedule_ResponseType](elem)))
      case (Some("Get_Period_Schedules_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Period_Schedules_ResponseType](elem)))
      case (Some("Get_Payroll_History_Payments_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_History_Payments_ResponseType](elem)))
      case (Some("Submit_Payroll_Input_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Submit_Payroll_Input_ResponseType](elem)))
      case (Some("Put_Payroll_History_Payment_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_History_Payment_ResponseType](elem)))
      case (Some("Put_Payroll_Off-cycle_Payment_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Offu45cycle_Payment_ResponseType](elem)))
      case (Some("Get_Payroll_Balances_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Balances_ResponseType](elem)))
      case (Some("Get_Payroll_Results_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Results_ResponseType](elem)))
      case (Some("Processing_Fault"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Processing_FaultType](elem)))
      case (Some("Validation_Fault"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Validation_FaultType](elem)))
      case (Some("Get_Payroll_Results_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Results_RequestType](elem)))
      case (Some("Get_Payroll_Balances_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Balances_RequestType](elem)))
      case (Some("Put_Payroll_Off-cycle_Payment_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Offu45cycle_Payment_RequestType](elem)))
      case (Some("Put_Payroll_History_Payment_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_History_Payment_RequestType](elem)))
      case (Some("Submit_Payroll_Input_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Submit_Payroll_Input_RequestType](elem)))
      case (Some("Get_Payroll_History_Payments_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_History_Payments_RequestType](elem)))
      case (Some("Get_Period_Schedules_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Period_Schedules_RequestType](elem)))
      case (Some("Put_Period_Schedule_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Period_Schedule_RequestType](elem)))
      case (Some("Get_Submit_Payroll_Inputs_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Submit_Payroll_Inputs_RequestType](elem)))
      case (Some("Assign_Costing_Allocation_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Assign_Costing_Allocation_RequestType](elem)))
      case (Some("Get_Payroll_Payslips_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payslips_RequestType](elem)))
      case (Some("Get_Quarterly_Worker_Tax_Data_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Quarterly_Worker_Tax_Data_RequestType](elem)))
      case (Some("Put_Payroll_Payee_FICA_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_FICA_ResponseType](elem)))
      case (Some("Get_Periodic_Worker_Tax_Filing_Data_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Periodic_Worker_Tax_Filing_Data_RequestType](elem)))
      case (Some("Get_Periodic_Company_Tax_Filing_Data_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Periodic_Company_Tax_Filing_Data_RequestType](elem)))
      case (Some("Get_Payroll_Payee_PT1s_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_PT1s_RequestType](elem)))
      case (Some("Put_Payroll_Payee_PT1_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_PT1_RequestType](elem)))
      case (Some("Get_Payroll_Payee_FICAs_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_FICAs_RequestType](elem)))
      case (Some("Get_Payroll_Off-cycle_Payments_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Offu45cycle_Payments_RequestType](elem)))
      case (Some("Get_Company_Payment_Dates_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Company_Payment_Dates_RequestType](elem)))
      case (Some("Get_Payroll_Payee_TD1s_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_TD1s_RequestType](elem)))
      case (Some("Put_Payroll_Payee_TD1_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_TD1_RequestType](elem)))
      case (Some("Get_Canadian_Record_of_Employment_Data_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Canadian_Record_of_Employment_Data_RequestType](elem)))
      case (Some("Put_ROE_History_Data_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_ROE_History_Data_RequestType](elem)))
      case (Some("Get_ROE_History_Data_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_ROE_History_Data_RequestType](elem)))
      case (Some("Put_Canadian_Record_of_Employment_Data_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Canadian_Record_of_Employment_Data_RequestType](elem)))
      case (Some("Get_Payroll_Federal_W-4_Tax_Elections_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Federal_Wu454_Tax_Elections_RequestType](elem)))
      case (Some("Put_Payroll_Federal_W-4_Tax_Election_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Federal_Wu454_Tax_Election_RequestType](elem)))
      case (Some("Put_Payroll_Worker_Tax_Treaty_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Worker_Tax_Treaty_RequestType](elem)))
      case (Some("Get_Payroll_Worker_Tax_Treaties_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Worker_Tax_Treaties_RequestType](elem)))
      case (Some("Get_Payroll_Involuntary_Withholding_Orders_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Involuntary_Withholding_Orders_RequestType](elem)))
      case (Some("Put_Payroll_Involuntary_Withholding_Order_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Involuntary_Withholding_Order_RequestType](elem)))
      case (Some("Change_No_Retro_Processing_Prior_To_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Change_No_Retro_Processing_Prior_To_RequestType](elem)))
      case (Some("Get_Multiple_Worksite_Report_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Multiple_Worksite_Report_RequestType](elem)))
      case (Some("Get_Payroll_Limit_Overrides_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Limit_Overrides_RequestType](elem)))
      case (Some("Put_Payroll_Limit_Override_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Limit_Override_RequestType](elem)))
      case (Some("Get_Worker_Costing_Allocations_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Worker_Costing_Allocations_RequestType](elem)))
      case (Some("Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestType](elem)))
      case (Some("Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestType](elem)))
      case (Some("Get_Payroll_USA_State_and_Local_Tax_Elections_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_RequestType](elem)))
      case (Some("Put_Payroll_USA_State_and_Local_Tax_Election_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_USA_State_and_Local_Tax_Election_RequestType](elem)))
      case (Some("Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType](elem)))
      case (Some("Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType](elem)))
      case (Some("Put_Import_Process_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Import_Process_ResponseType](elem)))
      case (Some("Get_Monthly_Worker_Tax_Filing_Data_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Monthly_Worker_Tax_Filing_Data_ResponseType](elem)))
      case (Some("Get_Successor_Employers_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Successor_Employers_ResponseType](elem)))
      case (Some("Put_Successor_Employer_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Successor_Employer_ResponseType](elem)))
      case (Some("Put_Payroll_ROE_Prior_Period_History_Results_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_ROE_Prior_Period_History_Results_ResponseType](elem)))
      case (Some("Put_Payroll_Payee_FUTA_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_FUTA_ResponseType](elem)))
      case (Some("Get_Payroll_Payee_FUTAs_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_FUTAs_ResponseType](elem)))
      case (Some("Get_Payroll_Deduction_Recipients_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Deduction_Recipients_ResponseType](elem)))
      case (Some("Put_Payroll_Deduction_Recipient_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Deduction_Recipient_ResponseType](elem)))
      case (Some("Get_Paycheck_Deliveries_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Paycheck_Deliveries_ResponseType](elem)))
      case (Some("Put_Paycheck_Delivery__Public__Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Paycheck_Delivery__Public__ResponseType](elem)))
      case (Some("Put_Single_Legal_Entity_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Single_Legal_Entity_ResponseType](elem)))
      case (Some("Get_Single_Legal_Entities_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Single_Legal_Entities_ResponseType](elem)))
      case (Some("Get_W-2_W-2C_Printing_Election_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Wu452_Wu452C_Printing_Election_ResponseType](elem)))
      case (Some("Put_W-2_W-2C_Printing_Election_for_Worker_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseType](elem)))
      case (Some("Get_Tax_Levy_Deduction_Restrictions_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Tax_Levy_Deduction_Restrictions_ResponseType](elem)))
      case (Some("Put_Tax_Levy_Deduction_Restriction_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Tax_Levy_Deduction_Restriction_ResponseType](elem)))
      case (Some("Import_Payroll_Off-cycle_Payment_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Import_Payroll_Offu45cycle_Payment_RequestType](elem)))
      case (Some("Put_Tax_Document_Delivery_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Tax_Document_Delivery_RequestType](elem)))
      case (Some("Get_Tax_Document_Deliveries_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Tax_Document_Deliveries_RequestType](elem)))
      case (Some("Import_ROE_Prior_Period_History_Results_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Import_ROE_Prior_Period_History_Results_RequestType](elem)))
      case (Some("Get_Periodic_Company_CAN_Tax_Remittance_Data_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseType](elem)))
      case (Some("Put_Withholding_Order_Local_Minimum_Wage_Rate_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType](elem)))
      case (Some("Get_Withholding_Order_Local_Minimum_Wage_Rate_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType](elem)))
      case (Some("Get_Payroll_Tax_Mappings_on_Location_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Tax_Mappings_on_Location_ResponseType](elem)))
      case (Some("Put_Payroll_Tax_Mapping_on_Location_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Tax_Mapping_on_Location_ResponseType](elem)))
      case (Some("Put_Run_Pay_Calculation_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Run_Pay_Calculation_ResponseType](elem)))
      case (Some("Get_EFW2_Year_End_Worker_Filing_Data_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_EFW2_Year_End_Worker_Filing_Data_ResponseType](elem)))
      case (Some("Get_Payroll_Pre-Printed_Payslips_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Preu45Printed_Payslips_ResponseType](elem)))
      case (Some("Get_EFW2_Year_End_Employer_Filing_Data_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_EFW2_Year_End_Employer_Filing_Data_ResponseType](elem)))
      case (Some("Get_Run_Pay_Calculation_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Run_Pay_Calculation_ResponseType](elem)))
      case (Some("Get_Payroll_Payee_Tax_Location_Mappings_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Payee_Tax_Location_Mappings_ResponseType](elem)))
      case (Some("Put_Payroll_Payee_Tax_Location_Mapping_Response"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Put_Payroll_Payee_Tax_Location_Mapping_ResponseType](elem)))
      case (Some("Get_Payroll_Reporting_Codes_for_Workers_Request"), Some("urn:com.workday/bsvc") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[generated2.Get_Payroll_Reporting_Codes_for_Workers_RequestType](elem)))

      case _ => None
    }


  }

  trait DefaultGenerated2_Instance_IDTypeFormat extends scalaxb.XMLFormat[generated2.Instance_IDType] with scalaxb.CanWriteChildNodes[generated2.Instance_IDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Instance_IDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Instance_IDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}parent_id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_id" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_type" -> _ },
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Instance_IDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@parent_id", _) => __obj.parent_id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_id", x.toString, attr) }
        case ("@parent_type", _) => __obj.parent_type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_type", x.toString, attr) }
        case ("@type", _) => __obj.typeValue foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Instance_IDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_InstanceObjectTypeFormat extends scalaxb.ElemNameParser[generated2.InstanceObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("InstanceObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.InstanceObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.InstanceObjectType(p1 map { scalaxb.fromXML[generated2.Instance_IDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.InstanceObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.InstanceObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Instance_IDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Workday_Common_HeaderTypeFormat extends scalaxb.ElemNameParser[generated2.Workday_Common_HeaderType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Workday_Common_HeaderType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Workday_Common_HeaderType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference_Descriptors_In_Response")) ^^
      { case p1 =>
      generated2.Workday_Common_HeaderType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Workday_Common_HeaderType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference_Descriptors_In_Response map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference_Descriptors_In_Response"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Country_ReferenceTypeFormat extends scalaxb.ElemNameParser[generated2.Country_ReferenceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Country_ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Country_ReferenceType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_ISO_Code")) ^^
      { case p1 =>
      generated2.Country_ReferenceType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Country_ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.Country_ISO_Code, Some("urn:com.workday/bsvc"), Some("Country_ISO_Code"), __scope, false))

  }

  trait DefaultGenerated2_Employee_ReferenceTypeFormat extends scalaxb.ElemNameParser[generated2.Employee_ReferenceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Employee_ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Employee_ReferenceType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Integration_ID_Reference")) ^^
      { case p1 =>
      generated2.Employee_ReferenceType(scalaxb.fromXML[generated2.External_Integration_ID_Reference_DataType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Employee_ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.External_Integration_ID_Reference_DataType](__obj.Integration_ID_Reference, Some("urn:com.workday/bsvc"), Some("Integration_ID_Reference"), __scope, false))

  }

  trait DefaultGenerated2_Contingent_Worker_Reference_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Contingent_Worker_Reference_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Contingent_Worker_Reference_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Contingent_Worker_Reference_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Integration_ID_Reference")) ^^
      { case p1 =>
      generated2.Contingent_Worker_Reference_DataType(scalaxb.fromXML[generated2.External_Integration_ID_Reference_DataType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Contingent_Worker_Reference_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.External_Integration_ID_Reference_DataType](__obj.Integration_ID_Reference, Some("urn:com.workday/bsvc"), Some("Integration_ID_Reference"), __scope, false))

  }

  trait DefaultGenerated2_External_Integration_ID_Reference_DataTypeFormat extends scalaxb.ElemNameParser[generated2.External_Integration_ID_Reference_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("External_Integration_ID_Reference_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.External_Integration_ID_Reference_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.External_Integration_ID_Reference_DataType(scalaxb.fromXML[generated2.IDType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.External_Integration_ID_Reference_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.External_Integration_ID_Reference_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.IDType](__obj.ID, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false))

  }

  trait DefaultGenerated2_Name_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Name_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Name_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Name_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Name_Type")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Prefix")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "First_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Middle_Name")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Last_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Local_Name_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Suffix")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Name_DataType(scalaxb.fromXML[generated2.Country_ReferenceType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Prefix_Name_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Last_Name_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Local_Name_DataType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[generated2.Suffix_Name_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Is_Legal").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Is_Legal" -> _ },
        (node \ "@{urn:com.workday/bsvc}Is_Preferred").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Is_Preferred" -> _ },
        (node \ "@{urn:com.workday/bsvc}Effective_Date").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@Effective_Date" -> _ },
        (node \ "@{urn:com.workday/bsvc}Last_Modified").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@Last_Modified" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Name_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Is_Legal", _) => __obj.Is_Legal foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Is_Legal", x.toString, attr) }
        case ("@Is_Preferred", _) => __obj.Is_Preferred foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Is_Preferred", x.toString, attr) }
        case ("@Effective_Date", _) => __obj.Effective_Date foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Effective_Date", x.toString, attr) }
        case ("@Last_Modified", _) => __obj.Last_Modified foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Last_Modified", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Name_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Country_ReferenceType](__obj.Country_Reference, Some("urn:com.workday/bsvc"), Some("Country_Reference"), __scope, false),
        __obj.Additional_Name_Type map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Additional_Name_Type"), __scope, false) } getOrElse {Nil},
        __obj.Prefix flatMap { scalaxb.toXML[generated2.Prefix_Name_DataType](_, Some("urn:com.workday/bsvc"), Some("Prefix"), __scope, false) },
        __obj.First_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("First_Name"), __scope, false) } getOrElse {Nil},
        __obj.Middle_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Middle_Name"), __scope, false) } getOrElse {Nil},
        __obj.Last_Name flatMap { scalaxb.toXML[generated2.Last_Name_DataType](_, Some("urn:com.workday/bsvc"), Some("Last_Name"), __scope, false) },
        __obj.Local_Name_Data map { scalaxb.toXML[generated2.Local_Name_DataType](_, Some("urn:com.workday/bsvc"), Some("Local_Name_Data"), __scope, false) } getOrElse {Nil},
        __obj.Suffix flatMap { scalaxb.toXML[generated2.Suffix_Name_DataType](_, Some("urn:com.workday/bsvc"), Some("Suffix"), __scope, false) })

  }

  trait DefaultGenerated2_IDTypeFormat extends scalaxb.XMLFormat[generated2.IDType] with scalaxb.CanWriteChildNodes[generated2.IDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.IDType] = seq match {
      case node: scala.xml.Node => Right(generated2.IDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}System_ID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@System_ID" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.IDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@System_ID", _) => __obj.System_ID foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "System_ID", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.IDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Worker_ReferenceTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_ReferenceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_ReferenceType] =
      phrase((((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Employee_ReferenceType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Contingent_Worker_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Contingent_Worker_Reference_DataType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      generated2.Worker_ReferenceType(p1) })
    
    def writesChildNodes(__obj: generated2.Worker_ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.worker_referencetypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[generated2.Worker_ReferenceTypeOption]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultGenerated2_Currency_Reference_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Currency_Reference_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Currency_Reference_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Currency_Reference_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Code")) ^^
      { case p1 =>
      generated2.Currency_Reference_DataType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Currency_Reference_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.Currency_Code, Some("urn:com.workday/bsvc"), Some("Currency_Code"), __scope, false))

  }

  trait DefaultGenerated2_Receiving_Party_Bank_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Receiving_Party_Bank_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Receiving_Party_Bank_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Receiving_Party_Bank_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Nickname")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Account_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Masked_Account_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Account_Type")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "IBAN")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_ID_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "BIC")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Branch_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Branch_ID_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Check_Digit")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Roll_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Instructions")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Intermediary_Bank_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      generated2.Receiving_Party_Bank_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[generated2.CountryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[generated2.InstanceObjectType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[generated2.Intermediary_Bank_Account_WWS_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Receiving_Party_Bank_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Bank_Account_Nickname map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Nickname"), __scope, false) } getOrElse {Nil},
        __obj.Account_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Account_Number"), __scope, false) } getOrElse {Nil},
        __obj.Masked_Account_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Masked_Account_Number"), __scope, false) } getOrElse {Nil},
        __obj.Account_Type map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Account_Type"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Name"), __scope, false) } getOrElse {Nil},
        __obj.IBAN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("IBAN"), __scope, false) } getOrElse {Nil},
        __obj.Bank_ID_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_ID_Number"), __scope, false) } getOrElse {Nil},
        __obj.BIC map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("BIC"), __scope, false) } getOrElse {Nil},
        __obj.Branch_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Branch_Name"), __scope, false) } getOrElse {Nil},
        __obj.Branch_ID_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Branch_ID_Number"), __scope, false) } getOrElse {Nil},
        __obj.Country_Reference map { scalaxb.toXML[generated2.CountryObjectType](_, Some("urn:com.workday/bsvc"), Some("Country_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.InstanceObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Name"), __scope, false) } getOrElse {Nil},
        __obj.Check_Digit map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Check_Digit"), __scope, false) } getOrElse {Nil},
        __obj.Roll_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Roll_Number"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Instructions map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Instructions"), __scope, false) } getOrElse {Nil},
        __obj.Intermediary_Bank_Data flatMap { scalaxb.toXML[generated2.Intermediary_Bank_Account_WWS_DataType](_, Some("urn:com.workday/bsvc"), Some("Intermediary_Bank_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Communication_Method_Usage_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Communication_Method_Usage_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Communication_Method_Usage_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Communication_Method_Usage_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Type_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Use_For_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Comments")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Communication_Method_Usage_DataType(p1 map { scalaxb.fromXML[generated2.Communication_Usage_Type_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Public").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Public" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Communication_Method_Usage_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Public", _) => __obj.Public foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Public", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Communication_Method_Usage_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type_Reference flatMap { scalaxb.toXML[generated2.Communication_Usage_Type_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Type_Reference"), __scope, false) },
        __obj.Use_For_Reference flatMap { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Use_For_Reference"), __scope, false) },
        __obj.Comments map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Comments"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Communication_Usage_Type_ReferenceTypeFormat extends scalaxb.XMLFormat[generated2.Communication_Usage_Type_ReferenceType] with scalaxb.CanWriteChildNodes[generated2.Communication_Usage_Type_ReferenceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Communication_Usage_Type_ReferenceType] = seq match {
      case node: scala.xml.Node => Right(generated2.Communication_Usage_Type_ReferenceType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Primary").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Primary" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Communication_Usage_Type_ReferenceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Primary", _) => __obj.Primary foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Primary", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Communication_Usage_Type_ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Last_Name_DataTypeFormat extends scalaxb.XMLFormat[generated2.Last_Name_DataType] with scalaxb.CanWriteChildNodes[generated2.Last_Name_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Last_Name_DataType] = seq match {
      case node: scala.xml.Node => Right(generated2.Last_Name_DataType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Last_Name_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Type", _) => __obj.Type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Last_Name_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Prefix_Name_DataTypeFormat extends scalaxb.XMLFormat[generated2.Prefix_Name_DataType] with scalaxb.CanWriteChildNodes[generated2.Prefix_Name_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Prefix_Name_DataType] = seq match {
      case node: scala.xml.Node => Right(generated2.Prefix_Name_DataType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Prefix_Name_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Type", _) => __obj.Type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Prefix_Name_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Suffix_Name_DataTypeFormat extends scalaxb.XMLFormat[generated2.Suffix_Name_DataType] with scalaxb.CanWriteChildNodes[generated2.Suffix_Name_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Suffix_Name_DataType] = seq match {
      case node: scala.xml.Node => Right(generated2.Suffix_Name_DataType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Suffix_Name_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Type", _) => __obj.Type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Suffix_Name_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Marital_Status_ReferenceTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Marital_Status_ReferenceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Marital_Status_ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Marital_Status_ReferenceType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Marital_Status_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Marital_Status_ReferenceType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Marital_Status_ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Marital_Status_Reference map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Marital_Status_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_FUTA_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_FUTA_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_FUTA_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_FUTA_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_As_Of")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_Indicator")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Payroll_Payee_FUTA_DataType(scalaxb.fromXML[generated2.WorkerObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.CompanyObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_FUTA_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_As_Of, Some("urn:com.workday/bsvc"), Some("Effective_As_Of"), __scope, false),
        __obj.Exempt_Indicator map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt_Indicator"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Earning_ReferenceTypeFormat extends scalaxb.ElemNameParser[generated2.Earning_ReferenceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Earning_ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Earning_ReferenceType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ^^
      { case p1 =>
      generated2.Earning_ReferenceType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Earning_ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.Code, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false))

  }

  trait DefaultGenerated2_Deduction_ReferenceTypeFormat extends scalaxb.ElemNameParser[generated2.Deduction_ReferenceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Deduction_ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Deduction_ReferenceType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ^^
      { case p1 =>
      generated2.Deduction_ReferenceType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Deduction_ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.Code, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false))

  }

  trait DefaultGenerated2_Pay_Component_ReferenceTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Component_ReferenceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Component_ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Component_ReferenceType] =
      phrase((((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earning")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Earning_ReferenceType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Deduction_ReferenceType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      generated2.Pay_Component_ReferenceType(p1) })
    
    def writesChildNodes(__obj: generated2.Pay_Component_ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.pay_component_referencetypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[generated2.Pay_Component_ReferenceTypeOption]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultGenerated2_Support_Order_Dependent_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Support_Order_Dependent_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Support_Order_Dependent_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Support_Order_Dependent_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Child_s_Name__Last__First__MI_")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Child_s_Birth_Date")) ^^
      { case p1 ~ p2 =>
      generated2.Support_Order_Dependent_DataType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Support_Order_Dependent_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Child_s_Name__Last__First__MIu93, Some("urn:com.workday/bsvc"), Some("Child_s_Name__Last__First__MI_"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Child_s_Birth_Date, Some("urn:com.workday/bsvc"), Some("Child_s_Birth_Date"), __scope, false))

  }

  trait DefaultGenerated2_Withholding_Order_Fee_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Withholding_Order_Fee_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Withholding_Order_Fee_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Withholding_Order_Fee_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Fee_Amount")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Fee_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Recipient_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Override_Fee_Schedule")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Begin_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Withholding_Order_Fee_DataType(scalaxb.fromXML[BigDecimal](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Withholding_Order_Fee_TypeObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[generated2.Deduction_RecipientObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Withholding_Order_Fee_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigDecimal](__obj.Fee_Amount, Some("urn:com.workday/bsvc"), Some("Fee_Amount"), __scope, false),
        scalaxb.toXML[generated2.Withholding_Order_Fee_TypeObjectType](__obj.Fee_Type_Reference, Some("urn:com.workday/bsvc"), Some("Fee_Type_Reference"), __scope, false),
        __obj.Deduction_Recipient_Reference map { scalaxb.toXML[generated2.Deduction_RecipientObjectType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Recipient_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Override_Fee_Schedule map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Override_Fee_Schedule"), __scope, false) } getOrElse {Nil},
        __obj.Begin_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Begin_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Response_FilterTypeFormat extends scalaxb.ElemNameParser[generated2.Response_FilterType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Response_FilterType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Response_FilterType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "As_Of_Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "As_Of_Entry_DateTime")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Page")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Count")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Response_FilterType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Response_FilterType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.As_Of_Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("As_Of_Effective_Date"), __scope, false) } getOrElse {Nil},
        __obj.As_Of_Entry_DateTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("As_Of_Entry_DateTime"), __scope, false) } getOrElse {Nil},
        __obj.Page map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Page"), __scope, false) } getOrElse {Nil},
        __obj.Count map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Count"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Response_ResultsTypeFormat extends scalaxb.ElemNameParser[generated2.Response_ResultsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Response_ResultsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Response_ResultsType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Pages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Page_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Page")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Response_ResultsType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Response_ResultsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Total_Results map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Total_Results"), __scope, false) } getOrElse {Nil},
        __obj.Total_Pages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Total_Pages"), __scope, false) } getOrElse {Nil},
        __obj.Page_Results map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Page_Results"), __scope, false) } getOrElse {Nil},
        __obj.Page map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Page"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Federal_Tax_Levy_Dependent_ReferenceTypeFormat extends scalaxb.ElemNameParser[generated2.Federal_Tax_Levy_Dependent_ReferenceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Federal_Tax_Levy_Dependent_ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Federal_Tax_Levy_Dependent_ReferenceType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Dependent_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Dependent_Identification_Number")) ^^
      { case p1 ~ p2 =>
      generated2.Federal_Tax_Levy_Dependent_ReferenceType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Federal_Tax_Levy_Dependent_ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Dependent_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Dependent_Name"), __scope, false) } getOrElse {Nil},
        __obj.Dependent_Identification_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Dependent_Identification_Number"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Tax_ElectionsTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Tax_ElectionsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Tax_ElectionsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Tax_ElectionsType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Number_of_Allowances")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Marital_Status")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempted")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Worker_Tax_ElectionsType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Tax_ElectionsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Number_of_Allowances map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Number_of_Allowances"), __scope, false) } getOrElse {Nil},
        __obj.Marital_Status map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Marital_Status"), __scope, false) } getOrElse {Nil},
        __obj.Exempted map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempted"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Business_Process_Comment_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Business_Process_Comment_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Business_Process_Comment_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Business_Process_Comment_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Comment")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ^^
      { case p1 ~ p2 =>
      generated2.Business_Process_Comment_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Business_Process_Comment_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Comment map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Comment"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Business_Process_ParametersTypeFormat extends scalaxb.ElemNameParser[generated2.Business_Process_ParametersType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Business_Process_ParametersType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Business_Process_ParametersType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Auto_Complete")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Now")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Comment_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Business_Process_Attachment_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Business_Process_ParametersType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Business_Process_Comment_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Business_Process_Attachment_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Business_Process_ParametersType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Auto_Complete map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Auto_Complete"), __scope, false) } getOrElse {Nil},
        __obj.Run_Now map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Run_Now"), __scope, false) } getOrElse {Nil},
        __obj.Comment_Data map { scalaxb.toXML[generated2.Business_Process_Comment_DataType](_, Some("urn:com.workday/bsvc"), Some("Comment_Data"), __scope, false) } getOrElse {Nil},
        __obj.Business_Process_Attachment_Data flatMap { scalaxb.toXML[generated2.Business_Process_Attachment_DataType](_, Some("urn:com.workday/bsvc"), Some("Business_Process_Attachment_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Contact_Information_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Contact_Information_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Contact_Information_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Contact_Information_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Address_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Phone_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Email_Address_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Instant_Messenger_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Web_Address_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Contact_Information_DataType(p1 map { scalaxb.fromXML[generated2.Address_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Phone_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Email_Address_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Instant_Messenger_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Web_Address_Information_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Contact_Information_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Address_Data flatMap { scalaxb.toXML[generated2.Address_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Address_Data"), __scope, false) },
        __obj.Phone_Data flatMap { scalaxb.toXML[generated2.Phone_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Phone_Data"), __scope, false) },
        __obj.Email_Address_Data flatMap { scalaxb.toXML[generated2.Email_Address_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Email_Address_Data"), __scope, false) },
        __obj.Instant_Messenger_Data flatMap { scalaxb.toXML[generated2.Instant_Messenger_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Instant_Messenger_Data"), __scope, false) },
        __obj.Web_Address_Data flatMap { scalaxb.toXML[generated2.Web_Address_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Web_Address_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Address_Information_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Address_Information_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Address_Information_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Address_Information_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Last_Modified")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Address_Line_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Municipality")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_City_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Submunicipality_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Region_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Region_Descriptor")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subregion_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Postal_Code")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Usage_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Number_of_Days")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Municipality_Local")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Address_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Address_ID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      generated2.Address_Information_DataType(p1.headOption map { scalaxb.fromXML[generated2.CountryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Address_Line_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Country_CityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Submunicipality_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Country_RegionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[generated2.Subregion_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[generated2.Communication_Method_Usage_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[generated2.Address_ReferenceObjectType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Formatted_Address").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Formatted_Address" -> _ },
        (node \ "@{urn:com.workday/bsvc}Address_Format_Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Address_Format_Type" -> _ },
        (node \ "@{urn:com.workday/bsvc}Defaulted_Business_Site_Address").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Defaulted_Business_Site_Address" -> _ },
        (node \ "@{urn:com.workday/bsvc}Delete").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Delete" -> _ },
        (node \ "@{urn:com.workday/bsvc}Do_Not_Replace_All").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Do_Not_Replace_All" -> _ },
        (node \ "@{urn:com.workday/bsvc}Effective_Date").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@Effective_Date" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Address_Information_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Formatted_Address", _) => __obj.Formatted_Address foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Formatted_Address", x.toString, attr) }
        case ("@Address_Format_Type", _) => __obj.Address_Format_Type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Address_Format_Type", x.toString, attr) }
        case ("@Defaulted_Business_Site_Address", _) => __obj.Defaulted_Business_Site_Address foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Defaulted_Business_Site_Address", x.toString, attr) }
        case ("@Delete", _) => __obj.Delete foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Delete", x.toString, attr) }
        case ("@Do_Not_Replace_All", _) => __obj.Do_Not_Replace_All foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Do_Not_Replace_All", x.toString, attr) }
        case ("@Effective_Date", _) => __obj.Effective_Date foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Effective_Date", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Address_Information_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Country_Reference map { scalaxb.toXML[generated2.CountryObjectType](_, Some("urn:com.workday/bsvc"), Some("Country_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Last_Modified map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Last_Modified"), __scope, false) } getOrElse {Nil},
        __obj.Address_Line_Data flatMap { scalaxb.toXML[generated2.Address_Line_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Address_Line_Data"), __scope, false) },
        __obj.Municipality map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Municipality"), __scope, false) } getOrElse {Nil},
        __obj.Country_City_Reference map { scalaxb.toXML[generated2.Country_CityObjectType](_, Some("urn:com.workday/bsvc"), Some("Country_City_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Submunicipality_Data flatMap { scalaxb.toXML[generated2.Submunicipality_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Submunicipality_Data"), __scope, false) },
        __obj.Country_Region_Reference map { scalaxb.toXML[generated2.Country_RegionObjectType](_, Some("urn:com.workday/bsvc"), Some("Country_Region_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Country_Region_Descriptor map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Country_Region_Descriptor"), __scope, false) } getOrElse {Nil},
        __obj.Subregion_Data flatMap { scalaxb.toXML[generated2.Subregion_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Subregion_Data"), __scope, false) },
        __obj.Postal_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Postal_Code"), __scope, false) } getOrElse {Nil},
        __obj.Usage_Data flatMap { scalaxb.toXML[generated2.Communication_Method_Usage_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Usage_Data"), __scope, false) },
        __obj.Number_of_Days map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Number_of_Days"), __scope, false) } getOrElse {Nil},
        __obj.Municipality_Local map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Municipality_Local"), __scope, false) } getOrElse {Nil},
        __obj.Address_Reference map { scalaxb.toXML[generated2.Address_ReferenceObjectType](_, Some("urn:com.workday/bsvc"), Some("Address_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Address_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Address_ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Phone_Information_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Phone_Information_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Phone_Information_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Phone_Information_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_ISO_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "International_Phone_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Phone_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Phone_Extension")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Phone_Device_Type_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Usage_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Phone_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Phone_Information_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Phone_Device_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Communication_Method_Usage_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Phone_ReferenceObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Area_Code").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Area_Code" -> _ },
        (node \ "@{urn:com.workday/bsvc}Tenant_Formatted_Phone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Tenant_Formatted_Phone" -> _ },
        (node \ "@{urn:com.workday/bsvc}International_Formatted_Phone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@International_Formatted_Phone" -> _ },
        (node \ "@{urn:com.workday/bsvc}Delete").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Delete" -> _ },
        (node \ "@{urn:com.workday/bsvc}Do_Not_Replace_All").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Do_Not_Replace_All" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Phone_Information_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Area_Code", _) => __obj.Area_Code foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Area_Code", x.toString, attr) }
        case ("@Tenant_Formatted_Phone", _) => __obj.Tenant_Formatted_Phone foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Tenant_Formatted_Phone", x.toString, attr) }
        case ("@International_Formatted_Phone", _) => __obj.International_Formatted_Phone foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "International_Formatted_Phone", x.toString, attr) }
        case ("@Delete", _) => __obj.Delete foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Delete", x.toString, attr) }
        case ("@Do_Not_Replace_All", _) => __obj.Do_Not_Replace_All foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Do_Not_Replace_All", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Phone_Information_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Country_ISO_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Country_ISO_Code"), __scope, false) } getOrElse {Nil},
        __obj.International_Phone_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("International_Phone_Code"), __scope, false) } getOrElse {Nil},
        __obj.Phone_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Phone_Number"), __scope, false) } getOrElse {Nil},
        __obj.Phone_Extension map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Phone_Extension"), __scope, false) } getOrElse {Nil},
        __obj.Phone_Device_Type_Reference map { scalaxb.toXML[generated2.Phone_Device_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Phone_Device_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Usage_Data flatMap { scalaxb.toXML[generated2.Communication_Method_Usage_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Usage_Data"), __scope, false) },
        __obj.Phone_Reference map { scalaxb.toXML[generated2.Phone_ReferenceObjectType](_, Some("urn:com.workday/bsvc"), Some("Phone_Reference"), __scope, false) } getOrElse {Nil},
        __obj.ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Email_Address_Information_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Email_Address_Information_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Email_Address_Information_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Email_Address_Information_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Email_Address")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Email_Comment")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Usage_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Email_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Email_Address_Information_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Communication_Method_Usage_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Email_ReferenceObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Delete").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Delete" -> _ },
        (node \ "@{urn:com.workday/bsvc}Do_Not_Replace_All").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Do_Not_Replace_All" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Email_Address_Information_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Delete", _) => __obj.Delete foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Delete", x.toString, attr) }
        case ("@Do_Not_Replace_All", _) => __obj.Do_Not_Replace_All foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Do_Not_Replace_All", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Email_Address_Information_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Email_Address map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Email_Address"), __scope, false) } getOrElse {Nil},
        __obj.Email_Comment map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Email_Comment"), __scope, false) } getOrElse {Nil},
        __obj.Usage_Data flatMap { scalaxb.toXML[generated2.Communication_Method_Usage_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Usage_Data"), __scope, false) },
        __obj.Email_Reference map { scalaxb.toXML[generated2.Email_ReferenceObjectType](_, Some("urn:com.workday/bsvc"), Some("Email_Reference"), __scope, false) } getOrElse {Nil},
        __obj.ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Instant_Messenger_Information_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Instant_Messenger_Information_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Instant_Messenger_Information_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Instant_Messenger_Information_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Instant_Messenger_Address")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Instant_Messenger_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Instant_Messenger_Comment")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Usage_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Instant_Messenger_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Instant_Messenger_Information_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Instant_Messenger_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Communication_Method_Usage_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Instant_Messenger_ReferenceObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Delete").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Delete" -> _ },
        (node \ "@{urn:com.workday/bsvc}Do_Not_Replace_All").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Do_Not_Replace_All" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Instant_Messenger_Information_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Delete", _) => __obj.Delete foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Delete", x.toString, attr) }
        case ("@Do_Not_Replace_All", _) => __obj.Do_Not_Replace_All foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Do_Not_Replace_All", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Instant_Messenger_Information_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Instant_Messenger_Address map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Instant_Messenger_Address"), __scope, false) } getOrElse {Nil},
        __obj.Instant_Messenger_Type_Reference map { scalaxb.toXML[generated2.Instant_Messenger_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Instant_Messenger_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Instant_Messenger_Comment map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Instant_Messenger_Comment"), __scope, false) } getOrElse {Nil},
        __obj.Usage_Data flatMap { scalaxb.toXML[generated2.Communication_Method_Usage_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Usage_Data"), __scope, false) },
        __obj.Instant_Messenger_Reference map { scalaxb.toXML[generated2.Instant_Messenger_ReferenceObjectType](_, Some("urn:com.workday/bsvc"), Some("Instant_Messenger_Reference"), __scope, false) } getOrElse {Nil},
        __obj.ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Web_Address_Information_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Web_Address_Information_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Web_Address_Information_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Web_Address_Information_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Web_Address")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Web_Address_Comment")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Usage_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Web_Address_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Web_Address_Information_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Communication_Method_Usage_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Web_Address_ReferenceObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Delete").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Delete" -> _ },
        (node \ "@{urn:com.workday/bsvc}Do_Not_Replace_All").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Do_Not_Replace_All" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Web_Address_Information_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Delete", _) => __obj.Delete foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Delete", x.toString, attr) }
        case ("@Do_Not_Replace_All", _) => __obj.Do_Not_Replace_All foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Do_Not_Replace_All", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Web_Address_Information_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Web_Address map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Web_Address"), __scope, false) } getOrElse {Nil},
        __obj.Web_Address_Comment map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Web_Address_Comment"), __scope, false) } getOrElse {Nil},
        __obj.Usage_Data flatMap { scalaxb.toXML[generated2.Communication_Method_Usage_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Usage_Data"), __scope, false) },
        __obj.Web_Address_Reference map { scalaxb.toXML[generated2.Web_Address_ReferenceObjectType](_, Some("urn:com.workday/bsvc"), Some("Web_Address_Reference"), __scope, false) } getOrElse {Nil},
        __obj.ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Address_Line_Information_DataTypeFormat extends scalaxb.XMLFormat[generated2.Address_Line_Information_DataType] with scalaxb.CanWriteChildNodes[generated2.Address_Line_Information_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Address_Line_Information_DataType] = seq match {
      case node: scala.xml.Node => Right(generated2.Address_Line_Information_DataType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ },
        (node \ "@{urn:com.workday/bsvc}Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Address_Line_Information_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case ("@Type", _) => __obj.Type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Address_Line_Information_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Submunicipality_Information_DataTypeFormat extends scalaxb.XMLFormat[generated2.Submunicipality_Information_DataType] with scalaxb.CanWriteChildNodes[generated2.Submunicipality_Information_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Submunicipality_Information_DataType] = seq match {
      case node: scala.xml.Node => Right(generated2.Submunicipality_Information_DataType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Address_Component_Name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Address_Component_Name" -> _ },
        (node \ "@{urn:com.workday/bsvc}Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Submunicipality_Information_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Address_Component_Name", _) => __obj.Address_Component_Name foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Address_Component_Name", x.toString, attr) }
        case ("@Type", _) => __obj.Type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Submunicipality_Information_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Subregion_Information_DataTypeFormat extends scalaxb.XMLFormat[generated2.Subregion_Information_DataType] with scalaxb.CanWriteChildNodes[generated2.Subregion_Information_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Subregion_Information_DataType] = seq match {
      case node: scala.xml.Node => Right(generated2.Subregion_Information_DataType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ },
        (node \ "@{urn:com.workday/bsvc}Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Subregion_Information_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case ("@Type", _) => __obj.Type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Subregion_Information_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Communication_Method_Usage_Information_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Communication_Method_Usage_Information_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Communication_Method_Usage_Information_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Communication_Method_Usage_Information_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Type_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Use_For_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Use_For_Tenanted_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Comments")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Communication_Method_Usage_Information_DataType(p1 map { scalaxb.fromXML[generated2.Communication_Usage_Type_DataType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Communication_Usage_BehaviorObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Communication_Usage_Behavior_TenantedObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Public").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Public" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Communication_Method_Usage_Information_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Public", _) => __obj.Public foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Public", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Communication_Method_Usage_Information_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type_Data flatMap { scalaxb.toXML[generated2.Communication_Usage_Type_DataType](_, Some("urn:com.workday/bsvc"), Some("Type_Data"), __scope, false) },
        __obj.Use_For_Reference flatMap { scalaxb.toXML[generated2.Communication_Usage_BehaviorObjectType](_, Some("urn:com.workday/bsvc"), Some("Use_For_Reference"), __scope, false) },
        __obj.Use_For_Tenanted_Reference flatMap { scalaxb.toXML[generated2.Communication_Usage_Behavior_TenantedObjectType](_, Some("urn:com.workday/bsvc"), Some("Use_For_Tenanted_Reference"), __scope, false) },
        __obj.Comments map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Comments"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Communication_Usage_Type_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Communication_Usage_Type_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Communication_Usage_Type_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Communication_Usage_Type_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Type_Reference")) ^^
      { case p1 =>
      generated2.Communication_Usage_Type_DataType(scalaxb.fromXML[generated2.Communication_Usage_TypeObjectType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Primary").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Primary" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Communication_Usage_Type_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Primary", _) => __obj.Primary foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Primary", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Communication_Usage_Type_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.Communication_Usage_TypeObjectType](__obj.Type_Reference, Some("urn:com.workday/bsvc"), Some("Type_Reference"), __scope, false))

  }

  trait DefaultGenerated2_National_ID_DataTypeFormat extends scalaxb.ElemNameParser[generated2.National_ID_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("National_ID_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.National_ID_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Issued_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Expiration_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Verification_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Series")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Issuing_Agency")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Verified_By_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      generated2.National_ID_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.National_ID_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.CountryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.National_ID_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) } getOrElse {Nil},
        __obj.ID_Type_Reference map { scalaxb.toXML[generated2.National_ID_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("ID_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Country_Reference map { scalaxb.toXML[generated2.CountryObjectType](_, Some("urn:com.workday/bsvc"), Some("Country_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Issued_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Issued_Date"), __scope, false) } getOrElse {Nil},
        __obj.Expiration_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Expiration_Date"), __scope, false) } getOrElse {Nil},
        __obj.Verification_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Verification_Date"), __scope, false) } getOrElse {Nil},
        __obj.Series map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Series"), __scope, false) } getOrElse {Nil},
        __obj.Issuing_Agency map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Issuing_Agency"), __scope, false) } getOrElse {Nil},
        __obj.Verified_By_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Verified_By_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Paycheck_Delivery_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Paycheck_Delivery_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Paycheck_Delivery_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Paycheck_Delivery_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Paycheck_Delivery_Reference")) ^^
      { case p1 =>
      generated2.Paycheck_Delivery_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Paycheck_DeliveryObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Paycheck_Delivery_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Paycheck_Delivery_Reference flatMap { scalaxb.toXML[generated2.Paycheck_DeliveryObjectType](_, Some("urn:com.workday/bsvc"), Some("Paycheck_Delivery_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Paycheck_Delivery_Request_CriteriaTypeFormat extends scalaxb.XMLFormat[generated2.Paycheck_Delivery_Request_CriteriaType] with scalaxb.CanWriteChildNodes[generated2.Paycheck_Delivery_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Paycheck_Delivery_Request_CriteriaType] = seq match {
      case node: scala.xml.Node => Right(generated2.Paycheck_Delivery_Request_CriteriaType())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: generated2.Paycheck_Delivery_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated2_Paycheck_Delivery_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Paycheck_Delivery_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Paycheck_Delivery_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Paycheck_Delivery_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Paycheck_Delivery_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Paycheck_Delivery_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Paycheck_DeliveryTypeFormat extends scalaxb.ElemNameParser[generated2.Paycheck_DeliveryType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Paycheck_DeliveryType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Paycheck_DeliveryType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Paycheck_Delivery_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Paycheck_Delivery_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Paycheck_DeliveryType(p1.headOption map { scalaxb.fromXML[generated2.Paycheck_DeliveryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Paycheck_Delivery_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Paycheck_DeliveryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Paycheck_Delivery_Reference map { scalaxb.toXML[generated2.Paycheck_DeliveryObjectType](_, Some("urn:com.workday/bsvc"), Some("Paycheck_Delivery_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Paycheck_Delivery_Data flatMap { scalaxb.toXML[generated2.Paycheck_Delivery_DataType](_, Some("urn:com.workday/bsvc"), Some("Paycheck_Delivery_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Paycheck_Delivery_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Paycheck_Delivery_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Paycheck_Delivery_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Paycheck_Delivery_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Paycheck_Delivery")) ^^
      { case p1 =>
      generated2.Paycheck_Delivery_Response_DataType(p1 map { scalaxb.fromXML[generated2.Paycheck_DeliveryType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Paycheck_Delivery_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Paycheck_Delivery flatMap { scalaxb.toXML[generated2.Paycheck_DeliveryType](_, Some("urn:com.workday/bsvc"), Some("Paycheck_Delivery"), __scope, false) })

  }

  trait DefaultGenerated2_Paycheck_Delivery_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Paycheck_Delivery_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Paycheck_Delivery_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Paycheck_Delivery_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Paycheck_Delivery_ID")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Date_Last_Updated")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Paycheck_Delivery_Method_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payslip_Printing_Override_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Paycheck_Delivery_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.WorkerObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Paycheck_Delivery_MethodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payslip_Printing_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Paycheck_Delivery_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Paycheck_Delivery_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Paycheck_Delivery_ID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        __obj.Date_Last_Updated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Date_Last_Updated"), __scope, false) } getOrElse {Nil},
        __obj.Paycheck_Delivery_Method_Reference map { scalaxb.toXML[generated2.Paycheck_Delivery_MethodObjectType](_, Some("urn:com.workday/bsvc"), Some("Paycheck_Delivery_Method_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payslip_Printing_Override_Reference map { scalaxb.toXML[generated2.Payslip_Printing_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payslip_Printing_Override_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Bankruptcy_Order_Specific_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Bankruptcy_Order_Specific_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Bankruptcy_Order_Specific_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Bankruptcy_Order_Specific_DataType] =
      phrase((((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Chapter_13")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Chapter_7")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      generated2.Bankruptcy_Order_Specific_DataType(p1) })
    
    def writesChildNodes(__obj: generated2.Bankruptcy_Order_Specific_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.bankruptcy_order_specific_datatypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Boolean]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultGenerated2_Creditor_Garnishment_Specific_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Creditor_Garnishment_Specific_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Creditor_Garnishment_Specific_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Creditor_Garnishment_Specific_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Creditor_Garnishment_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non_Resident_State_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Head_of_Household")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Number_of_Dependents")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_County_Authority_FIPS_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_is_Laborer_or_Mechanic")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Good_Cause_Limit_Percent")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Weekly_Gross_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Expected_Annual_Earnings")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      generated2.Creditor_Garnishment_Specific_DataType(scalaxb.fromXML[generated2.Unique_IdentifierObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Tax_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Creditor_Garnishment_Specific_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Unique_IdentifierObjectType](__obj.Creditor_Garnishment_Type_Reference, Some("urn:com.workday/bsvc"), Some("Creditor_Garnishment_Type_Reference"), __scope, false),
        __obj.Non_Resident_State_Reference map { scalaxb.toXML[generated2.Payroll_Tax_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Non_Resident_State_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Head_of_Household map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Head_of_Household"), __scope, false) } getOrElse {Nil},
        __obj.Number_of_Dependents map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Number_of_Dependents"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Local_County_Authority_FIPS_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_County_Authority_FIPS_Code"), __scope, false) } getOrElse {Nil},
        __obj.Worker_is_Laborer_or_Mechanic map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Worker_is_Laborer_or_Mechanic"), __scope, false) } getOrElse {Nil},
        __obj.Good_Cause_Limit_Percent map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Good_Cause_Limit_Percent"), __scope, false) } getOrElse {Nil},
        __obj.Weekly_Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Weekly_Gross_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Expected_Annual_Earnings map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Expected_Annual_Earnings"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Federal_Tax_Levy_Specific_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Federal_Tax_Levy_Specific_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Federal_Tax_Levy_Specific_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Federal_Tax_Levy_Specific_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Levy_Signed_Part_3_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Marital_Status_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Personal_Exemptions")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Exemptions_65_or_Blind")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exemption_Amount_Override")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exemption_Frequency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Levy_Termination_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Federal_Tax_Levy_Dependent_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Lock_Tax_Elections")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Load_Baseline_Restrictions")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      generated2.Federal_Tax_Levy_Specific_DataType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Marital_Status_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.FrequencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[generated2.Federal_Tax_Levy_Dependent_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Federal_Tax_Levy_Specific_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Levy_Signed_Part_3_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Tax_Levy_Signed_Part_3_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Marital_Status_Reference flatMap { scalaxb.toXML[generated2.Payroll_Marital_Status_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Marital_Status_Reference"), __scope, false) },
        __obj.Personal_Exemptions map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Personal_Exemptions"), __scope, false) } getOrElse {Nil},
        __obj.Additional_Exemptions_65_or_Blind map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Additional_Exemptions_65_or_Blind"), __scope, false) } getOrElse {Nil},
        __obj.Exemption_Amount_Override map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Exemption_Amount_Override"), __scope, false) } getOrElse {Nil},
        __obj.Exemption_Frequency_Reference map { scalaxb.toXML[generated2.FrequencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Exemption_Frequency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Levy_Termination_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Tax_Levy_Termination_Date"), __scope, false) } getOrElse {Nil},
        __obj.Federal_Tax_Levy_Dependent_Reference flatMap { scalaxb.toXML[generated2.Federal_Tax_Levy_Dependent_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Federal_Tax_Levy_Dependent_Reference"), __scope, false) },
        __obj.Lock_Tax_Elections map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Lock_Tax_Elections"), __scope, false) } getOrElse {Nil},
        __obj.Load_Baseline_Restrictions map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Load_Baseline_Restrictions"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wage_Assignment_Specific_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wage_Assignment_Specific_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Wage_Assignment_Specific_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wage_Assignment_Specific_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Head_of_Household")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Married")) ^^
      { case p1 ~ p2 =>
      generated2.Wage_Assignment_Specific_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wage_Assignment_Specific_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Head_of_Household map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Head_of_Household"), __scope, false) } getOrElse {Nil},
        __obj.Married map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Married"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Exception_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Exception_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Exception_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Exception_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Classification")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Message")) ^^
      { case p1 ~ p2 =>
      generated2.Exception_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Exception_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Classification map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Classification"), __scope, false) } getOrElse {Nil},
        __obj.Message map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Message"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Result_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Result_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Result_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Result_Request_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Selection_Date_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Calculation_Criteria")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Settlement_ID_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      generated2.Payroll_Result_Request_CriteriaType(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Period_Date_IndicatorObjectType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[generated2.EmployeeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Pay_Calculations_SelectedType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[generated2.Run_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[generated2.Pay_GroupObjectType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Result_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Start_Date, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.End_Date, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false),
        scalaxb.toXML[generated2.Period_Date_IndicatorObjectType](__obj.Period_Selection_Date_Reference, Some("urn:com.workday/bsvc"), Some("Period_Selection_Date_Reference"), __scope, false),
        __obj.Employee_Reference flatMap { scalaxb.toXML[generated2.EmployeeObjectType](_, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false) },
        __obj.Company_Reference flatMap { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) },
        __obj.Pay_Calculation_Criteria map { scalaxb.toXML[generated2.Pay_Calculations_SelectedType](_, Some("urn:com.workday/bsvc"), Some("Pay_Calculation_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Run_Category_Reference flatMap { scalaxb.toXML[generated2.Run_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Reference"), __scope, false) },
        __obj.Pay_Group_Reference flatMap { scalaxb.toXML[generated2.Pay_GroupObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Reference"), __scope, false) },
        __obj.Period_Reference flatMap { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Reference"), __scope, false) },
        __obj.Settlement_ID_Reference flatMap { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Settlement_ID_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Result_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Result_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Result_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Result_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Name_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_National_ID_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Related_Calculation_Result_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Withholding_Order_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Payroll_Worktag_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_QTD_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_YTD_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated2.Payroll_Result_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Result_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Include_Name_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Name_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_National_ID_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_National_ID_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_Related_Calculation_Result_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Related_Calculation_Result_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_Withholding_Order_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Withholding_Order_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_Payroll_Worktag_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Payroll_Worktag_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_QTD_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_QTD_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_YTD_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_YTD_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Results_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Results_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Results_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Results_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Result_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Result_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Results_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Result_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Results_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Results_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_results_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Results_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Result_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_ResultTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_ResultType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_ResultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_ResultType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Name_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "National_ID_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_ID_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Account_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Establishment_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Period_Frequency")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Off-cycle_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "For_Additional_Pay")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Completed_Date_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subperiod_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subperiod_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Net_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Result_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Accumulation_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date_of_Original_Payroll_Result")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 =>
      generated2.Payroll_ResultType(p1.headOption map { scalaxb.fromXML[generated2.EmployeeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Name_Data_for_Get_Payroll_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.National_ID_Data_for_Get_Payroll_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_IDObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.EstablishmentObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[generated2.Pay_Group_DetailObjectType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[generated2.Run_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[generated2.Currency_Reference_DataType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[generated2.Result_Line_Details_for_Get_Payroll_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p24 map { scalaxb.fromXML[generated2.Pay_Accumulation_Data_for_Get_Payroll_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_ResultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Employee_Reference map { scalaxb.toXML[generated2.EmployeeObjectType](_, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Employee_Name_Data map { scalaxb.toXML[generated2.Name_Data_for_Get_Payroll_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Employee_Name_Data"), __scope, false) } getOrElse {Nil},
        __obj.National_ID_Data map { scalaxb.toXML[generated2.National_ID_Data_for_Get_Payroll_ResultsType](_, Some("urn:com.workday/bsvc"), Some("National_ID_Data"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_ID_Reference map { scalaxb.toXML[generated2.Payroll_IDObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_ID_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Account_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Account_Number"), __scope, false) } getOrElse {Nil},
        __obj.Establishment_Reference map { scalaxb.toXML[generated2.EstablishmentObjectType](_, Some("urn:com.workday/bsvc"), Some("Establishment_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Reference map { scalaxb.toXML[generated2.Pay_Group_DetailObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Run_Category_Reference map { scalaxb.toXML[generated2.Run_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Period_Frequency map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Pay_Period_Frequency"), __scope, false) } getOrElse {Nil},
        __obj.Offu45cycle_Type_Reference map { scalaxb.toXML[generated2.Payroll_Offu45cycle_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Off-cycle_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.For_Additional_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("For_Additional_Pay"), __scope, false) } getOrElse {Nil},
        __obj.Result_Completed_Date_Time map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Result_Completed_Date_Time"), __scope, false) } getOrElse {Nil},
        __obj.Period_Reference map { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Period_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Period_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Subperiod_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Subperiod_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Subperiod_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Subperiod_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Net_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Net_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.Currency_Reference_DataType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Result_Data flatMap { scalaxb.toXML[generated2.Result_Line_Details_for_Get_Payroll_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Result_Data"), __scope, false) },
        __obj.Pay_Accumulation_Data flatMap { scalaxb.toXML[generated2.Pay_Accumulation_Data_for_Get_Payroll_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Pay_Accumulation_Data"), __scope, false) },
        __obj.Payment_Date_of_Original_Payroll_Result map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date_of_Original_Payroll_Result"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Result_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Result_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Result_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Result_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Result")) ^^
      { case p1 =>
      generated2.Payroll_Result_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_ResultType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Result_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Result flatMap { scalaxb.toXML[generated2.Payroll_ResultType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Result"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Results_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Results_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Results_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Results_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Payroll_Results_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Result_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Result_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Result_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Result_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Results_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Results_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Result_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Result_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Result_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Result_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Result_Line_Details_for_Get_Payroll_ResultsTypeFormat extends scalaxb.ElemNameParser[generated2.Result_Line_Details_for_Get_Payroll_ResultsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Result_Line_Details_for_Get_Payroll_ResultsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Result_Line_Details_for_Get_Payroll_ResultsType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component_Frequency")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Periods_Remaining_In_Calendar_Year")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subperiod_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subperiod_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Worktag_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Line_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Line_QTD_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Line_YTD_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Line_Arrears_Amount")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Related_Calculation_Result_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Input_Comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      generated2.Result_Line_Details_for_Get_Payroll_ResultsType(p1 map { scalaxb.fromXML[generated2.Pay_Component_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Worktag_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[generated2.Related_Calculation_Data_for_Get_Payroll_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[generated2.Withholding_Order_Data_for_Get_Payroll_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Result_Line_Details_for_Get_Payroll_ResultsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Pay_Component_Reference flatMap { scalaxb.toXML[generated2.Pay_Component_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Pay_Component_Reference"), __scope, false) },
        __obj.Pay_Component_Frequency map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Pay_Component_Frequency"), __scope, false) } getOrElse {Nil},
        __obj.Periods_Remaining_In_Calendar_Year map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Periods_Remaining_In_Calendar_Year"), __scope, false) } getOrElse {Nil},
        __obj.Subperiod_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Subperiod_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Subperiod_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Subperiod_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Worktag_Data map { scalaxb.toXML[generated2.Payroll_Worktag_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Worktag_Data"), __scope, false) } getOrElse {Nil},
        __obj.Result_Line_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Result_Line_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Result_Line_QTD_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Result_Line_QTD_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Result_Line_YTD_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Result_Line_YTD_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Result_Line_Arrears_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Result_Line_Arrears_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Related_Calculation_Result_Data flatMap { scalaxb.toXML[generated2.Related_Calculation_Data_for_Get_Payroll_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Related_Calculation_Result_Data"), __scope, false) },
        __obj.Withholding_Order_Data map { scalaxb.toXML[generated2.Withholding_Order_Data_for_Get_Payroll_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Data"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Input_Comment map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Input_Comment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Related_Calculation_Data_for_Get_Payroll_ResultsTypeFormat extends scalaxb.ElemNameParser[generated2.Related_Calculation_Data_for_Get_Payroll_ResultsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Related_Calculation_Data_for_Get_Payroll_ResultsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Related_Calculation_Data_for_Get_Payroll_ResultsType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Related_Calculation_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Related_Amount_Value")) ^^
      { case p1 ~ p2 =>
      generated2.Related_Calculation_Data_for_Get_Payroll_ResultsType(p1.headOption map { scalaxb.fromXML[generated2.Related_Calculation__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Related_Calculation_Data_for_Get_Payroll_ResultsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Related_Calculation_Reference map { scalaxb.toXML[generated2.Related_Calculation__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Related_Calculation_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Related_Amount_Value map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Related_Amount_Value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Withholding_Order_Data_for_Get_Payroll_ResultsTypeFormat extends scalaxb.ElemNameParser[generated2.Withholding_Order_Data_for_Get_Payroll_ResultsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Withholding_Order_Data_for_Get_Payroll_ResultsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Withholding_Order_Data_for_Get_Payroll_ResultsType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Case_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Type")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Order_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Received_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Begin_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Order_Status")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Order_Priority")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Debt_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Period_Amount_Type_Reference")) ~ 
      opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Period_Amount")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Period_Amount_as_Percent")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Period_Frequency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Recipient_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Recipient_Instant_Messenger_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Recipient_Bank_Account_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Originating_Entity")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Memo")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Recipient_Address_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      generated2.Withholding_Order_Data_for_Get_Payroll_ResultsType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[generated2.Withholding_Order_Amount_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p11,
        p12.headOption map { scalaxb.fromXML[generated2.FrequencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[generated2.Payroll_Tax_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[generated2.Deduction_RecipientObjectType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[generated2.Settlement_Bank_AccountObjectType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p19 map { scalaxb.fromXML[generated2.Address_Information_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Withholding_Order_Data_for_Get_Payroll_ResultsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Case_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Case_Number"), __scope, false) } getOrElse {Nil},
        __obj.Withholding_Order_Type map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Type"), __scope, false) } getOrElse {Nil},
        __obj.Order_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Order_Date"), __scope, false) } getOrElse {Nil},
        __obj.Received_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Received_Date"), __scope, false) } getOrElse {Nil},
        __obj.Begin_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Begin_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Order_Status map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Order_Status"), __scope, false) } getOrElse {Nil},
        __obj.Order_Priority map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Order_Priority"), __scope, false) } getOrElse {Nil},
        __obj.Total_Debt_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Total_Debt_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Period_Amount_Type_Reference map { scalaxb.toXML[generated2.Withholding_Order_Amount_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Period_Amount_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.withholding_order_data_for_get_payroll_resultstypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Pay_Period_Frequency_Reference map { scalaxb.toXML[generated2.FrequencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Period_Frequency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Tax_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Tax_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Deduction_Recipient_Reference map { scalaxb.toXML[generated2.Deduction_RecipientObjectType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Recipient_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Deduction_Recipient_Instant_Messenger_Reference flatMap { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Recipient_Instant_Messenger_Reference"), __scope, false) },
        __obj.Deduction_Recipient_Bank_Account_Reference map { scalaxb.toXML[generated2.Settlement_Bank_AccountObjectType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Recipient_Bank_Account_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Originating_Entity map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Originating_Entity"), __scope, false) } getOrElse {Nil},
        __obj.Memo map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Memo"), __scope, false) } getOrElse {Nil},
        __obj.Deduction_Recipient_Address_Data flatMap { scalaxb.toXML[generated2.Address_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Recipient_Address_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Worktag_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Worktag_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Worktag_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Worktag_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Location_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Region_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Job_Profile_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Cost_Center_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Project_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_State_Authority_Worktag_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Workers_Compensation_Code_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_County_Authority_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_City_Authority_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_School_District_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_Other_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_1_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_2_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_3_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_4_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_5_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Fund_Worktag_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Grant_Worktag_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gift_Worktag_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Program_Worktag_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Business_Unit_Worktag_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Object_Class_Worktag_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Project_Phase_Worktag_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Project_Task_Worktag_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Organization_Worktag_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_06_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_07_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_08_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_09_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_10_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_11_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_12_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_13_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_14_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_15_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "NI_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ARRCO-AGIRC_Category_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 =>
      generated2.Payroll_Worktag_DataType(p1 map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.LocationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.RegionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Job_ProfileObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Cost_CenterObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.ProjectObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[generated2.Withholding_Order_CaseObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[generated2.Workers_Compensation_CodeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[generated2.Payroll_Local_County_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[generated2.Payroll_Local_City_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[generated2.Payroll_Local_School_District_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[generated2.Payroll_Other_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[generated2.Custom_Worktag_01ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[generated2.Custom_Worktag_02ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[generated2.Custom_Worktag_03ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[generated2.Custom_Worktag_04ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[generated2.Custom_Worktag_05ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[generated2.FundObjectType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[generated2.GrantObjectType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[generated2.GiftObjectType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[generated2.ProgramObjectType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[generated2.Business_UnitObjectType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[generated2.Object_ClassObjectType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[generated2.Project_Plan_PhaseObjectType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[generated2.Project_Plan_TaskObjectType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[generated2.Custom_Organization_Worktag_DataType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_06ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_07ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_08ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_09ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_10ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_11ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_12ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_13ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_14ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_15ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[generated2.NI_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[generated2.ARRCOu45AGIRC_Rubric_ValueObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Worktag_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Company_Worktag_Reference flatMap { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Worktag_Reference"), __scope, false) },
        __obj.Location_Worktag_Reference flatMap { scalaxb.toXML[generated2.LocationObjectType](_, Some("urn:com.workday/bsvc"), Some("Location_Worktag_Reference"), __scope, false) },
        __obj.Region_Worktag_Reference flatMap { scalaxb.toXML[generated2.RegionObjectType](_, Some("urn:com.workday/bsvc"), Some("Region_Worktag_Reference"), __scope, false) },
        __obj.Job_Profile_Worktag_Reference flatMap { scalaxb.toXML[generated2.Job_ProfileObjectType](_, Some("urn:com.workday/bsvc"), Some("Job_Profile_Worktag_Reference"), __scope, false) },
        __obj.Cost_Center_Worktag_Reference flatMap { scalaxb.toXML[generated2.Cost_CenterObjectType](_, Some("urn:com.workday/bsvc"), Some("Cost_Center_Worktag_Reference"), __scope, false) },
        __obj.Project_Worktag_Reference flatMap { scalaxb.toXML[generated2.ProjectObjectType](_, Some("urn:com.workday/bsvc"), Some("Project_Worktag_Reference"), __scope, false) },
        __obj.Withholding_Order_Worktag_Reference flatMap { scalaxb.toXML[generated2.Withholding_Order_CaseObjectType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Worktag_Reference"), __scope, false) },
        __obj.Payroll_State_Authority_Worktag_Reference flatMap { scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_State_Authority_Worktag_Reference"), __scope, false) },
        __obj.Workers_Compensation_Code_Reference map { scalaxb.toXML[generated2.Workers_Compensation_CodeObjectType](_, Some("urn:com.workday/bsvc"), Some("Workers_Compensation_Code_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Local_County_Authority_Worktag_Reference flatMap { scalaxb.toXML[generated2.Payroll_Local_County_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_County_Authority_Worktag_Reference"), __scope, false) },
        __obj.Payroll_Local_City_Authority_Worktag_Reference flatMap { scalaxb.toXML[generated2.Payroll_Local_City_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_City_Authority_Worktag_Reference"), __scope, false) },
        __obj.Payroll_Local_School_District_Worktag_Reference flatMap { scalaxb.toXML[generated2.Payroll_Local_School_District_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_School_District_Worktag_Reference"), __scope, false) },
        __obj.Payroll_Local_Other_Worktag_Reference flatMap { scalaxb.toXML[generated2.Payroll_Other_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_Other_Worktag_Reference"), __scope, false) },
        __obj.Custom_Worktag_1_Reference flatMap { scalaxb.toXML[generated2.Custom_Worktag_01ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_1_Reference"), __scope, false) },
        __obj.Custom_Worktag_2_Reference flatMap { scalaxb.toXML[generated2.Custom_Worktag_02ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_2_Reference"), __scope, false) },
        __obj.Custom_Worktag_3_Reference flatMap { scalaxb.toXML[generated2.Custom_Worktag_03ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_3_Reference"), __scope, false) },
        __obj.Custom_Worktag_4_Reference flatMap { scalaxb.toXML[generated2.Custom_Worktag_04ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_4_Reference"), __scope, false) },
        __obj.Custom_Worktag_5_Reference flatMap { scalaxb.toXML[generated2.Custom_Worktag_05ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_5_Reference"), __scope, false) },
        __obj.Fund_Worktag_Reference map { scalaxb.toXML[generated2.FundObjectType](_, Some("urn:com.workday/bsvc"), Some("Fund_Worktag_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Grant_Worktag_Reference map { scalaxb.toXML[generated2.GrantObjectType](_, Some("urn:com.workday/bsvc"), Some("Grant_Worktag_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Gift_Worktag_Reference map { scalaxb.toXML[generated2.GiftObjectType](_, Some("urn:com.workday/bsvc"), Some("Gift_Worktag_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Program_Worktag_Reference map { scalaxb.toXML[generated2.ProgramObjectType](_, Some("urn:com.workday/bsvc"), Some("Program_Worktag_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Business_Unit_Worktag_Reference map { scalaxb.toXML[generated2.Business_UnitObjectType](_, Some("urn:com.workday/bsvc"), Some("Business_Unit_Worktag_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Object_Class_Worktag_Reference map { scalaxb.toXML[generated2.Object_ClassObjectType](_, Some("urn:com.workday/bsvc"), Some("Object_Class_Worktag_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Project_Phase_Worktag_Reference map { scalaxb.toXML[generated2.Project_Plan_PhaseObjectType](_, Some("urn:com.workday/bsvc"), Some("Project_Phase_Worktag_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Project_Task_Worktag_Reference map { scalaxb.toXML[generated2.Project_Plan_TaskObjectType](_, Some("urn:com.workday/bsvc"), Some("Project_Task_Worktag_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Organization_Worktag_Data flatMap { scalaxb.toXML[generated2.Custom_Organization_Worktag_DataType](_, Some("urn:com.workday/bsvc"), Some("Custom_Organization_Worktag_Data"), __scope, false) },
        __obj.Custom_Worktag_06_Reference map { scalaxb.toXML[generated2.Custom_Worktag_06ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_06_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_07_Reference map { scalaxb.toXML[generated2.Custom_Worktag_07ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_07_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_08_Reference map { scalaxb.toXML[generated2.Custom_Worktag_08ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_08_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_09_Reference map { scalaxb.toXML[generated2.Custom_Worktag_09ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_09_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_10_Reference map { scalaxb.toXML[generated2.Custom_Worktag_10ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_10_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_11_Reference map { scalaxb.toXML[generated2.Custom_Worktag_11ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_11_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_12_Reference map { scalaxb.toXML[generated2.Custom_Worktag_12ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_12_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_13_Reference map { scalaxb.toXML[generated2.Custom_Worktag_13ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_13_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_14_Reference map { scalaxb.toXML[generated2.Custom_Worktag_14ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_14_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_15_Reference map { scalaxb.toXML[generated2.Custom_Worktag_15ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_15_Reference"), __scope, false) } getOrElse {Nil},
        __obj.NI_Category_Reference map { scalaxb.toXML[generated2.NI_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("NI_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.ARRCOu45AGIRC_Category_Reference map { scalaxb.toXML[generated2.ARRCOu45AGIRC_Rubric_ValueObjectType](_, Some("urn:com.workday/bsvc"), Some("ARRCO-AGIRC_Category_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Business_Entity_WWS_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Business_Entity_WWS_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Business_Entity_WWS_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Business_Entity_WWS_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Business_Entity_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Business_Entity_Phonetic_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Business_Entity_Tax_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "External_Entity_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Contact_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Business_Entity_Logo_Image_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Business_Entity_WWS_DataType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Contact_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Business_Entity_Logo_Image_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Business_Entity_WWS_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Business_Entity_Name, Some("urn:com.workday/bsvc"), Some("Business_Entity_Name"), __scope, false),
        __obj.Business_Entity_Phonetic_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Business_Entity_Phonetic_Name"), __scope, false) } getOrElse {Nil},
        __obj.Business_Entity_Tax_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Business_Entity_Tax_ID"), __scope, false) } getOrElse {Nil},
        __obj.External_Entity_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("External_Entity_ID"), __scope, false) } getOrElse {Nil},
        __obj.Contact_Data map { scalaxb.toXML[generated2.Contact_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Contact_Data"), __scope, false) } getOrElse {Nil},
        __obj.Business_Entity_Logo_Image_Data map { scalaxb.toXML[generated2.Business_Entity_Logo_Image_DataType](_, Some("urn:com.workday/bsvc"), Some("Business_Entity_Logo_Image_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Pay_Calculations_SelectedTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Calculations_SelectedType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Calculations_SelectedType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Calculations_SelectedType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earning_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Accumulation_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Pay_Calculations_SelectedType(p1 map { scalaxb.fromXML[generated2.Earning__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Deduction__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Pay_Accumulation__All_ObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Pay_Calculations_SelectedType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Earning_Reference flatMap { scalaxb.toXML[generated2.Earning__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Earning_Reference"), __scope, false) },
        __obj.Deduction_Reference flatMap { scalaxb.toXML[generated2.Deduction__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false) },
        __obj.Pay_Accumulation_Reference flatMap { scalaxb.toXML[generated2.Pay_Accumulation__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Accumulation_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Input_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Input_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Input_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Input_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Input_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Input_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_InputObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Input_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Input_Reference flatMap { scalaxb.toXML[generated2.Payroll_InputObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Input_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Input_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Input_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Input_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Input_Request_CriteriaType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earning_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Open-Ended_Ongoing_Inputs")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Payroll_Input_Request_CriteriaType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Earning__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Deduction__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Input_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Earning_Reference flatMap { scalaxb.toXML[generated2.Earning__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Earning_Reference"), __scope, false) },
        __obj.Deduction_Reference flatMap { scalaxb.toXML[generated2.Deduction__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false) },
        __obj.Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Openu45Ended_Ongoing_Inputs map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Open-Ended_Ongoing_Inputs"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Input_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Input_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Input_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Input_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Payroll_Input_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Input_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Input_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Include_Payroll_Input_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Payroll_Input_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Balances_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Balances_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Balances_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Balances_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Balances_RequestType(scalaxb.fromXML[generated2.Payroll_Balance_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Balance_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Balances_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Balances_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Payroll_Balance_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Balance_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Balances_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Balances_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Balances_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Balances_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Payroll_Balances_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Balance_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Balance_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_Balance_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Balances_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Balances_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Balance_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Balance_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Balance_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Balance_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Balance_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Balance_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Balance_Request_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Calculation_Criteria")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Balance_Period_Definition_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Balance_Period_As_of_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Balance_Period_Cutoff_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_for_Balance_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Results_Processed_by_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Payroll_Balance_Request_CriteriaType(p1 map { scalaxb.fromXML[generated2.EmployeeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Pay_Calculation_SelectionType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[generated2.Balance_Period__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Balance_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Employee_Reference flatMap { scalaxb.toXML[generated2.EmployeeObjectType](_, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false) },
        __obj.Company_Reference flatMap { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) },
        scalaxb.toXML[generated2.Pay_Calculation_SelectionType](__obj.Pay_Calculation_Criteria, Some("urn:com.workday/bsvc"), Some("Pay_Calculation_Criteria"), __scope, false),
        __obj.Balance_Period_Definition_Reference flatMap { scalaxb.toXML[generated2.Balance_Period__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Balance_Period_Definition_Reference"), __scope, false) },
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Balance_Period_As_of_Date, Some("urn:com.workday/bsvc"), Some("Balance_Period_As_of_Date"), __scope, false),
        __obj.Balance_Period_Cutoff_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Balance_Period_Cutoff_Date"), __scope, false) } getOrElse {Nil},
        __obj.Period_for_Balance_Reference map { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_for_Balance_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Include_Results_Processed_by_Reference map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Include_Results_Processed_by_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Balance_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Balance_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Balance_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Balance_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Name_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_National_ID_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Balance_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Balance_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Include_Name_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Name_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_National_ID_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_National_ID_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Balance_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Balance_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Balance_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Balance_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Balance")) ^^
      { case p1 =>
      generated2.Payroll_Balance_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_BalanceType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Balance_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Balance flatMap { scalaxb.toXML[generated2.Payroll_BalanceType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Balance"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_BalanceTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_BalanceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_BalanceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_BalanceType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_External_Integration_ID_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Name_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "National_ID_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Calculation_Balance_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Payroll_BalanceType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Worker_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Name_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.National_ID_DataType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Pay_Calculation_Balance_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_BalanceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Worker_External_Integration_ID_Data map { scalaxb.toXML[generated2.Worker_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Worker_External_Integration_ID_Data"), __scope, false) } getOrElse {Nil},
        __obj.Name_Data flatMap { scalaxb.toXML[generated2.Name_DataType](_, Some("urn:com.workday/bsvc"), Some("Name_Data"), __scope, false) },
        __obj.National_ID_Data flatMap { scalaxb.toXML[generated2.National_ID_DataType](_, Some("urn:com.workday/bsvc"), Some("National_ID_Data"), __scope, false) },
        __obj.Pay_Calculation_Balance_Data flatMap { scalaxb.toXML[generated2.Pay_Calculation_Balance_DataType](_, Some("urn:com.workday/bsvc"), Some("Pay_Calculation_Balance_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_Calculation_SelectionTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Calculation_SelectionType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Calculation_SelectionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Calculation_SelectionType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earning_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Accumulation_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Pay_Calculation_SelectionType(p1 map { scalaxb.fromXML[generated2.Earning__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Deduction__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Pay_Accumulation__All_ObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Pay_Calculation_SelectionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Earning_Reference flatMap { scalaxb.toXML[generated2.Earning__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Earning_Reference"), __scope, false) },
        __obj.Deduction_Reference flatMap { scalaxb.toXML[generated2.Deduction__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false) },
        __obj.Pay_Accumulation_Reference flatMap { scalaxb.toXML[generated2.Pay_Accumulation__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Accumulation_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_Calculation_Balance_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Calculation_Balance_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Calculation_Balance_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Calculation_Balance_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Calculation_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Balance_Period_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Pay_Calculation_Balance_DataType(p1 map { scalaxb.fromXML[generated2.Pay_Calculation_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Balance_Period_Data_for_Get_Payroll_BalancesType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Pay_Calculation_Balance_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Pay_Calculation_Reference flatMap { scalaxb.toXML[generated2.Pay_Calculation_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Pay_Calculation_Reference"), __scope, false) },
        __obj.Balance_Period_Data flatMap { scalaxb.toXML[generated2.Balance_Period_Data_for_Get_Payroll_BalancesType](_, Some("urn:com.workday/bsvc"), Some("Balance_Period_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_Calculation_ReferenceTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Calculation_ReferenceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Calculation_ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Calculation_ReferenceType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earning_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Accumulation_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Pay_Calculation_ReferenceType(p1.headOption map { scalaxb.fromXML[generated2.Earning__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Deduction__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Pay_Accumulation__All_ObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Pay_Calculation_ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Earning_Reference map { scalaxb.toXML[generated2.Earning__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Earning_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Deduction_Reference map { scalaxb.toXML[generated2.Deduction__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Accumulation_Reference map { scalaxb.toXML[generated2.Pay_Accumulation__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Accumulation_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Balance_Period_Data_for_Get_Payroll_BalancesTypeFormat extends scalaxb.ElemNameParser[generated2.Balance_Period_Data_for_Get_Payroll_BalancesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Balance_Period_Data_for_Get_Payroll_BalancesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Balance_Period_Data_for_Get_Payroll_BalancesType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Balance_Period_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Balance_Period_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Balance_Period_End_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Balance_Period_Detail_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Balance_Period_Data_for_Get_Payroll_BalancesType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Balance_Period_Detail_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Balance_Period_Data_for_Get_Payroll_BalancesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Balance_Period_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Balance_Period_Name"), __scope, false) } getOrElse {Nil},
        __obj.Balance_Period_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Balance_Period_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Balance_Period_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Balance_Period_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Balance_Period_Detail_Data flatMap { scalaxb.toXML[generated2.Balance_Period_Detail_DataType](_, Some("urn:com.workday/bsvc"), Some("Balance_Period_Detail_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Balance_Period_Detail_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Balance_Period_Detail_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Balance_Period_Detail_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Balance_Period_Detail_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worktag_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Balance_Amount")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_ID_Balance_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Balance_Period_Detail_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Worktag_DataType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Currency_Reference_DataType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[generated2.Payroll_ID_Balance_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Balance_Period_Detail_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worktag_Reference flatMap { scalaxb.toXML[generated2.Payroll_Worktag_DataType](_, Some("urn:com.workday/bsvc"), Some("Worktag_Reference"), __scope, false) },
        __obj.Balance_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Balance_Amount"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Currency_Reference_DataType](__obj.Currency_Reference, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false),
        __obj.Payroll_ID_Balance_Data flatMap { scalaxb.toXML[generated2.Payroll_ID_Balance_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_ID_Balance_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Settlement_Account_WWS_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Settlement_Account_WWS_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Settlement_Account_WWS_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Settlement_Account_WWS_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Settlement_Bank_Account_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Nickname")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Routing_Transit_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Branch_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Branch_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Check_Digit")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Roll_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "IBAN")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SWIFT_Bank_Identification_Code")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Accepts_Payment_Types_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Types_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "For_Supplier_Connections_Only")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Requires_Prenote")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Type_Prenote_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactive")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Instructions")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Intermediary_Bank_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 =>
      generated2.Settlement_Account_WWS_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.CountryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Bank_Account_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[generated2.Payment_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[generated2.Payment_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[generated2.Payment_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[generated2.Intermediary_Bank_Account_WWS_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Settlement_Account_WWS_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Settlement_Bank_Account_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Settlement_Bank_Account_ID"), __scope, false) } getOrElse {Nil},
        __obj.Country_Reference map { scalaxb.toXML[generated2.CountryObjectType](_, Some("urn:com.workday/bsvc"), Some("Country_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Nickname map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Nickname"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Type_Reference map { scalaxb.toXML[generated2.Bank_Account_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Name"), __scope, false) } getOrElse {Nil},
        __obj.Routing_Transit_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Routing_Transit_Number"), __scope, false) } getOrElse {Nil},
        __obj.Branch_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Branch_ID"), __scope, false) } getOrElse {Nil},
        __obj.Branch_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Branch_Name"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Number"), __scope, false) } getOrElse {Nil},
        __obj.Check_Digit map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Check_Digit"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Name"), __scope, false) } getOrElse {Nil},
        __obj.Roll_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Roll_Number"), __scope, false) } getOrElse {Nil},
        __obj.IBAN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("IBAN"), __scope, false) } getOrElse {Nil},
        __obj.SWIFT_Bank_Identification_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("SWIFT_Bank_Identification_Code"), __scope, false) } getOrElse {Nil},
        __obj.Accepts_Payment_Types_Reference flatMap { scalaxb.toXML[generated2.Payment_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Accepts_Payment_Types_Reference"), __scope, false) },
        __obj.Payment_Types_Reference flatMap { scalaxb.toXML[generated2.Payment_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Payment_Types_Reference"), __scope, false) },
        __obj.For_Supplier_Connections_Only map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("For_Supplier_Connections_Only"), __scope, false) } getOrElse {Nil},
        __obj.Requires_Prenote map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Requires_Prenote"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Type_Prenote_Reference map { scalaxb.toXML[generated2.Payment_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Payment_Type_Prenote_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Inactive map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactive"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Instructions map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Instructions"), __scope, false) } getOrElse {Nil},
        __obj.Intermediary_Bank_Data flatMap { scalaxb.toXML[generated2.Intermediary_Bank_Account_WWS_DataType](_, Some("urn:com.workday/bsvc"), Some("Intermediary_Bank_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Business_Entity_Logo_Image_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Business_Entity_Logo_Image_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Business_Entity_Logo_Image_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Business_Entity_Logo_Image_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Filename")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Image")) ^^
      { case p1 ~ p2 =>
      generated2.Business_Entity_Logo_Image_DataType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[scalaxb.Base64Binary](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Business_Entity_Logo_Image_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Filename, Some("urn:com.workday/bsvc"), Some("Filename"), __scope, false),
        __obj.Image map { scalaxb.toXML[scalaxb.Base64Binary](_, Some("urn:com.workday/bsvc"), Some("Image"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Name_Data_for_Get_Payroll_ResultsTypeFormat extends scalaxb.ElemNameParser[generated2.Name_Data_for_Get_Payroll_ResultsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Name_Data_for_Get_Payroll_ResultsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Name_Data_for_Get_Payroll_ResultsType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Name_Data")) ^^
      { case p1 =>
      generated2.Name_Data_for_Get_Payroll_ResultsType(p1 map { scalaxb.fromXML[generated2.Name_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Name_Data_for_Get_Payroll_ResultsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Name_Data flatMap { scalaxb.toXML[generated2.Name_DataType](_, Some("urn:com.workday/bsvc"), Some("Name_Data"), __scope, false) })

  }

  trait DefaultGenerated2_National_ID_Data_for_Get_Payroll_ResultsTypeFormat extends scalaxb.ElemNameParser[generated2.National_ID_Data_for_Get_Payroll_ResultsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("National_ID_Data_for_Get_Payroll_ResultsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.National_ID_Data_for_Get_Payroll_ResultsType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "National_ID_Data")) ^^
      { case p1 =>
      generated2.National_ID_Data_for_Get_Payroll_ResultsType(p1 map { scalaxb.fromXML[generated2.National_ID_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.National_ID_Data_for_Get_Payroll_ResultsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.National_ID_Data flatMap { scalaxb.toXML[generated2.National_ID_DataType](_, Some("urn:com.workday/bsvc"), Some("National_ID_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Application_Instance_Exceptions_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Application_Instance_Exceptions_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Application_Instance_Exceptions_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Application_Instance_Exceptions_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exception_Data")) ^^
      { case p1 =>
      generated2.Application_Instance_Exceptions_DataType(p1 map { scalaxb.fromXML[generated2.Exception_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Application_Instance_Exceptions_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Exception_Data flatMap { scalaxb.toXML[generated2.Exception_DataType](_, Some("urn:com.workday/bsvc"), Some("Exception_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Application_Instance_Related_Exceptions_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Application_Instance_Related_Exceptions_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Application_Instance_Related_Exceptions_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Application_Instance_Related_Exceptions_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exceptions_Data")) ^^
      { case p1 =>
      generated2.Application_Instance_Related_Exceptions_DataType(p1 map { scalaxb.fromXML[generated2.Application_Instance_Exceptions_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Application_Instance_Related_Exceptions_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Exceptions_Data flatMap { scalaxb.toXML[generated2.Application_Instance_Exceptions_DataType](_, Some("urn:com.workday/bsvc"), Some("Exceptions_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Business_Entity_Alternate_Name_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Business_Entity_Alternate_Name_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Business_Entity_Alternate_Name_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Business_Entity_Alternate_Name_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Alternate_Name")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Alternate_Name_Usage_Reference")) ^^
      { case p1 ~ p2 =>
      generated2.Business_Entity_Alternate_Name_DataType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[generated2.Alternate_Name_UsageObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Business_Entity_Alternate_Name_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Alternate_Name, Some("urn:com.workday/bsvc"), Some("Alternate_Name"), __scope, false),
        __obj.Alternate_Name_Usage_Reference flatMap { scalaxb.toXML[generated2.Alternate_Name_UsageObjectType](_, Some("urn:com.workday/bsvc"), Some("Alternate_Name_Usage_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Field_And_Parameter_Criteria_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Field_And_Parameter_Criteria_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Field_And_Parameter_Criteria_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Field_And_Parameter_Criteria_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Provider_Reference")) ^^
      { case p1 =>
      generated2.Field_And_Parameter_Criteria_DataType(p1 map { scalaxb.fromXML[generated2.External_Field_and_Parameter_Initialization_ProviderObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Field_And_Parameter_Criteria_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Provider_Reference flatMap { scalaxb.toXML[generated2.External_Field_and_Parameter_Initialization_ProviderObjectType](_, Some("urn:com.workday/bsvc"), Some("Provider_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Document_Field_Result_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Document_Field_Result_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Document_Field_Result_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Document_Field_Result_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Field_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Value")) ^^
      { case p1 ~ p2 =>
      generated2.Document_Field_Result_DataType(p1.headOption map { scalaxb.fromXML[generated2.Integration_Document_FieldObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Document_Field_Result_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Field_Reference map { scalaxb.toXML[generated2.Integration_Document_FieldObjectType](_, Some("urn:com.workday/bsvc"), Some("Field_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Value map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Offu45cycle_Payment_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Offu45cycle_Payment_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Off-cycle_Payment_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Offu45cycle_Payment_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Batch_ID")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_ID")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Priority")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Replacement")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Reason_Reference")) ~ 
      opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "On_Demand_Payment_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.On_Demand_Payment_DataType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Manual_Payment_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Manual_Payment_DataType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Worktag_Overrides_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Off-cycle_Input_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      generated2.Payroll_Offu45cycle_Payment_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.EmployeeObjectType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[generated2.Run_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[generated2.Pay_GroupObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Payroll_Offu45cycle_TypeObjectType](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Payroll_Action_ReasonObjectType](p11, scalaxb.ElemName(node) :: stack),
        p12,
        p13.headOption map { scalaxb.fromXML[generated2.Result_Worktag_Overrides_DataType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[generated2.Offu45cycle_Input_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Offu45cycle_Payment_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Batch_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Batch_ID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Payment_ID, Some("urn:com.workday/bsvc"), Some("Payment_ID"), __scope, false),
        scalaxb.toXML[generated2.EmployeeObjectType](__obj.Employee_Reference, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Payment_Date, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Period_Date, Some("urn:com.workday/bsvc"), Some("Period_Date"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.Payment_Priority, Some("urn:com.workday/bsvc"), Some("Payment_Priority"), __scope, false),
        __obj.Run_Category_Reference map { scalaxb.toXML[generated2.Run_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Reference map { scalaxb.toXML[generated2.Pay_GroupObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Payroll_Offu45cycle_TypeObjectType](__obj.Result_Type_Reference, Some("urn:com.workday/bsvc"), Some("Result_Type_Reference"), __scope, false),
        __obj.Replacement map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Replacement"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Payroll_Action_ReasonObjectType](__obj.Reason_Reference, Some("urn:com.workday/bsvc"), Some("Reason_Reference"), __scope, false),
        __obj.payroll_offu45cycle_payment_datatypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Payroll_Offu45cycle_Payment_DataTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Result_Worktag_Overrides_Data map { scalaxb.toXML[generated2.Result_Worktag_Overrides_DataType](_, Some("urn:com.workday/bsvc"), Some("Result_Worktag_Overrides_Data"), __scope, false) } getOrElse {Nil},
        __obj.Offu45cycle_Input_Data flatMap { scalaxb.toXML[generated2.Offu45cycle_Input_DataType](_, Some("urn:com.workday/bsvc"), Some("Off-cycle_Input_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Put_Payroll_Offu45cycle_Payment_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Offu45cycle_Payment_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Off-cycle_Payment_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Offu45cycle_Payment_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Off-cycle_Payment_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Off-cycle_Payment_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Payroll_Offu45cycle_Payment_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Payroll_Offu45cycle_Payment_DataType](p2, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Offu45cycle_Payment_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Offu45cycle_Payment_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Offu45cycle_Payment_Reference map { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Off-cycle_Payment_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Payroll_Offu45cycle_Payment_DataType](__obj.Payroll_Offu45cycle_Payment_Data, Some("urn:com.workday/bsvc"), Some("Payroll_Off-cycle_Payment_Data"), __scope, false))

  }

  trait DefaultGenerated2_Put_Payroll_Offu45cycle_Payment_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Offu45cycle_Payment_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Off-cycle_Payment_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Offu45cycle_Payment_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Off-cycle_Payment_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Batch_ID")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Payroll_Offu45cycle_Payment_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Offu45cycle_Payment_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Offu45cycle_Payment_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Offu45cycle_Payment_Reference map { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Off-cycle_Payment_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Batch_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Batch_ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_On_Demand_Payment_DataTypeFormat extends scalaxb.ElemNameParser[generated2.On_Demand_Payment_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("On_Demand_Payment_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.On_Demand_Payment_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Use_Supplemental_Tax_Rate")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Override_Payment_Method")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Type_ID_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_to_Balance_Account")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Take_Additional_Withholding")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Retro_Differences_in_Payment")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Load_or_Refresh_Input")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Frequency_Override")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.On_Demand_Payment_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payment_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[generated2.Tax_Frequency_Override_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.On_Demand_Payment_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Use_Supplemental_Tax_Rate map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Use_Supplemental_Tax_Rate"), __scope, false) } getOrElse {Nil},
        __obj.Override_Payment_Method map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Override_Payment_Method"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Type_ID_Reference map { scalaxb.toXML[generated2.Payment_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Payment_Type_ID_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_to_Balance_Account map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Pay_to_Balance_Account"), __scope, false) } getOrElse {Nil},
        __obj.Take_Additional_Withholding map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Take_Additional_Withholding"), __scope, false) } getOrElse {Nil},
        __obj.Include_Retro_Differences_in_Payment map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Retro_Differences_in_Payment"), __scope, false) } getOrElse {Nil},
        __obj.Load_or_Refresh_Input map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Load_or_Refresh_Input"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Frequency_Override flatMap { scalaxb.toXML[generated2.Tax_Frequency_Override_DataType](_, Some("urn:com.workday/bsvc"), Some("Tax_Frequency_Override"), __scope, false) })

  }

  trait DefaultGenerated2_Manual_Payment_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Manual_Payment_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Manual_Payment_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Manual_Payment_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Net_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Check_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Manual_Payment_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Bank_AccountObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Manual_Payment_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Third_Party_Sick_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay"), __scope, false) } getOrElse {Nil},
        __obj.Net_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Net_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Check_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Check_Number"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Reference map { scalaxb.toXML[generated2.Bank_AccountObjectType](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Offu45cycle_Input_Line_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Offu45cycle_Input_Line_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Off-cycle_Input_Line_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Offu45cycle_Input_Line_DataType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Related_Calculation_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Related_Calculation__All_ObjectType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Value")) ^^
      { case p1 ~ p2 =>
      generated2.Offu45cycle_Input_Line_DataType(p1,
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Offu45cycle_Input_Line_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.offu45cycle_input_line_datatypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Related_Calculation__All_ObjectType]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Value map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Offu45cycle_Input_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Offu45cycle_Input_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Off-cycle_Input_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Offu45cycle_Input_DataType] =
      phrase((((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earning_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Earning__All_ObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Deduction__All_ObjectType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Hours")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Rate")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Adjustment")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Reference_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Coverage_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Coverage_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Worktags_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Input_Line_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      generated2.Offu45cycle_Input_DataType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Position_ElementObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[generated2.Payroll_Input_Worktags_DataType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[generated2.Offu45cycle_Input_Line_DataType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Offu45cycle_Input_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat((Some(__obj.offu45cycle_input_datatypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[generated2.Offu45cycle_Input_DataTypeOption]](x, x.namespace, x.key, __scope, false)}).get,
        __obj.Position_Reference map { scalaxb.toXML[generated2.Position_ElementObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Hours map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Hours"), __scope, false) } getOrElse {Nil},
        __obj.Rate map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Rate"), __scope, false) } getOrElse {Nil},
        __obj.Adjustment map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Adjustment"), __scope, false) } getOrElse {Nil},
        __obj.Reference_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Reference_Date"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Coverage_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Coverage_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Coverage_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Coverage_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Worktags_Data map { scalaxb.toXML[generated2.Payroll_Input_Worktags_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Worktags_Data"), __scope, false) } getOrElse {Nil},
        __obj.Input_Line_Data flatMap { scalaxb.toXML[generated2.Offu45cycle_Input_Line_DataType](_, Some("urn:com.workday/bsvc"), Some("Input_Line_Data"), __scope, false) },
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Comment map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Comment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Result_Worktag_Overrides_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Result_Worktag_Overrides_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Result_Worktag_Overrides_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Result_Worktag_Overrides_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Region_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Location_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Cost_Center_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Job_Profile_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State__Work__Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State__Resident__Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "County__Work__Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "County__Resident__Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "City__Work__Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "City__Resident__Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "School_District__Resident__Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Reference_Number_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      generated2.Result_Worktag_Overrides_DataType(p1.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.RegionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.LocationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Cost_CenterObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Job_ProfileObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[generated2.Payroll_Local_County_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[generated2.Payroll_Local_County_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[generated2.Payroll_Local_City_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[generated2.Payroll_Local_City_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[generated2.Payroll_Local_School_District_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[generated2.Payroll_Reference_NumberObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Result_Worktag_Overrides_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Region_Reference map { scalaxb.toXML[generated2.RegionObjectType](_, Some("urn:com.workday/bsvc"), Some("Region_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Location_Reference map { scalaxb.toXML[generated2.LocationObjectType](_, Some("urn:com.workday/bsvc"), Some("Location_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Cost_Center_Reference map { scalaxb.toXML[generated2.Cost_CenterObjectType](_, Some("urn:com.workday/bsvc"), Some("Cost_Center_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Job_Profile_Reference map { scalaxb.toXML[generated2.Job_ProfileObjectType](_, Some("urn:com.workday/bsvc"), Some("Job_Profile_Reference"), __scope, false) } getOrElse {Nil},
        __obj.State__Work__Reference map { scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("State__Work__Reference"), __scope, false) } getOrElse {Nil},
        __obj.State__Resident__Reference map { scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("State__Resident__Reference"), __scope, false) } getOrElse {Nil},
        __obj.County__Work__Reference map { scalaxb.toXML[generated2.Payroll_Local_County_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("County__Work__Reference"), __scope, false) } getOrElse {Nil},
        __obj.County__Resident__Reference map { scalaxb.toXML[generated2.Payroll_Local_County_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("County__Resident__Reference"), __scope, false) } getOrElse {Nil},
        __obj.City__Work__Reference map { scalaxb.toXML[generated2.Payroll_Local_City_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("City__Work__Reference"), __scope, false) } getOrElse {Nil},
        __obj.City__Resident__Reference map { scalaxb.toXML[generated2.Payroll_Local_City_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("City__Resident__Reference"), __scope, false) } getOrElse {Nil},
        __obj.School_District__Resident__Reference map { scalaxb.toXML[generated2.Payroll_Local_School_District_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("School_District__Resident__Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Reference_Number_Reference map { scalaxb.toXML[generated2.Payroll_Reference_NumberObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Reference_Number_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Input_Worktags_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Input_Worktags_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Input_Worktags_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Input_Worktags_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Location_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Region_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Job_Profile_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Cost_Center_Reference")) ~ 
      opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Project_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.ProjectObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Project_Phase_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Project_Plan_PhaseObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Project_Task_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Project_Plan_TaskObjectType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Case_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Workers_Compensation_Code_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "County_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "City_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "School_District_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_01_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_02_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_03_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_04_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_05_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Fund_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Grant_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gift_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Program_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Business_Unit_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Object_Class_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Organization_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_06_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_07_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_08_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_09_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_10_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_11_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_12_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_13_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_14_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Worktag_15_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Local_Other_Tax_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "NI_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ARRCO-AGIRC_Category_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 =>
      generated2.Payroll_Input_Worktags_DataType(p1.headOption map { scalaxb.fromXML[generated2.LocationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.RegionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Job_ProfileObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Cost_CenterObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5,
        p6.headOption map { scalaxb.fromXML[generated2.Withholding_Order_CaseObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[generated2.Workers_Compensation_CodeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[generated2.Payroll_Local_County_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[generated2.Payroll_Local_City_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[generated2.Payroll_Local_School_District_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_01ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_02ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_03ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_04ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_05ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[generated2.FundObjectType](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[generated2.GrantObjectType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[generated2.GiftObjectType](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[generated2.ProgramObjectType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[generated2.Business_UnitObjectType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[generated2.Object_ClassObjectType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[generated2.Custom_OrganizationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_06ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_07ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_08ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_09ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_10ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_11ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_12ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_13ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_14ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[generated2.Custom_Worktag_15ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[generated2.Payroll_Other_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[generated2.NI_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[generated2.ARRCOu45AGIRC_Rubric_ValueObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Input_Worktags_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Location_Reference map { scalaxb.toXML[generated2.LocationObjectType](_, Some("urn:com.workday/bsvc"), Some("Location_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Region_Reference map { scalaxb.toXML[generated2.RegionObjectType](_, Some("urn:com.workday/bsvc"), Some("Region_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Job_Profile_Reference map { scalaxb.toXML[generated2.Job_ProfileObjectType](_, Some("urn:com.workday/bsvc"), Some("Job_Profile_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Cost_Center_Reference map { scalaxb.toXML[generated2.Cost_CenterObjectType](_, Some("urn:com.workday/bsvc"), Some("Cost_Center_Reference"), __scope, false) } getOrElse {Nil},
        __obj.payroll_input_worktags_datatypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Payroll_Input_Worktags_DataTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Withholding_Order_Case_Reference map { scalaxb.toXML[generated2.Withholding_Order_CaseObjectType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Case_Reference"), __scope, false) } getOrElse {Nil},
        __obj.State_Authority_Reference map { scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("State_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Workers_Compensation_Code_Reference map { scalaxb.toXML[generated2.Workers_Compensation_CodeObjectType](_, Some("urn:com.workday/bsvc"), Some("Workers_Compensation_Code_Reference"), __scope, false) } getOrElse {Nil},
        __obj.County_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Local_County_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("County_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.City_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Local_City_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("City_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.School_District_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Local_School_District_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("School_District_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_01_Reference map { scalaxb.toXML[generated2.Custom_Worktag_01ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_01_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_02_Reference map { scalaxb.toXML[generated2.Custom_Worktag_02ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_02_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_03_Reference map { scalaxb.toXML[generated2.Custom_Worktag_03ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_03_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_04_Reference map { scalaxb.toXML[generated2.Custom_Worktag_04ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_04_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_05_Reference map { scalaxb.toXML[generated2.Custom_Worktag_05ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_05_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Fund_Reference map { scalaxb.toXML[generated2.FundObjectType](_, Some("urn:com.workday/bsvc"), Some("Fund_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Grant_Reference map { scalaxb.toXML[generated2.GrantObjectType](_, Some("urn:com.workday/bsvc"), Some("Grant_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Gift_Reference map { scalaxb.toXML[generated2.GiftObjectType](_, Some("urn:com.workday/bsvc"), Some("Gift_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Program_Reference map { scalaxb.toXML[generated2.ProgramObjectType](_, Some("urn:com.workday/bsvc"), Some("Program_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Business_Unit_Reference map { scalaxb.toXML[generated2.Business_UnitObjectType](_, Some("urn:com.workday/bsvc"), Some("Business_Unit_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Object_Class_Reference map { scalaxb.toXML[generated2.Object_ClassObjectType](_, Some("urn:com.workday/bsvc"), Some("Object_Class_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Organization_Reference flatMap { scalaxb.toXML[generated2.Custom_OrganizationObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Organization_Reference"), __scope, false) },
        __obj.Custom_Worktag_06_Reference map { scalaxb.toXML[generated2.Custom_Worktag_06ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_06_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_07_Reference map { scalaxb.toXML[generated2.Custom_Worktag_07ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_07_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_08_Reference map { scalaxb.toXML[generated2.Custom_Worktag_08ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_08_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_09_Reference map { scalaxb.toXML[generated2.Custom_Worktag_09ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_09_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_10_Reference map { scalaxb.toXML[generated2.Custom_Worktag_10ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_10_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_11_Reference map { scalaxb.toXML[generated2.Custom_Worktag_11ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_11_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_12_Reference map { scalaxb.toXML[generated2.Custom_Worktag_12ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_12_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_13_Reference map { scalaxb.toXML[generated2.Custom_Worktag_13ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_13_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_14_Reference map { scalaxb.toXML[generated2.Custom_Worktag_14ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_14_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Worktag_15_Reference map { scalaxb.toXML[generated2.Custom_Worktag_15ObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Worktag_15_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Local_Other_Tax_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Other_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Local_Other_Tax_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.NI_Category_Reference map { scalaxb.toXML[generated2.NI_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("NI_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.ARRCOu45AGIRC_Category_Reference map { scalaxb.toXML[generated2.ARRCOu45AGIRC_Rubric_ValueObjectType](_, Some("urn:com.workday/bsvc"), Some("ARRCO-AGIRC_Category_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_History_Payment_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_History_Payment_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_History_Payment_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_History_Payment_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Batch_ID")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_ID")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_ID_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "History_Payment_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Worktag_Overrides")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Add_to_Existing_Input_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "History_Payment_Input_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      generated2.Payroll_History_Payment_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.EmployeeObjectType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[generated2.Run_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Pay_GroupObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Payroll_IDObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.History_Payment_DataType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[generated2.Result_Worktag_Overrides_DataType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[generated2.History_Payment_Input_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_History_Payment_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Batch_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Batch_ID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Payment_ID, Some("urn:com.workday/bsvc"), Some("Payment_ID"), __scope, false),
        scalaxb.toXML[generated2.EmployeeObjectType](__obj.Employee_Reference, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Period_Date, Some("urn:com.workday/bsvc"), Some("Period_Date"), __scope, false),
        __obj.Run_Category_Reference map { scalaxb.toXML[generated2.Run_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Reference map { scalaxb.toXML[generated2.Pay_GroupObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_ID_Reference map { scalaxb.toXML[generated2.Payroll_IDObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_ID_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.History_Payment_DataType](__obj.History_Payment_Data, Some("urn:com.workday/bsvc"), Some("History_Payment_Data"), __scope, false),
        __obj.Result_Worktag_Overrides map { scalaxb.toXML[generated2.Result_Worktag_Overrides_DataType](_, Some("urn:com.workday/bsvc"), Some("Result_Worktag_Overrides"), __scope, false) } getOrElse {Nil},
        __obj.Add_to_Existing_Input_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Add_to_Existing_Input_Data"), __scope, false) } getOrElse {Nil},
        __obj.History_Payment_Input_Data flatMap { scalaxb.toXML[generated2.History_Payment_Input_DataType](_, Some("urn:com.workday/bsvc"), Some("History_Payment_Input_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Put_Payroll_History_Payment_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_History_Payment_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_History_Payment_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_History_Payment_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_History_Payment_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_History_Payment_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Payroll_History_Payment_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Payroll_History_Payment_DataType](p2, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_History_Payment_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_History_Payment_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_History_Payment_Reference map { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_History_Payment_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Payroll_History_Payment_DataType](__obj.Payroll_History_Payment_Data, Some("urn:com.workday/bsvc"), Some("Payroll_History_Payment_Data"), __scope, false))

  }

  trait DefaultGenerated2_Put_Payroll_History_Payment_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_History_Payment_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_History_Payment_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_History_Payment_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_History_Payment_Reference")) ^^
      { case p1 =>
      generated2.Put_Payroll_History_Payment_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_History_Payment_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_History_Payment_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_History_Payment_Reference map { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_History_Payment_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_History_Payment_DataTypeFormat extends scalaxb.ElemNameParser[generated2.History_Payment_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("History_Payment_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.History_Payment_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Net_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Sub-Period_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Sub-Period_End_Date")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.History_Payment_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.History_Payment_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Third_Party_Sick_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Payment_Date, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false),
        __obj.Gross_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Net_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Net_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Subu45Period_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Sub-Period_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Subu45Period_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Sub-Period_End_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_History_Payment_Input_DataTypeFormat extends scalaxb.ElemNameParser[generated2.History_Payment_Input_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("History_Payment_Input_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.History_Payment_Input_DataType] =
      phrase((((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earning_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Earning__All_ObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Deduction__All_ObjectType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Input_Worktags_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Comment")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "History_Payment_Input_Line_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.History_Payment_Input_DataType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Position_ElementObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Input_Worktags_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[generated2.History_Payment_Input_Line_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.History_Payment_Input_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat((Some(__obj.history_payment_input_datatypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[generated2.History_Payment_Input_DataTypeOption]](x, x.namespace, x.key, __scope, false)}).get,
        __obj.Position_Reference map { scalaxb.toXML[generated2.Position_ElementObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Input_Worktags_Data map { scalaxb.toXML[generated2.Payroll_Input_Worktags_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Input_Worktags_Data"), __scope, false) } getOrElse {Nil},
        __obj.Comment map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Comment"), __scope, false) } getOrElse {Nil},
        __obj.History_Payment_Input_Line_Data flatMap { scalaxb.toXML[generated2.History_Payment_Input_Line_DataType](_, Some("urn:com.workday/bsvc"), Some("History_Payment_Input_Line_Data"), __scope, false) })

  }

  trait DefaultGenerated2_History_Payment_Input_Line_DataTypeFormat extends scalaxb.ElemNameParser[generated2.History_Payment_Input_Line_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("History_Payment_Input_Line_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.History_Payment_Input_Line_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Related_Calculation_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Input_Value")) ^^
      { case p1 ~ p2 =>
      generated2.History_Payment_Input_Line_DataType(scalaxb.fromXML[generated2.Related_Calculation__All_ObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.History_Payment_Input_Line_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Related_Calculation__All_ObjectType](__obj.Related_Calculation_Reference, Some("urn:com.workday/bsvc"), Some("Related_Calculation_Reference"), __scope, false),
        __obj.Input_Value map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Input_Value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Submit_Payroll_Input_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Submit_Payroll_Input_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Submit_Payroll_Input_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Submit_Payroll_Input_RequestType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Input_Data")) ^^
      { case p1 =>
      generated2.Submit_Payroll_Input_RequestType(p1 map { scalaxb.fromXML[generated2.Submit_Payroll_Input_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Submit_Payroll_Input_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Submit_Payroll_Input_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Input_Data flatMap { scalaxb.toXML[generated2.Submit_Payroll_Input_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Input_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Submit_Payroll_Input_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Submit_Payroll_Input_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Submit_Payroll_Input_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Submit_Payroll_Input_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Input_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Batch_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Source_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Ongoing_Input")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Reference")) ~ 
      (((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earning_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Earning__All_ObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Deduction__All_ObjectType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Hours")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Rate")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Adjustment")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worktag_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Input_Details_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Comment")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Match_Existing_Input")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Coverage_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Coverage_End_Date")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 =>
      generated2.Submit_Payroll_Input_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Integration_System__Audited_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[generated2.Run_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.WorkerObjectType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[generated2.Position_ElementObjectType](_, scalaxb.ElemName(node) :: stack) },
        p10,
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[generated2.Payroll_Input_Worktags_DataType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[generated2.Additional_Input_DetailsType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Last_Period_End_Date").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@Last_Period_End_Date" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Submit_Payroll_Input_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Last_Period_End_Date", _) => __obj.Last_Period_End_Date foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Last_Period_End_Date", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Submit_Payroll_Input_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Input_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Input_ID"), __scope, false) } getOrElse {Nil},
        __obj.Batch_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Batch_ID"), __scope, false) } getOrElse {Nil},
        __obj.Source_Reference map { scalaxb.toXML[generated2.Integration_System__Audited_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Source_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Ongoing_Input map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Ongoing_Input"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Start_Date, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false),
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Run_Category_Reference flatMap { scalaxb.toXML[generated2.Run_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Reference"), __scope, false) },
        scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        __obj.Position_Reference map { scalaxb.toXML[generated2.Position_ElementObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Reference"), __scope, false) } getOrElse {Nil},
        (Some(__obj.submit_payroll_input_datatypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[generated2.Submit_Payroll_Input_DataTypeOption]](x, x.namespace, x.key, __scope, false)}).get,
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Hours map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Hours"), __scope, false) } getOrElse {Nil},
        __obj.Rate map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Rate"), __scope, false) } getOrElse {Nil},
        __obj.Adjustment map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Adjustment"), __scope, false) } getOrElse {Nil},
        __obj.Worktag_Data map { scalaxb.toXML[generated2.Payroll_Input_Worktags_DataType](_, Some("urn:com.workday/bsvc"), Some("Worktag_Data"), __scope, false) } getOrElse {Nil},
        __obj.Additional_Input_Details_Data flatMap { scalaxb.toXML[generated2.Additional_Input_DetailsType](_, Some("urn:com.workday/bsvc"), Some("Additional_Input_Details_Data"), __scope, false) },
        __obj.Comment map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Comment"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Match_Existing_Input map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Match_Existing_Input"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Coverage_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Coverage_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Coverage_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Coverage_End_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Additional_Input_DetailsTypeFormat extends scalaxb.ElemNameParser[generated2.Additional_Input_DetailsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Additional_Input_DetailsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Additional_Input_DetailsType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Related_Calculation_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Input_Value")) ^^
      { case p1 ~ p2 =>
      generated2.Additional_Input_DetailsType(p1.headOption map { scalaxb.fromXML[generated2.Related_Calculation__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Additional_Input_DetailsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Related_Calculation_Reference map { scalaxb.toXML[generated2.Related_Calculation__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Related_Calculation_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Input_Value map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Input_Value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Submit_Payroll_Input_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Submit_Payroll_Input_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Submit_Payroll_Input_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Submit_Payroll_Input_ResponseType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Input_Reference")) ^^
      { case p1 =>
      generated2.Submit_Payroll_Input_ResponseType(p1 map { scalaxb.fromXML[generated2.Payroll_InputObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Submit_Payroll_Input_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Submit_Payroll_Input_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Input_Reference flatMap { scalaxb.toXML[generated2.Payroll_InputObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Input_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_History_Payments_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_History_Payments_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_History_Payments_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_History_Payments_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_History_Payments_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payment_History_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_History_Result_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_History_Payments_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_History_Payments_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payment_History_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_History_Result_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_History_PaymentTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_History_PaymentType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_History_PaymentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_History_PaymentType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_History_Payment_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_History_Payment_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_History_PaymentType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_History_Payment_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_History_PaymentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_History_Payment_Reference map { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_History_Payment_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_History_Payment_Data map { scalaxb.toXML[generated2.Payroll_History_Payment_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_History_Payment_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_History_Payment_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_History_Payment_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_History_Payment_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_History_Payment_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_History_Payment")) ^^
      { case p1 =>
      generated2.Payroll_History_Payment_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_History_PaymentType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_History_Payment_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_History_Payment flatMap { scalaxb.toXML[generated2.Payroll_History_PaymentType](_, Some("urn:com.workday/bsvc"), Some("Payroll_History_Payment"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_History_Payments_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_History_Payments_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_History_Payments_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_History_Payments_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Get_Payroll_History_Payments_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payment_History_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_History_Payment_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_History_Payments_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_History_Payments_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payment_History_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_History_Payment_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Payroll_Reporting_Code_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Payroll_Reporting_Code_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Payroll_Reporting_Code_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Payroll_Reporting_Code_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Reporting_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Reporting_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Formatted_Payroll_Reporting_Code")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Worker_Payroll_Reporting_Code_DataType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Reporting_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Payroll_Reporting_Code_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Reporting_Type_Reference map { scalaxb.toXML[generated2.Payroll_Reporting_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Reporting_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Reporting_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Reporting_Code"), __scope, false) } getOrElse {Nil},
        __obj.Formatted_Payroll_Reporting_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Formatted_Payroll_Reporting_Code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Period_Schedule_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Period_Schedule_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Period_Schedule_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Period_Schedule_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Schedule_Reference")) ^^
      { case p1 =>
      generated2.Period_Schedule_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Period_ScheduleObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Period_Schedule_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Period_Schedule_Reference flatMap { scalaxb.toXML[generated2.Period_ScheduleObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Schedule_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Period_Schedule_Request_CriteriaTypeFormat extends scalaxb.XMLFormat[generated2.Period_Schedule_Request_CriteriaType] with scalaxb.CanWriteChildNodes[generated2.Period_Schedule_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Period_Schedule_Request_CriteriaType] = seq match {
      case node: scala.xml.Node => Right(generated2.Period_Schedule_Request_CriteriaType())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: generated2.Period_Schedule_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated2_Period_Schedule_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Period_Schedule_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Period_Schedule_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Period_Schedule_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Period_Schedule_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Period_Schedule_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Period_Schedules_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Period_Schedules_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Period_Schedules_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Period_Schedules_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Period_Schedule_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Period_Schedule_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Period_Schedules_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Period_Schedule_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Period_Schedules_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Period_Schedules_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_period_schedules_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Period_Schedules_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Period_Schedule_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Period_ScheduleTypeFormat extends scalaxb.ElemNameParser[generated2.Period_ScheduleType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Period_ScheduleType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Period_ScheduleType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Schedule_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Schedule_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Period_ScheduleType(p1.headOption map { scalaxb.fromXML[generated2.Period_ScheduleObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Period_Schedule_DataType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Period_ScheduleType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Period_Schedule_Reference map { scalaxb.toXML[generated2.Period_ScheduleObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Schedule_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Period_Schedule_DataType](__obj.Period_Schedule_Data, Some("urn:com.workday/bsvc"), Some("Period_Schedule_Data"), __scope, false))

  }

  trait DefaultGenerated2_Period_Schedule_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Period_Schedule_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Period_Schedule_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Period_Schedule_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Schedule")) ^^
      { case p1 =>
      generated2.Period_Schedule_Response_DataType(p1 map { scalaxb.fromXML[generated2.Period_ScheduleType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Period_Schedule_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Period_Schedule flatMap { scalaxb.toXML[generated2.Period_ScheduleType](_, Some("urn:com.workday/bsvc"), Some("Period_Schedule"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Period_Schedules_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Period_Schedules_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Period_Schedules_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Period_Schedules_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Period_Schedules_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Period_Schedule_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Period_Schedule_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Period_Schedule_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Period_Schedule_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Period_Schedules_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Period_Schedules_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Period_Schedule_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Period_Schedule_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Period_Schedule_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Period_Schedule_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Originating_Party_WWS_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Originating_Party_WWS_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Originating_Party_WWS_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Originating_Party_WWS_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Organization_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Transaction_Tax_ID")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Email_Address_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Address_Information_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Organization_Primary_Phone_Number")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Originating_Party_WWS_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Email_Address_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Address_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Originating_Party_WWS_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Organization_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Organization_Name"), __scope, false) } getOrElse {Nil},
        __obj.Transaction_Tax_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Transaction_Tax_ID"), __scope, false) } getOrElse {Nil},
        __obj.Email_Address_Data flatMap { scalaxb.toXML[generated2.Email_Address_DataType](_, Some("urn:com.workday/bsvc"), Some("Email_Address_Data"), __scope, false) },
        __obj.Address_Information_Data map { scalaxb.toXML[generated2.Address_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Address_Information_Data"), __scope, false) } getOrElse {Nil},
        __obj.Organization_Primary_Phone_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Organization_Primary_Phone_Number"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Period_Schedule_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Period_Schedule_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Period_Schedule_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Period_Schedule_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Schedule_ID")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Schedule_Name")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Frequency_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Usage_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date_Auto-Adjust_Saturday")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date_Auto-Adjust_Sunday")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Allow_Timesheet_Changes")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Period_Schedule_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Time_Tracking_Eligibility_Rule_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      generated2.Period_Schedule_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.FrequencyObjectType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[generated2.Period_Schedule_UsageObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[generated2.Period_ScheduleObjectType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[generated2.Time_Tracking_Eligibility_RuleObjectType](_, scalaxb.ElemName(node) :: stack) },
        p10 map { scalaxb.fromXML[generated2.Period_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Period_Schedule_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Period_Schedule_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Period_Schedule_ID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Period_Schedule_Name, Some("urn:com.workday/bsvc"), Some("Period_Schedule_Name"), __scope, false),
        scalaxb.toXML[generated2.FrequencyObjectType](__obj.Frequency_Reference, Some("urn:com.workday/bsvc"), Some("Frequency_Reference"), __scope, false),
        __obj.Usage_Reference flatMap { scalaxb.toXML[generated2.Period_Schedule_UsageObjectType](_, Some("urn:com.workday/bsvc"), Some("Usage_Reference"), __scope, false) },
        __obj.Payment_Date_Autou45Adjust_Saturday map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Payment_Date_Auto-Adjust_Saturday"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Date_Autou45Adjust_Sunday map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Payment_Date_Auto-Adjust_Sunday"), __scope, false) } getOrElse {Nil},
        __obj.Allow_Timesheet_Changes map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Allow_Timesheet_Changes"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Period_Schedule_Reference map { scalaxb.toXML[generated2.Period_ScheduleObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Period_Schedule_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Time_Tracking_Eligibility_Rule_Reference flatMap { scalaxb.toXML[generated2.Time_Tracking_Eligibility_RuleObjectType](_, Some("urn:com.workday/bsvc"), Some("Time_Tracking_Eligibility_Rule_Reference"), __scope, false) },
        __obj.Period_Data flatMap { scalaxb.toXML[generated2.Period_DataType](_, Some("urn:com.workday/bsvc"), Some("Period_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Period_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Period_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Period_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Period_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Start_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payment_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_GL_Accruals")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Days_to_Accrue")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Days_in_Basis")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Accrual_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Accrual_Reversal_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Open_Time_Entry")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Lock_Time_Entry")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Unlock_for_Adjustments")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Close_Time_Entry")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Period_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Valuation_Date_Override_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_ID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      generated2.Period_DataType(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[generated2.Valuation_Date_Override_DataType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Period_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Period_Start_Date, Some("urn:com.workday/bsvc"), Some("Period_Start_Date"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Period_End_Date, Some("urn:com.workday/bsvc"), Some("Period_End_Date"), __scope, false),
        __obj.Payroll_Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payment_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_GL_Accruals map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Payroll_GL_Accruals"), __scope, false) } getOrElse {Nil},
        __obj.Days_to_Accrue map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Days_to_Accrue"), __scope, false) } getOrElse {Nil},
        __obj.Days_in_Basis map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Days_in_Basis"), __scope, false) } getOrElse {Nil},
        __obj.Accrual_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Accrual_Date"), __scope, false) } getOrElse {Nil},
        __obj.Accrual_Reversal_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Accrual_Reversal_Date"), __scope, false) } getOrElse {Nil},
        __obj.Open_Time_Entry map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Open_Time_Entry"), __scope, false) } getOrElse {Nil},
        __obj.Lock_Time_Entry map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Lock_Time_Entry"), __scope, false) } getOrElse {Nil},
        __obj.Unlock_for_Adjustments map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Unlock_for_Adjustments"), __scope, false) } getOrElse {Nil},
        __obj.Close_Time_Entry map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Close_Time_Entry"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Period_Reference map { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Period_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Valuation_Date_Override_Data flatMap { scalaxb.toXML[generated2.Valuation_Date_Override_DataType](_, Some("urn:com.workday/bsvc"), Some("Valuation_Date_Override_Data"), __scope, false) },
        __obj.Period_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Period_ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Period_Schedule_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Period_Schedule_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Period_Schedule_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Period_Schedule_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Schedule_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Schedule_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Period_Schedule_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Period_ScheduleObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Period_Schedule_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Add_Only").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Add_Only" -> _ },
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Period_Schedule_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Add_Only", _) => __obj.Add_Only foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Add_Only", x.toString, attr) }
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Period_Schedule_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Period_Schedule_Reference map { scalaxb.toXML[generated2.Period_ScheduleObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Schedule_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Period_Schedule_Data map { scalaxb.toXML[generated2.Period_Schedule_DataType](_, Some("urn:com.workday/bsvc"), Some("Period_Schedule_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Period_Schedule_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Period_Schedule_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Period_Schedule_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Period_Schedule_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Schedule_Reference")) ^^
      { case p1 =>
      generated2.Put_Period_Schedule_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Period_ScheduleObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Period_Schedule_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Period_Schedule_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Period_Schedule_Reference map { scalaxb.toXML[generated2.Period_ScheduleObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Schedule_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Receiving_Party_WWS_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Receiving_Party_WWS_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Receiving_Party_WWS_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Receiving_Party_WWS_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payee_Name")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payee_Legal_Name")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payee_Preferred_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payee_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Expense_Payee_Employee_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_ID_Type")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Corporate_Credit_Card_Account_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Market_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payee_Alternate_Name")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Email_Address_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Address_Information_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      generated2.Receiving_Party_WWS_DataType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[generated2.CountryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[generated2.Business_Entity_Alternate_Name_DataType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[generated2.Email_Address_DataType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[generated2.Address_Information_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Receiving_Party_WWS_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Payee_Name, Some("urn:com.workday/bsvc"), Some("Payee_Name"), __scope, false),
        scalaxb.toXML[String](__obj.Payee_Legal_Name, Some("urn:com.workday/bsvc"), Some("Payee_Legal_Name"), __scope, false),
        scalaxb.toXML[String](__obj.Payee_Preferred_Name, Some("urn:com.workday/bsvc"), Some("Payee_Preferred_Name"), __scope, false),
        __obj.Payee_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payee_ID"), __scope, false) } getOrElse {Nil},
        __obj.Expense_Payee_Employee_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Expense_Payee_Employee_Number"), __scope, false) } getOrElse {Nil},
        __obj.Tax_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Tax_ID"), __scope, false) } getOrElse {Nil},
        __obj.Tax_ID_Type map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Tax_ID_Type"), __scope, false) } getOrElse {Nil},
        __obj.Corporate_Credit_Card_Account_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Corporate_Credit_Card_Account_Number"), __scope, false) } getOrElse {Nil},
        __obj.Market_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Market_Code"), __scope, false) } getOrElse {Nil},
        __obj.Country_Reference map { scalaxb.toXML[generated2.CountryObjectType](_, Some("urn:com.workday/bsvc"), Some("Country_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payee_Alternate_Name flatMap { scalaxb.toXML[generated2.Business_Entity_Alternate_Name_DataType](_, Some("urn:com.workday/bsvc"), Some("Payee_Alternate_Name"), __scope, false) },
        __obj.Email_Address_Data flatMap { scalaxb.toXML[generated2.Email_Address_DataType](_, Some("urn:com.workday/bsvc"), Some("Email_Address_Data"), __scope, false) },
        __obj.Address_Information_Data flatMap { scalaxb.toXML[generated2.Address_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Address_Information_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Originating_Party_Bank_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Originating_Party_Bank_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Originating_Party_Bank_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Originating_Party_Bank_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Account_Nickname")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Account_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Account_Type_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Financial_Institution_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "IBAN")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Routing_Transit_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Identification_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Branch_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Branch_ID_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Check_Digit")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Roll_Number")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Address_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 =>
      generated2.Originating_Party_Bank_DataType(p1 map { scalaxb.fromXML[generated2.Bank_AccountObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Financial_InstitutionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[generated2.CountryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[generated2.Address_Information_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Originating_Party_Bank_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Bank_Account_Reference flatMap { scalaxb.toXML[generated2.Bank_AccountObjectType](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Reference"), __scope, false) },
        __obj.Account_Nickname map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Account_Nickname"), __scope, false) } getOrElse {Nil},
        __obj.Account_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Account_Number"), __scope, false) } getOrElse {Nil},
        __obj.Account_Type_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Account_Type_Code"), __scope, false) } getOrElse {Nil},
        __obj.Financial_Institution_Reference map { scalaxb.toXML[generated2.Financial_InstitutionObjectType](_, Some("urn:com.workday/bsvc"), Some("Financial_Institution_Reference"), __scope, false) } getOrElse {Nil},
        __obj.IBAN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("IBAN"), __scope, false) } getOrElse {Nil},
        __obj.Routing_Transit_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Routing_Transit_Number"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Identification_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Identification_Code"), __scope, false) } getOrElse {Nil},
        __obj.Branch_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Branch_Name"), __scope, false) } getOrElse {Nil},
        __obj.Branch_ID_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Branch_ID_Number"), __scope, false) } getOrElse {Nil},
        __obj.Country_Reference map { scalaxb.toXML[generated2.CountryObjectType](_, Some("urn:com.workday/bsvc"), Some("Country_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Name"), __scope, false) } getOrElse {Nil},
        __obj.Check_Digit map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Check_Digit"), __scope, false) } getOrElse {Nil},
        __obj.Roll_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Roll_Number"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Address_Data flatMap { scalaxb.toXML[generated2.Address_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Bank_Address_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Submit_Payroll_Inputs_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Submit_Payroll_Inputs_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Submit_Payroll_Inputs_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Submit_Payroll_Inputs_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Input_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Input_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Submit_Payroll_Inputs_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Input_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Submit_Payroll_Inputs_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Submit_Payroll_Inputs_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_submit_payroll_inputs_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Submit_Payroll_Inputs_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Input_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Submit_Payroll_Inputs_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Submit_Payroll_Inputs_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Submit_Payroll_Inputs_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Submit_Payroll_Inputs_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Submit_Payroll_Inputs_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Input_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Input_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Input_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Submit_Payroll_Input_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Submit_Payroll_Inputs_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Submit_Payroll_Inputs_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Input_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Input_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Input_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Submit_Payroll_Input_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Submit_Payroll_Input_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Submit_Payroll_Input_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Submit_Payroll_Input_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Submit_Payroll_Input_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Input")) ^^
      { case p1 =>
      generated2.Submit_Payroll_Input_Response_DataType(p1 map { scalaxb.fromXML[generated2.Submit_Payroll_InputType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Submit_Payroll_Input_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Input flatMap { scalaxb.toXML[generated2.Submit_Payroll_InputType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Input"), __scope, false) })

  }

  trait DefaultGenerated2_Submit_Payroll_InputTypeFormat extends scalaxb.ElemNameParser[generated2.Submit_Payroll_InputType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Submit_Payroll_InputType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Submit_Payroll_InputType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Input_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Input_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Submit_Payroll_InputType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_InputObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Submit_Payroll_Input_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Submit_Payroll_InputType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Input_Reference map { scalaxb.toXML[generated2.Payroll_InputObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Input_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Input_Data flatMap { scalaxb.toXML[generated2.Submit_Payroll_Input_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Input_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Remittance_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Federal_Marital_Status_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Federal_Allowance")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Federal_Additional_Allowance")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Work_State_Marital_Status_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Work_State_Allowance")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Work_State_Additional_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calculated_Federal_Total_Claim_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calculated_Provincial_Total_Claim_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Federal_Total_Claim_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Province_Total_Claim_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Federal_Living_Prescribed_Zone")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Province_Living_Prescribed_Zone")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Federal_Additional_Tax_Amounts")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Province_Additional_Tax_Amounts")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Federal_Annual_Deductions_Credits")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Province_Annual_Deductions_Credits")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Federal_Labour_Sponsored_Fund")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Province_Labour_Sponsored_Fund")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Detail_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Frequency_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Units")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Hours_Worked")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Total_Hours_Worked")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Net_Pay")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxes_Deductions")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Print_Payslip")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Print_Check_on_Payslip")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payslip_Distribution_Sorting_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Oregon_Business_Identification_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Rate_Type_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Work_Address_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_And_Net_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earnings_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pre_Tax_Deductions_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Post_Tax_Deductions_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Taxes_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employer_Paid_Benefits_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Absence_Plans_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payslip_Message_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 ~ p44 ~ p45 =>
      generated2.Payroll_Remittance_DataType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Withholding_StatusObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Withholding_StatusObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[generated2.Pay_Group_DetailObjectType](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[generated2.Pay_Rate_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p34 map { scalaxb.fromXML[generated2.Payroll_Remittance_Worker_DataType](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[generated2.Address_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p36 map { scalaxb.fromXML[generated2.Payroll_Remittance_Gross_And_Net_DataType](_, scalaxb.ElemName(node) :: stack) },
        p37 map { scalaxb.fromXML[generated2.Payroll_Remittance_Total_DataType](_, scalaxb.ElemName(node) :: stack) },
        p38 map { scalaxb.fromXML[generated2.Payroll_Remittance_Earnings_DataType](_, scalaxb.ElemName(node) :: stack) },
        p39 map { scalaxb.fromXML[generated2.Payroll_Remittance_Pre_Tax_Deduction_DataType](_, scalaxb.ElemName(node) :: stack) },
        p40 map { scalaxb.fromXML[generated2.Payroll_Remittance_Post_Tax_DataType](_, scalaxb.ElemName(node) :: stack) },
        p41 map { scalaxb.fromXML[generated2.Payroll_Remittance_Employee_Taxes_DataType](_, scalaxb.ElemName(node) :: stack) },
        p42 map { scalaxb.fromXML[generated2.Payroll_Remittance_Employer_Paid_Benefits_DataType](_, scalaxb.ElemName(node) :: stack) },
        p43 map { scalaxb.fromXML[generated2.Payroll_Remittance_Taxable_Wages_DataType](_, scalaxb.ElemName(node) :: stack) },
        p44 map { scalaxb.fromXML[generated2.Payroll_Remittance_Absence_PlanType](_, scalaxb.ElemName(node) :: stack) },
        p45 map { scalaxb.fromXML[generated2.Payroll_Remittance_Payslip_Message_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Period_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Period_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Federal_Marital_Status_Reference map { scalaxb.toXML[generated2.Payroll_Withholding_StatusObjectType](_, Some("urn:com.workday/bsvc"), Some("Federal_Marital_Status_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Federal_Allowance map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Federal_Allowance"), __scope, false) } getOrElse {Nil},
        __obj.Federal_Additional_Allowance map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Federal_Additional_Allowance"), __scope, false) } getOrElse {Nil},
        __obj.Work_State_Marital_Status_Reference map { scalaxb.toXML[generated2.Payroll_Withholding_StatusObjectType](_, Some("urn:com.workday/bsvc"), Some("Work_State_Marital_Status_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Work_State_Allowance map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Work_State_Allowance"), __scope, false) } getOrElse {Nil},
        __obj.Work_State_Additional_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Work_State_Additional_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Calculated_Federal_Total_Claim_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Calculated_Federal_Total_Claim_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Calculated_Provincial_Total_Claim_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Calculated_Provincial_Total_Claim_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Federal_Total_Claim_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Federal_Total_Claim_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Province_Total_Claim_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Province_Total_Claim_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Federal_Living_Prescribed_Zone map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Federal_Living_Prescribed_Zone"), __scope, false) } getOrElse {Nil},
        __obj.Province_Living_Prescribed_Zone map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Province_Living_Prescribed_Zone"), __scope, false) } getOrElse {Nil},
        __obj.Federal_Additional_Tax_Amounts map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Federal_Additional_Tax_Amounts"), __scope, false) } getOrElse {Nil},
        __obj.Province_Additional_Tax_Amounts map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Province_Additional_Tax_Amounts"), __scope, false) } getOrElse {Nil},
        __obj.Federal_Annual_Deductions_Credits map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Federal_Annual_Deductions_Credits"), __scope, false) } getOrElse {Nil},
        __obj.Province_Annual_Deductions_Credits map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Province_Annual_Deductions_Credits"), __scope, false) } getOrElse {Nil},
        __obj.Federal_Labour_Sponsored_Fund map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Federal_Labour_Sponsored_Fund"), __scope, false) } getOrElse {Nil},
        __obj.Province_Labour_Sponsored_Fund map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Province_Labour_Sponsored_Fund"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Detail_Reference map { scalaxb.toXML[generated2.Pay_Group_DetailObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Detail_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Frequency_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Frequency_Name"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Total_Units map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Total_Units"), __scope, false) } getOrElse {Nil},
        __obj.Total_Hours_Worked map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Total_Hours_Worked"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Total_Hours_Worked map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD_Total_Hours_Worked"), __scope, false) } getOrElse {Nil},
        __obj.Net_Pay map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Net_Pay"), __scope, false) } getOrElse {Nil},
        __obj.Taxes_Deductions map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxes_Deductions"), __scope, false) } getOrElse {Nil},
        __obj.Print_Payslip map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Print_Payslip"), __scope, false) } getOrElse {Nil},
        __obj.Print_Check_on_Payslip map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Print_Check_on_Payslip"), __scope, false) } getOrElse {Nil},
        __obj.Payslip_Distribution_Sorting_Criteria map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payslip_Distribution_Sorting_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Oregon_Business_Identification_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Oregon_Business_Identification_Number"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Rate_Type_Reference map { scalaxb.toXML[generated2.Pay_Rate_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Rate_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Data flatMap { scalaxb.toXML[generated2.Payroll_Remittance_Worker_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_Data"), __scope, false) },
        __obj.Work_Address_Data flatMap { scalaxb.toXML[generated2.Address_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Work_Address_Data"), __scope, false) },
        __obj.Gross_And_Net_Data flatMap { scalaxb.toXML[generated2.Payroll_Remittance_Gross_And_Net_DataType](_, Some("urn:com.workday/bsvc"), Some("Gross_And_Net_Data"), __scope, false) },
        __obj.Total_Data flatMap { scalaxb.toXML[generated2.Payroll_Remittance_Total_DataType](_, Some("urn:com.workday/bsvc"), Some("Total_Data"), __scope, false) },
        __obj.Earnings_Data flatMap { scalaxb.toXML[generated2.Payroll_Remittance_Earnings_DataType](_, Some("urn:com.workday/bsvc"), Some("Earnings_Data"), __scope, false) },
        __obj.Pre_Tax_Deductions_Data flatMap { scalaxb.toXML[generated2.Payroll_Remittance_Pre_Tax_Deduction_DataType](_, Some("urn:com.workday/bsvc"), Some("Pre_Tax_Deductions_Data"), __scope, false) },
        __obj.Post_Tax_Deductions_Data flatMap { scalaxb.toXML[generated2.Payroll_Remittance_Post_Tax_DataType](_, Some("urn:com.workday/bsvc"), Some("Post_Tax_Deductions_Data"), __scope, false) },
        __obj.Employee_Taxes_Data flatMap { scalaxb.toXML[generated2.Payroll_Remittance_Employee_Taxes_DataType](_, Some("urn:com.workday/bsvc"), Some("Employee_Taxes_Data"), __scope, false) },
        __obj.Employer_Paid_Benefits_Data flatMap { scalaxb.toXML[generated2.Payroll_Remittance_Employer_Paid_Benefits_DataType](_, Some("urn:com.workday/bsvc"), Some("Employer_Paid_Benefits_Data"), __scope, false) },
        __obj.Taxable_Wages_Data flatMap { scalaxb.toXML[generated2.Payroll_Remittance_Taxable_Wages_DataType](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages_Data"), __scope, false) },
        __obj.Absence_Plans_Data flatMap { scalaxb.toXML[generated2.Payroll_Remittance_Absence_PlanType](_, Some("urn:com.workday/bsvc"), Some("Absence_Plans_Data"), __scope, false) },
        __obj.Payslip_Message_Data flatMap { scalaxb.toXML[generated2.Payroll_Remittance_Payslip_Message_DataType](_, Some("urn:com.workday/bsvc"), Some("Payslip_Message_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Remittance_Worker_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_Worker_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_Worker_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_Worker_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Preferred_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Legal_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Legal_First_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Legal_Last_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Legal_Middle_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Date_of_Birth")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SSN")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Occupation")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Phone")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Location_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Department_Name_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Supervisory_Organization_ID")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Region_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Region_ID")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Cost_Center_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Cost_Center_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Manager_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Home_Address_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      generated2.Payroll_Remittance_Worker_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[generated2.LocationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[generated2.Supervisory_OrganizationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[generated2.RegionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[generated2.Cost_CenterObjectType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[generated2.Address_Information_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_Worker_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Employee_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Employee_ID"), __scope, false) } getOrElse {Nil},
        __obj.Employee_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Employee_Name"), __scope, false) } getOrElse {Nil},
        __obj.Preferred_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Preferred_Name"), __scope, false) } getOrElse {Nil},
        __obj.Legal_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Legal_Name"), __scope, false) } getOrElse {Nil},
        __obj.Legal_First_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Legal_First_Name"), __scope, false) } getOrElse {Nil},
        __obj.Legal_Last_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Legal_Last_Name"), __scope, false) } getOrElse {Nil},
        __obj.Legal_Middle_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Legal_Middle_Name"), __scope, false) } getOrElse {Nil},
        __obj.Date_of_Birth map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Date_of_Birth"), __scope, false) } getOrElse {Nil},
        __obj.SSN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("SSN"), __scope, false) } getOrElse {Nil},
        __obj.Company map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Company"), __scope, false) } getOrElse {Nil},
        __obj.Occupation map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Occupation"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Phone"), __scope, false) } getOrElse {Nil},
        __obj.Location_Reference map { scalaxb.toXML[generated2.LocationObjectType](_, Some("urn:com.workday/bsvc"), Some("Location_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Department_Name_Reference map { scalaxb.toXML[generated2.Supervisory_OrganizationObjectType](_, Some("urn:com.workday/bsvc"), Some("Department_Name_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Supervisory_Organization_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Supervisory_Organization_ID"), __scope, false) } getOrElse {Nil},
        __obj.Region_Reference flatMap { scalaxb.toXML[generated2.RegionObjectType](_, Some("urn:com.workday/bsvc"), Some("Region_Reference"), __scope, false) },
        __obj.Region_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Region_ID"), __scope, false) } getOrElse {Nil},
        __obj.Cost_Center_Reference flatMap { scalaxb.toXML[generated2.Cost_CenterObjectType](_, Some("urn:com.workday/bsvc"), Some("Cost_Center_Reference"), __scope, false) },
        __obj.Cost_Center_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Cost_Center_ID"), __scope, false) } getOrElse {Nil},
        __obj.Manager_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Manager_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Home_Address_Data flatMap { scalaxb.toXML[generated2.Address_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Home_Address_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Remittance_Gross_And_Net_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_Gross_And_Net_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_Gross_And_Net_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_Gross_And_Net_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Remittance_Gross_And_Net_DataType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_Gross_And_Net_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Type_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Remittance_Total_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_Total_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_Total_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_Total_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Label")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Current_Period")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Remittance_Total_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_Total_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Label map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Label"), __scope, false) } getOrElse {Nil},
        __obj.Current_Period map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Current_Period"), __scope, false) } getOrElse {Nil},
        __obj.YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Remittance_Earnings_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_Earnings_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_Earnings_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_Earnings_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "GB_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Worktags_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Amount")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Units_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Units_Value")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Units_Value")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Rate_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Rate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      generated2.Payroll_Remittance_Earnings_DataType(p1 map { scalaxb.fromXML[generated2.Pay_Component_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Payroll_WorktagObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[generated2.Payroll_CalculationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[generated2.Payroll_CalculationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_Earnings_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Pay_Component_Reference flatMap { scalaxb.toXML[generated2.Pay_Component_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Pay_Component_Reference"), __scope, false) },
        __obj.GB_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("GB_Name"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Component map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Pay_Component"), __scope, false) } getOrElse {Nil},
        __obj.Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Worktags_Reference flatMap { scalaxb.toXML[generated2.Payroll_WorktagObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Worktags_Reference"), __scope, false) },
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Units_Type_Reference flatMap { scalaxb.toXML[generated2.Payroll_CalculationObjectType](_, Some("urn:com.workday/bsvc"), Some("Units_Type_Reference"), __scope, false) },
        __obj.Units_Value map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Units_Value"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Units_Value map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD_Units_Value"), __scope, false) } getOrElse {Nil},
        __obj.Rate_Type_Reference flatMap { scalaxb.toXML[generated2.Payroll_CalculationObjectType](_, Some("urn:com.workday/bsvc"), Some("Rate_Type_Reference"), __scope, false) },
        __obj.Rate map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Rate"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Remittance_Pre_Tax_Deduction_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_Pre_Tax_Deduction_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_Pre_Tax_Deduction_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_Pre_Tax_Deduction_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "GB_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Worktags_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Payroll_Remittance_Pre_Tax_Deduction_DataType(p1 map { scalaxb.fromXML[generated2.Pay_Component_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Payroll_WorktagObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_Pre_Tax_Deduction_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Pay_Component_Reference flatMap { scalaxb.toXML[generated2.Pay_Component_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Pay_Component_Reference"), __scope, false) },
        __obj.GB_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("GB_Name"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Component map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Pay_Component"), __scope, false) } getOrElse {Nil},
        __obj.Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Worktags_Reference flatMap { scalaxb.toXML[generated2.Payroll_WorktagObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Worktags_Reference"), __scope, false) },
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Remittance_Post_Tax_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_Post_Tax_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_Post_Tax_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_Post_Tax_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "GB_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Worktags_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Payroll_Remittance_Post_Tax_DataType(p1 map { scalaxb.fromXML[generated2.Pay_Component_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Payroll_WorktagObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_Post_Tax_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Pay_Component_Reference flatMap { scalaxb.toXML[generated2.Pay_Component_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Pay_Component_Reference"), __scope, false) },
        __obj.GB_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("GB_Name"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Component map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Pay_Component"), __scope, false) } getOrElse {Nil},
        __obj.Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Worktags_Reference flatMap { scalaxb.toXML[generated2.Payroll_WorktagObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Worktags_Reference"), __scope, false) },
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Remittance_Employee_Taxes_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_Employee_Taxes_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_Employee_Taxes_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_Employee_Taxes_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "GB_Name")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Worktags_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Payroll_Remittance_Employee_Taxes_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Pay_Component_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Payroll_WorktagObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_Employee_Taxes_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.GB_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("GB_Name"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Component_Reference flatMap { scalaxb.toXML[generated2.Pay_Component_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Pay_Component_Reference"), __scope, false) },
        __obj.Pay_Component map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Pay_Component"), __scope, false) } getOrElse {Nil},
        __obj.Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Worktags_Reference flatMap { scalaxb.toXML[generated2.Payroll_WorktagObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Worktags_Reference"), __scope, false) },
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Remittance_Employer_Paid_Benefits_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_Employer_Paid_Benefits_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_Employer_Paid_Benefits_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_Employer_Paid_Benefits_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "GB_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Worktags_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Payroll_Remittance_Employer_Paid_Benefits_DataType(p1 map { scalaxb.fromXML[generated2.Pay_Component_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Payroll_WorktagObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_Employer_Paid_Benefits_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Pay_Component_Reference flatMap { scalaxb.toXML[generated2.Pay_Component_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Pay_Component_Reference"), __scope, false) },
        __obj.GB_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("GB_Name"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Component map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Pay_Component"), __scope, false) } getOrElse {Nil},
        __obj.Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Worktags_Reference flatMap { scalaxb.toXML[generated2.Payroll_WorktagObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Worktags_Reference"), __scope, false) },
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Remittance_Taxable_Wages_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_Taxable_Wages_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_Taxable_Wages_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_Taxable_Wages_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "GB_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Payroll_Remittance_Taxable_Wages_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_Taxable_Wages_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.GB_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("GB_Name"), __scope, false) } getOrElse {Nil},
        __obj.Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Name"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Remittance_Absence_PlanTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_Absence_PlanType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_Absence_PlanType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_Absence_PlanType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "GB_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Accrued")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Reduced")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Balance")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Payroll_Remittance_Absence_PlanType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_Absence_PlanType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.GB_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("GB_Name"), __scope, false) } getOrElse {Nil},
        __obj.Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Name"), __scope, false) } getOrElse {Nil},
        __obj.Accrued map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Accrued"), __scope, false) } getOrElse {Nil},
        __obj.Reduced map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Reduced"), __scope, false) } getOrElse {Nil},
        __obj.Balance map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Balance"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Remittance_Payslip_Message_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Remittance_Payslip_Message_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Remittance_Payslip_Message_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Remittance_Payslip_Message_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payslip_Message")) ^^
      { case p1 =>
      generated2.Payroll_Remittance_Payslip_Message_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Remittance_Payslip_Message_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payslip_Message map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payslip_Message"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payment_History_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payment_History_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payment_History_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payment_History_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_History_Request_Reference")) ^^
      { case p1 =>
      generated2.Payment_History_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payment_History_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payment_History_Request_Reference flatMap { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payment_History_Request_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Costing_Allocation_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Costing_Allocation_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Costing_Allocation_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Costing_Allocation_DataType] =
      phrase((((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.WorkerObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Restriction_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Position_ElementObjectType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earning_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Element_Effective_As-of_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Replace_Existing_Costing_Allocation_Intervals")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Costing_Allocation_Interval_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Costing_Allocation_DataType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Position_ElementObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Earning__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Costing_Allocation_Interval_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Costing_Allocation_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat((Some(__obj.costing_allocation_datatypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[generated2.Costing_Allocation_DataTypeOption]](x, x.namespace, x.key, __scope, false)}).get,
        __obj.Position_Reference map { scalaxb.toXML[generated2.Position_ElementObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Earning_Reference map { scalaxb.toXML[generated2.Earning__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Earning_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Position_Element_Effective_Asu45of_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Position_Element_Effective_As-of_Date"), __scope, false) } getOrElse {Nil},
        __obj.Replace_Existing_Costing_Allocation_Intervals map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Replace_Existing_Costing_Allocation_Intervals"), __scope, false) } getOrElse {Nil},
        __obj.Costing_Allocation_Interval_Data flatMap { scalaxb.toXML[generated2.Costing_Allocation_Interval_DataType](_, Some("urn:com.workday/bsvc"), Some("Costing_Allocation_Interval_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Assign_Costing_Allocation_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Assign_Costing_Allocation_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Assign_Costing_Allocation_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Assign_Costing_Allocation_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Business_Process_Parameters")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Costing_Allocation_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Assign_Costing_Allocation_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Business_Process_ParametersType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Costing_Allocation_DataType](p2, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Assign_Costing_Allocation_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Assign_Costing_Allocation_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Business_Process_Parameters map { scalaxb.toXML[generated2.Business_Process_ParametersType](_, Some("urn:com.workday/bsvc"), Some("Business_Process_Parameters"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Costing_Allocation_DataType](__obj.Costing_Allocation_Data, Some("urn:com.workday/bsvc"), Some("Costing_Allocation_Data"), __scope, false))

  }

  trait DefaultGenerated2_Assign_Costing_Allocation_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Assign_Costing_Allocation_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Assign_Costing_Allocation_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Assign_Costing_Allocation_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Assign_Costing_Allocation_Event_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Restriction_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Assign_Costing_Allocation_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Position_RestrictionsObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Assign_Costing_Allocation_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Assign_Costing_Allocation_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Assign_Costing_Allocation_Event_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Assign_Costing_Allocation_Event_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Position_Restriction_Reference map { scalaxb.toXML[generated2.Position_RestrictionsObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Restriction_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Annual_Tax_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Annual_Tax_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Annual_Tax_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Annual_Tax_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Social_Security_Tips")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Allocated_Tips")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Dependent_Care_Benefits")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Print_Workers_Tax_Documents")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-Qualified_Pension_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deferred_and_Other_Compensation_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Other_Data_Wrapper")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      generated2.Worker_Annual_Tax_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Nonu45Qualified_Pension_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[generated2.Deferred_and_Other_Compensation_DataType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[generated2.Additional_DataType](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[generated2.Other_Data_WrapperType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Annual_Tax_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Third_Party_Sick_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay"), __scope, false) } getOrElse {Nil},
        __obj.Social_Security_Tips map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Social_Security_Tips"), __scope, false) } getOrElse {Nil},
        __obj.Allocated_Tips map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Allocated_Tips"), __scope, false) } getOrElse {Nil},
        __obj.Dependent_Care_Benefits map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Dependent_Care_Benefits"), __scope, false) } getOrElse {Nil},
        __obj.Print_Workers_Tax_Documents map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Print_Workers_Tax_Documents"), __scope, false) } getOrElse {Nil},
        __obj.Nonu45Qualified_Pension_Data map { scalaxb.toXML[generated2.Nonu45Qualified_Pension_DataType](_, Some("urn:com.workday/bsvc"), Some("Non-Qualified_Pension_Data"), __scope, false) } getOrElse {Nil},
        __obj.Deferred_and_Other_Compensation_Data flatMap { scalaxb.toXML[generated2.Deferred_and_Other_Compensation_DataType](_, Some("urn:com.workday/bsvc"), Some("Deferred_and_Other_Compensation_Data"), __scope, false) },
        __obj.Additional_Data map { scalaxb.toXML[generated2.Additional_DataType](_, Some("urn:com.workday/bsvc"), Some("Additional_Data"), __scope, false) } getOrElse {Nil},
        __obj.Other_Data_Wrapper flatMap { scalaxb.toXML[generated2.Other_Data_WrapperType](_, Some("urn:com.workday/bsvc"), Some("Other_Data_Wrapper"), __scope, false) })

  }

  trait DefaultGenerated2_Nonu45Qualified_Pension_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Nonu45Qualified_Pension_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Non-Qualified_Pension_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Nonu45Qualified_Pension_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Section_457_Dist_YTD")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-section_457_Dist_YTD")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Section_457_Contrib_YTD")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-section_457_Contrib_YTD")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Nonu45Qualified_Pension_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Nonu45Qualified_Pension_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Section_457_Dist_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Section_457_Dist_YTD"), __scope, false) } getOrElse {Nil},
        __obj.Nonu45section_457_Dist_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Non-section_457_Dist_YTD"), __scope, false) } getOrElse {Nil},
        __obj.Section_457_Contrib_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Section_457_Contrib_YTD"), __scope, false) } getOrElse {Nil},
        __obj.Nonu45section_457_Contrib_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Non-section_457_Contrib_YTD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Deferred_and_Other_Compensation_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Deferred_and_Other_Compensation_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Deferred_and_Other_Compensation_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Deferred_and_Other_Compensation_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Year")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Deferred_and_Other_Compensation_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Deferred_and_Other_Compensation_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil},
        __obj.Year map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Year"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Additional_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Additional_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Additional_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Additional_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Statutory_Employee")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Retirement_Plan")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Additional_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Additional_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Statutory_Employee map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Statutory_Employee"), __scope, false) } getOrElse {Nil},
        __obj.Retirement_Plan map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Retirement_Plan"), __scope, false) } getOrElse {Nil},
        __obj.Third_Party_Sick_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Other_Data_WrapperTypeFormat extends scalaxb.ElemNameParser[generated2.Other_Data_WrapperType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Other_Data_WrapperType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Other_Data_WrapperType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Other_Data")) ^^
      { case p1 =>
      generated2.Other_Data_WrapperType(p1 map { scalaxb.fromXML[generated2.Other_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Other_Data_WrapperType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Other_Data flatMap { scalaxb.toXML[generated2.Other_DataType](_, Some("urn:com.workday/bsvc"), Some("Other_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Other_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Other_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Other_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Other_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Label")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Customer_Owned")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Plan_Number")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Other_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Other_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Label map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Label"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Customer_Owned map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Customer_Owned"), __scope, false) } getOrElse {Nil},
        __obj.Plan_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Plan_Number"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Annual_Tax_Data_WrapperTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Annual_Tax_Data_WrapperType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Annual_Tax_Data_WrapperType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Annual_Tax_Data_WrapperType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Annual_Tax_Data")) ^^
      { case p1 =>
      generated2.Worker_Annual_Tax_Data_WrapperType(p1 map { scalaxb.fromXML[generated2.Worker_Annual_Tax_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Annual_Tax_Data_WrapperType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_Annual_Tax_Data flatMap { scalaxb.toXML[generated2.Worker_Annual_Tax_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_Annual_Tax_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payslip_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payslip_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payslip_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payslip_Request_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Outsourced_Payment_Group_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Interval_Start_Date_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Interval_End_Date_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payslip_Printing_Option_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Field_And_Parameter_Criteria_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Payroll_Payslip_Request_CriteriaType(scalaxb.fromXML[generated2.Outsourced_Payment_GroupObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payslip_Printing_OptionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Field_And_Parameter_Criteria_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payslip_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Outsourced_Payment_GroupObjectType](__obj.Outsourced_Payment_Group_Reference, Some("urn:com.workday/bsvc"), Some("Outsourced_Payment_Group_Reference"), __scope, false),
        __obj.Employee_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false) },
        __obj.Payment_Interval_Start_Date_Reference map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Interval_Start_Date_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Interval_End_Date_Reference map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Interval_End_Date_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payslip_Printing_Option_Reference map { scalaxb.toXML[generated2.Payslip_Printing_OptionObjectType](_, Some("urn:com.workday/bsvc"), Some("Payslip_Printing_Option_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Field_And_Parameter_Criteria_Data map { scalaxb.toXML[generated2.Field_And_Parameter_Criteria_DataType](_, Some("urn:com.workday/bsvc"), Some("Field_And_Parameter_Criteria_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Payslips_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payslips_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payslips_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payslips_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Payslips_RequestType(scalaxb.fromXML[generated2.Payroll_Payslip_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Payslip_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payslips_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payslips_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Payroll_Payslip_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payslip_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_PayslipTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_PayslipType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_PayslipType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_PayslipType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payslip_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payslip_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_PayslipType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Payslip_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_PayslipType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payslip_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payslip_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payslip_Data map { scalaxb.toXML[generated2.Payroll_Payslip_DataType](_, Some("urn:com.workday/bsvc"), Some("Payslip_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payslip_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payslip_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payslip_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payslip_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payslip")) ^^
      { case p1 =>
      generated2.Payroll_Payslip_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_PayslipType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payslip_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payslip flatMap { scalaxb.toXML[generated2.Payroll_PayslipType](_, Some("urn:com.workday/bsvc"), Some("Payslip"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Payslips_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payslips_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payslips_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payslips_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Payroll_Payslips_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payslip_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Payslip_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_Payslip_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payslips_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payslips_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Payslip_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payslip_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Payslip_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payslip_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payslip_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payslip_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payslip_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Remittance_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Integration_Field_Override_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Off_Cycle_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Payroll_Payslip_DataType(p1.headOption map { scalaxb.fromXML[generated2.Payslip_Run_Category_DataType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Remittance_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Payslip_Payment_DataType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Document_Field_Result_DataType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Offu45Cycle_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payslip_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Run_Category_Data map { scalaxb.toXML[generated2.Payslip_Run_Category_DataType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Data"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Remittance_Data map { scalaxb.toXML[generated2.Payroll_Remittance_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Remittance_Data"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Data flatMap { scalaxb.toXML[generated2.Payslip_Payment_DataType](_, Some("urn:com.workday/bsvc"), Some("Payment_Data"), __scope, false) },
        __obj.Integration_Field_Override_Data flatMap { scalaxb.toXML[generated2.Document_Field_Result_DataType](_, Some("urn:com.workday/bsvc"), Some("Integration_Field_Override_Data"), __scope, false) },
        __obj.Off_Cycle_Data flatMap { scalaxb.toXML[generated2.Offu45Cycle_DataType](_, Some("urn:com.workday/bsvc"), Some("Off_Cycle_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payslip_Run_Category_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payslip_Run_Category_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payslip_Run_Category_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payslip_Run_Category_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Regular_Run_Category")) ^^
      { case p1 ~ p2 =>
      generated2.Payslip_Run_Category_DataType(p1.headOption map { scalaxb.fromXML[generated2.Run_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payslip_Run_Category_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Run_Category_Reference map { scalaxb.toXML[generated2.Run_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Regular_Run_Category map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Regular_Run_Category"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payslip_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payslip_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payslip_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payslip_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Originating_Contact_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Originating_Bank_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Receiving_Party_Contact_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Receiving_Party_Bank_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Payroll_Payslip_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payslip_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Include_Originating_Contact_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Originating_Contact_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_Originating_Bank_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Originating_Bank_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_Receiving_Party_Contact_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Receiving_Party_Contact_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_Receiving_Party_Bank_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Receiving_Party_Bank_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payslip_Payment_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payslip_Payment_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payslip_Payment_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payslip_Payment_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payment_Display_Order")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Method_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Account_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount_as_Text")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount_in_Pay_Group_Currency")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Check_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Reference_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Memo")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Originating_Contact_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Originating_Bank_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Receiving_Party_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Receiving_Party_Contact_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Receiving_Party_Bank_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 =>
      generated2.Payslip_Payment_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payment_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payment_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payment_MethodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Settlement_InstructionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[generated2.Originating_Party_WWS_DataType](_, scalaxb.ElemName(node) :: stack) },
        p18 map { scalaxb.fromXML[generated2.Originating_Party_Bank_DataType](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[generated2.PayeeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p20 map { scalaxb.fromXML[generated2.Receiving_Party_WWS_DataType](_, scalaxb.ElemName(node) :: stack) },
        p21 map { scalaxb.fromXML[generated2.Receiving_Party_Bank_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payslip_Payment_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payment_Display_Order map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payment_Display_Order"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Category_Reference map { scalaxb.toXML[generated2.Payment_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Payment_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Type_Reference map { scalaxb.toXML[generated2.Payment_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Payment_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Method_Reference map { scalaxb.toXML[generated2.Payment_MethodObjectType](_, Some("urn:com.workday/bsvc"), Some("Payment_Method_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Name"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Reference map { scalaxb.toXML[generated2.Settlement_InstructionObjectType](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Account_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Account_Number"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Payment_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Payment_Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Amount_as_Text map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Amount_as_Text"), __scope, false) } getOrElse {Nil},
        __obj.Amount_in_Pay_Group_Currency map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount_in_Pay_Group_Currency"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Check_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Check_Number"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Reference_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payment_Reference_Number"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Memo map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payment_Memo"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Originating_Contact_Data flatMap { scalaxb.toXML[generated2.Originating_Party_WWS_DataType](_, Some("urn:com.workday/bsvc"), Some("Originating_Contact_Data"), __scope, false) },
        __obj.Originating_Bank_Data flatMap { scalaxb.toXML[generated2.Originating_Party_Bank_DataType](_, Some("urn:com.workday/bsvc"), Some("Originating_Bank_Data"), __scope, false) },
        __obj.Receiving_Party_Reference map { scalaxb.toXML[generated2.PayeeObjectType](_, Some("urn:com.workday/bsvc"), Some("Receiving_Party_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Receiving_Party_Contact_Data flatMap { scalaxb.toXML[generated2.Receiving_Party_WWS_DataType](_, Some("urn:com.workday/bsvc"), Some("Receiving_Party_Contact_Data"), __scope, false) },
        __obj.Receiving_Party_Bank_Data flatMap { scalaxb.toXML[generated2.Receiving_Party_Bank_DataType](_, Some("urn:com.workday/bsvc"), Some("Receiving_Party_Bank_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Local_Name_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Local_Name_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Local_Name_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Local_Name_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "First_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Middle_Name")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Last_Name")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Local_Name_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Local_Last_Name_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Local_Name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Local_Name" -> _ },
        (node \ "@{urn:com.workday/bsvc}Local_Script").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Local_Script" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Local_Name_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Local_Name", _) => __obj.Local_Name foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Local_Name", x.toString, attr) }
        case ("@Local_Script", _) => __obj.Local_Script foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Local_Script", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Local_Name_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.First_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("First_Name"), __scope, false) } getOrElse {Nil},
        __obj.Middle_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Middle_Name"), __scope, false) } getOrElse {Nil},
        __obj.Last_Name flatMap { scalaxb.toXML[generated2.Local_Last_Name_DataType](_, Some("urn:com.workday/bsvc"), Some("Last_Name"), __scope, false) })

  }

  trait DefaultGenerated2_Local_Last_Name_DataTypeFormat extends scalaxb.XMLFormat[generated2.Local_Last_Name_DataType] with scalaxb.CanWriteChildNodes[generated2.Local_Last_Name_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Local_Last_Name_DataType] = seq match {
      case node: scala.xml.Node => Right(generated2.Local_Last_Name_DataType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Local_Last_Name_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Type", _) => __obj.Type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Local_Last_Name_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Costing_Allocation_Interval_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Costing_Allocation_Interval_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Costing_Allocation_Interval_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Costing_Allocation_Interval_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Costing_Interval_Update_Key")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Costing_Override_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Costing_Allocation_Detail_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Costing_Allocation_Interval_DataType(p1 map { scalaxb.fromXML[generated2.Costing_Interval_Update_KeyType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Costing_Allocation_Detail_Replacement_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Costing_Allocation_Interval_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Costing_Interval_Update_Key flatMap { scalaxb.toXML[generated2.Costing_Interval_Update_KeyType](_, Some("urn:com.workday/bsvc"), Some("Costing_Interval_Update_Key"), __scope, false) },
        __obj.Costing_Override_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Costing_Override_ID"), __scope, false) } getOrElse {Nil},
        __obj.Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Costing_Allocation_Detail_Data flatMap { scalaxb.toXML[generated2.Costing_Allocation_Detail_Replacement_DataType](_, Some("urn:com.workday/bsvc"), Some("Costing_Allocation_Detail_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Costing_Allocation_Detail_Replacement_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Costing_Allocation_Detail_Replacement_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Costing_Allocation_Detail_Replacement_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Costing_Allocation_Detail_Replacement_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Order")) ~ 
      safeRep(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Default_from_Organization_Assignment")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Costing_Override_Worktag_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Tenanted_Payroll_WorktagObjectType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Distribution_Percent")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Salary_Over_the_Cap_Costing_Allocation_Detail_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Costing_Allocation_Detail_Replacement_DataType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2,
        scalaxb.fromXML[BigDecimal](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[generated2.Salary_Over_the_Cap_Costing_Allocation_Detail_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Costing_Allocation_Detail_Replacement_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Order, Some("urn:com.workday/bsvc"), Some("Order"), __scope, false),
        __obj.costing_allocation_detail_replacement_datatypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        scalaxb.toXML[BigDecimal](__obj.Distribution_Percent, Some("urn:com.workday/bsvc"), Some("Distribution_Percent"), __scope, false),
        __obj.Salary_Over_the_Cap_Costing_Allocation_Detail_Data flatMap { scalaxb.toXML[generated2.Salary_Over_the_Cap_Costing_Allocation_Detail_DataType](_, Some("urn:com.workday/bsvc"), Some("Salary_Over_the_Cap_Costing_Allocation_Detail_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Quarterly_Worker_Tax_Data_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Quarterly_Worker_Tax_Data_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Quarterly_Worker_Tax_Data_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Quarterly_Worker_Tax_Data_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Quarterly_Worker_Tax_Data_RequestType(scalaxb.fromXML[generated2.Quarterly_Worker_Tax_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Quarterly_Worker_Tax_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Quarterly_Worker_Tax_Data_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Quarterly_Worker_Tax_Data_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Quarterly_Worker_Tax_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Quarterly_Worker_Tax_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Payee_FICA_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_FICA_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_FICA_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_FICA_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_FICA_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_Payee_FICA_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_FICA_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_FICA_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_FICA_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_FICA_Data map { scalaxb.toXML[generated2.Payroll_Payee_FICA_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_FICA_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Payee_FICA_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_FICA_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_FICA_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_FICA_ResponseType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_FICA_Reference")) ^^
      { case p1 =>
      generated2.Put_Payroll_Payee_FICA_ResponseType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_DataObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_FICA_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_FICA_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_FICA_Reference flatMap { scalaxb.toXML[generated2.Payroll_Payee_Tax_DataObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_FICA_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Quarterly_Worker_Tax_Data_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Quarterly_Worker_Tax_Data_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Quarterly_Worker_Tax_Data_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Quarterly_Worker_Tax_Data_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_YTD_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exclude_Active_Flags_for_all_Taxes_Except_SUI")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exclude_Tax_Filing_Configuration_Data_Element")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exclude_WA_IIF_Data_Element")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exclude_Annual_Data_Elements_in_Q4")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exclude_Payroll_Tax_Authority_Data_Element")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Quarterly_Worker_Tax_Data_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Quarterly_Worker_Tax_Data_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Include_YTD_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_YTD_Data"), __scope, false) } getOrElse {Nil},
        __obj.Exclude_Active_Flags_for_all_Taxes_Except_SUI map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exclude_Active_Flags_for_all_Taxes_Except_SUI"), __scope, false) } getOrElse {Nil},
        __obj.Exclude_Tax_Filing_Configuration_Data_Element map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exclude_Tax_Filing_Configuration_Data_Element"), __scope, false) } getOrElse {Nil},
        __obj.Exclude_WA_IIF_Data_Element map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exclude_WA_IIF_Data_Element"), __scope, false) } getOrElse {Nil},
        __obj.Exclude_Annual_Data_Elements_in_Q4 map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exclude_Annual_Data_Elements_in_Q4"), __scope, false) } getOrElse {Nil},
        __obj.Exclude_Payroll_Tax_Authority_Data_Element map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exclude_Payroll_Tax_Authority_Data_Element"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Quarterly_Worker_Tax_Data_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Quarterly_Worker_Tax_Data_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Quarterly_Worker_Tax_Data_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Quarterly_Worker_Tax_Data_Request_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calendar_Quarter_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Field_And_Parameter_Criteria_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Quarterly_Worker_Tax_Data_Request_CriteriaType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Calendar_QuarterObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Field_And_Parameter_Criteria_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Quarterly_Worker_Tax_Data_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.Calendar_QuarterObjectType](__obj.Calendar_Quarter_Reference, Some("urn:com.workday/bsvc"), Some("Calendar_Quarter_Reference"), __scope, false),
        __obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) },
        __obj.Field_And_Parameter_Criteria_Data map { scalaxb.toXML[generated2.Field_And_Parameter_Criteria_DataType](_, Some("urn:com.workday/bsvc"), Some("Field_And_Parameter_Criteria_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Quarterly_Worker_Tax_Data_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Quarterly_Worker_Tax_Data_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Quarterly_Worker_Tax_Data_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Quarterly_Worker_Tax_Data_ResponseType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Quarterly_Worker_Tax_Data_ResponseType(scalaxb.fromXML[generated2.Quarterly_Worker_Tax_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Quarterly_Worker_Tax_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Quarterly_Worker_Tax_Data_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Quarterly_Worker_Tax_Data_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Quarterly_Worker_Tax_Data_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Quarterly_Worker_Tax_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Quarterly_Worker_Tax_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Quarterly_Worker_Tax_Data_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Quarterly_Worker_Tax_Data_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Quarterly_Worker_Tax_Data_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Quarterly_Worker_Tax_Data_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Quarterly_Worker_Tax_Data_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Quarterly_Worker_Tax_Filing_Data")) ^^
      { case p1 =>
      generated2.Quarterly_Worker_Tax_Data_Response_DataType(p1 map { scalaxb.fromXML[generated2.Quarterly_Worker_Tax_Filing_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Quarterly_Worker_Tax_Data_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Quarterly_Worker_Tax_Filing_Data flatMap { scalaxb.toXML[generated2.Quarterly_Worker_Tax_Filing_DataType](_, Some("urn:com.workday/bsvc"), Some("Quarterly_Worker_Tax_Filing_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Quarterly_Worker_Tax_Filing_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Quarterly_Worker_Tax_Filing_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Quarterly_Worker_Tax_Filing_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Quarterly_Worker_Tax_Filing_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Kind_of_Employer_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Provides_Sick_Pay_W-2")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "California_SDI_Enabled_for_Company")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "California_VDI_Enabled_for_Company")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calendar_Quarter_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Quarter_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Quarter_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Weeks_Worked")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Hours_Worked")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Hours_Not_Worked")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Seasonal_Worker")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Medical_Coverage")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Outside_Coverage")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Corporate_Officer")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WC_Code_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WC_Rate")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WC_Exempt")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EE_Class_Code_Indicator_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Corporate_Officer_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Coverage_Type__Unemployment_Workers_Comp_Both_")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Reporting_Code_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Authority_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Document_Field_Result_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Quarterly_Deduction_Tax_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WA_IIF_Deduction_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Quarterly_Tax_Configuration_Data_Wrapper")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Annual_Tax_Data_Wrapper")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Puerto_Rico_Annual_Tax_Data_Wrapper")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Guam_Annual_Tax_Data_Wrapper")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Virgin_Islands_Annual_Tax_Data_Wrapper")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Provides_Dependent_Benefits")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 =>
      generated2.Quarterly_Worker_Tax_Filing_DataType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Calendar_QuarterObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[generated2.Workers_Compensation_CodeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[generated2.Payroll_Reporting_Code__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[generated2.Payroll_Reporting_Code__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p26 map { scalaxb.fromXML[generated2.Worker_Payroll_Reporting_Code_DataType](_, scalaxb.ElemName(node) :: stack) },
        p27 map { scalaxb.fromXML[generated2.Payroll_Tax_Authority_DataType](_, scalaxb.ElemName(node) :: stack) },
        p28 map { scalaxb.fromXML[generated2.Document_Field_Result_DataType](_, scalaxb.ElemName(node) :: stack) },
        p29 map { scalaxb.fromXML[generated2.Quarterly_Deduction_Tax_Filing_DataType](_, scalaxb.ElemName(node) :: stack) },
        p30 map { scalaxb.fromXML[generated2.WA_IIF_Deduction_DataType](_, scalaxb.ElemName(node) :: stack) },
        p31 map { scalaxb.fromXML[generated2.Quarterly_Tax_Filing_Configuration_Data_WrapperType](_, scalaxb.ElemName(node) :: stack) },
        p32 map { scalaxb.fromXML[generated2.Worker_Annual_Tax_Data_WrapperType](_, scalaxb.ElemName(node) :: stack) },
        p33 map { scalaxb.fromXML[generated2.Worker_Puerto_Rico_Annual_Tax_Data_WrapperType](_, scalaxb.ElemName(node) :: stack) },
        p34 map { scalaxb.fromXML[generated2.Worker_Guam_Annual_Tax_Data_WrapperType](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[generated2.Worker_Virgin_Islands_Annual_Tax_Data_WrapperType](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Quarterly_Worker_Tax_Filing_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Kind_of_Employer_Reference map { scalaxb.toXML[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectType](_, Some("urn:com.workday/bsvc"), Some("Kind_of_Employer_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Third_Party_Provides_Sick_Pay_Wu452 map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Provides_Sick_Pay_W-2"), __scope, false) } getOrElse {Nil},
        __obj.California_SDI_Enabled_for_Company map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("California_SDI_Enabled_for_Company"), __scope, false) } getOrElse {Nil},
        __obj.California_VDI_Enabled_for_Company map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("California_VDI_Enabled_for_Company"), __scope, false) } getOrElse {Nil},
        __obj.Calendar_Quarter_Reference map { scalaxb.toXML[generated2.Calendar_QuarterObjectType](_, Some("urn:com.workday/bsvc"), Some("Calendar_Quarter_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Quarter_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Quarter_Name"), __scope, false) } getOrElse {Nil},
        __obj.Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Quarter_Number map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Quarter_Number"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Weeks_Worked map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Weeks_Worked"), __scope, false) } getOrElse {Nil},
        __obj.Hours_Worked map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Hours_Worked"), __scope, false) } getOrElse {Nil},
        __obj.Hours_Not_Worked map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Hours_Not_Worked"), __scope, false) } getOrElse {Nil},
        __obj.Seasonal_Worker map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Seasonal_Worker"), __scope, false) } getOrElse {Nil},
        __obj.Medical_Coverage map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Medical_Coverage"), __scope, false) } getOrElse {Nil},
        __obj.Outside_Coverage map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Outside_Coverage"), __scope, false) } getOrElse {Nil},
        __obj.Corporate_Officer map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Corporate_Officer"), __scope, false) } getOrElse {Nil},
        __obj.WC_Code_Reference map { scalaxb.toXML[generated2.Workers_Compensation_CodeObjectType](_, Some("urn:com.workday/bsvc"), Some("WC_Code_Reference"), __scope, false) } getOrElse {Nil},
        __obj.WC_Rate map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WC_Rate"), __scope, false) } getOrElse {Nil},
        __obj.WC_Exempt map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("WC_Exempt"), __scope, false) } getOrElse {Nil},
        __obj.EE_Class_Code_Indicator_Reference map { scalaxb.toXML[generated2.Payroll_Reporting_Code__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("EE_Class_Code_Indicator_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Corporate_Officer_Type_Reference map { scalaxb.toXML[generated2.Payroll_Reporting_Code__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Corporate_Officer_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Coverage_Type__Unemployment_Workers_Comp_Bothu93 map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Coverage_Type__Unemployment_Workers_Comp_Both_"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Reporting_Code_Data flatMap { scalaxb.toXML[generated2.Worker_Payroll_Reporting_Code_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Reporting_Code_Data"), __scope, false) },
        __obj.Payroll_Tax_Authority_Data flatMap { scalaxb.toXML[generated2.Payroll_Tax_Authority_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Authority_Data"), __scope, false) },
        __obj.Document_Field_Result_Data flatMap { scalaxb.toXML[generated2.Document_Field_Result_DataType](_, Some("urn:com.workday/bsvc"), Some("Document_Field_Result_Data"), __scope, false) },
        __obj.Quarterly_Deduction_Tax_Data flatMap { scalaxb.toXML[generated2.Quarterly_Deduction_Tax_Filing_DataType](_, Some("urn:com.workday/bsvc"), Some("Quarterly_Deduction_Tax_Data"), __scope, false) },
        __obj.WA_IIF_Deduction_Data flatMap { scalaxb.toXML[generated2.WA_IIF_Deduction_DataType](_, Some("urn:com.workday/bsvc"), Some("WA_IIF_Deduction_Data"), __scope, false) },
        __obj.Quarterly_Tax_Configuration_Data_Wrapper flatMap { scalaxb.toXML[generated2.Quarterly_Tax_Filing_Configuration_Data_WrapperType](_, Some("urn:com.workday/bsvc"), Some("Quarterly_Tax_Configuration_Data_Wrapper"), __scope, false) },
        __obj.Worker_Annual_Tax_Data_Wrapper flatMap { scalaxb.toXML[generated2.Worker_Annual_Tax_Data_WrapperType](_, Some("urn:com.workday/bsvc"), Some("Worker_Annual_Tax_Data_Wrapper"), __scope, false) },
        __obj.Worker_Puerto_Rico_Annual_Tax_Data_Wrapper flatMap { scalaxb.toXML[generated2.Worker_Puerto_Rico_Annual_Tax_Data_WrapperType](_, Some("urn:com.workday/bsvc"), Some("Worker_Puerto_Rico_Annual_Tax_Data_Wrapper"), __scope, false) },
        __obj.Worker_Guam_Annual_Tax_Data_Wrapper flatMap { scalaxb.toXML[generated2.Worker_Guam_Annual_Tax_Data_WrapperType](_, Some("urn:com.workday/bsvc"), Some("Worker_Guam_Annual_Tax_Data_Wrapper"), __scope, false) },
        __obj.Worker_Virgin_Islands_Annual_Tax_Data_Wrapper flatMap { scalaxb.toXML[generated2.Worker_Virgin_Islands_Annual_Tax_Data_WrapperType](_, Some("urn:com.workday/bsvc"), Some("Worker_Virgin_Islands_Annual_Tax_Data_Wrapper"), __scope, false) },
        __obj.Company_Provides_Dependent_Benefits map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Company_Provides_Dependent_Benefits"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Periodic_Tax_Filing_Data_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Periodic_Tax_Filing_Data_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Periodic_Tax_Filing_Data_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Periodic_Tax_Filing_Data_Request_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Related_Companies_for_Legal_Entity")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Completed_From")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Completed_To")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Tax_Filter")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Periodic_Tax_Filing_Data_Request_CriteriaType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Pay_GroupObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[generated2.YTD_Tax_FilterType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Periodic_Tax_Filing_Data_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        __obj.Include_Related_Companies_for_Legal_Entity map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Related_Companies_for_Legal_Entity"), __scope, false) } getOrElse {Nil},
        __obj.Result_Completed_From map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Result_Completed_From"), __scope, false) } getOrElse {Nil},
        __obj.Result_Completed_To map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Result_Completed_To"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Reference flatMap { scalaxb.toXML[generated2.Pay_GroupObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Reference"), __scope, false) },
        __obj.Period_Reference flatMap { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Reference"), __scope, false) },
        __obj.Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Tax_Filter flatMap { scalaxb.toXML[generated2.YTD_Tax_FilterType](_, Some("urn:com.workday/bsvc"), Some("YTD_Tax_Filter"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Periodic_Worker_Tax_Filing_Data_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Periodic_Worker_Tax_Filing_Data_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Periodic_Worker_Tax_Filing_Data_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Periodic_Worker_Tax_Filing_Data_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Periodic_Worker_Tax_Filing_Data_RequestType(scalaxb.fromXML[generated2.Periodic_Tax_Filing_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Periodic_Tax_Filing_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Periodic_Worker_Tax_Filing_Data_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Periodic_Worker_Tax_Filing_Data_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Periodic_Tax_Filing_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Periodic_Tax_Filing_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Periodic_Tax_Filing_Data_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Periodic_Tax_Filing_Data_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Periodic_Tax_Filing_Data_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Periodic_Tax_Filing_Data_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_QTD_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_YTD_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Periodic_Tax_Filing_Data_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Periodic_Tax_Filing_Data_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Include_QTD_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_QTD_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_YTD_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_YTD_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Periodic_Worker_Tax_Filing_Data_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Periodic_Worker_Tax_Filing_Data_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Periodic_Worker_Tax_Filing_Data_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Periodic_Worker_Tax_Filing_Data_ResponseType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Periodic_Worker_Tax_Filing_Data_ResponseType(scalaxb.fromXML[generated2.Periodic_Tax_Filing_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Periodic_Tax_Filing_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Periodic_Worker_Tax_Filing_Data_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Periodic_Worker_Tax_Filing_Data_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Periodic_Worker_Tax_Filing_Data_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Periodic_Tax_Filing_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Periodic_Tax_Filing_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Periodic_Worker_Tax_Filing_Data_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Periodic_Worker_Tax_Filing_Data_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Periodic_Worker_Tax_Filing_Data_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Periodic_Worker_Tax_Filing_Data_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Periodic_Worker_Tax_Filing_Data_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Periodic_Worker_Tax_Filing_Data")) ^^
      { case p1 =>
      generated2.Periodic_Worker_Tax_Filing_Data_Response_DataType(p1 map { scalaxb.fromXML[generated2.Peridoic_Worker_Tax_Filing_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Periodic_Worker_Tax_Filing_Data_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Periodic_Worker_Tax_Filing_Data flatMap { scalaxb.toXML[generated2.Peridoic_Worker_Tax_Filing_DataType](_, Some("urn:com.workday/bsvc"), Some("Periodic_Worker_Tax_Filing_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Peridoic_Worker_Tax_Filing_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Peridoic_Worker_Tax_Filing_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Peridoic_Worker_Tax_Filing_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Peridoic_Worker_Tax_Filing_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Provides_Sick_Pay_W-2")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Result_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Peridoic_Worker_Tax_Filing_DataType(scalaxb.fromXML[generated2.WorkerObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.CompanyObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Payroll_Result_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Peridoic_Worker_Tax_Filing_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        __obj.Third_Party_Provides_Sick_Pay_Wu452 map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Provides_Sick_Pay_W-2"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Result_Data flatMap { scalaxb.toXML[generated2.Payroll_Result_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Result_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Result_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Result_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Result_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Result_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Calculation_Moment")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Result_Detail_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      generated2.Payroll_Result_DataType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Pay_GroupObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.PeriodObjectType](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[generated2.Payroll_Result_Detail_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Result_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false) } getOrElse {Nil},
        __obj.Result_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Result_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Result_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Result_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Result_Calculation_Moment map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Result_Calculation_Moment"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Reference map { scalaxb.toXML[generated2.Pay_GroupObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.PeriodObjectType](__obj.Period_Reference, Some("urn:com.workday/bsvc"), Some("Period_Reference"), __scope, false),
        __obj.Period_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Period_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Third_Party_Sick_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Result_Detail_Data flatMap { scalaxb.toXML[generated2.Payroll_Result_Detail_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Result_Detail_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Result_Detail_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Result_Detail_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Result_Detail_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Result_Detail_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employer_Paid")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Work_PSD_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Resident_PSD_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Filing_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SUI_Rate")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tip_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "QTD_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      generated2.Payroll_Result_Detail_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Payroll_CalculationObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Payroll_Tax_AuthorityObjectType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[generated2.QTD_Tax_Filing_Data_for_Periodic_WorkerType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[generated2.YTD_Tax_Filing_Data_for_Periodic_WorkerType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Result_Detail_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Employer_Paid map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Employer_Paid"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Payroll_CalculationObjectType](__obj.Deduction_Reference, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false),
        scalaxb.toXML[generated2.Payroll_Tax_AuthorityObjectType](__obj.Payroll_Tax_Authority_Reference, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Authority_Reference"), __scope, false),
        __obj.Work_PSD_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Work_PSD_Code"), __scope, false) } getOrElse {Nil},
        __obj.Resident_PSD_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Resident_PSD_Code"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Filing_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Tax_Filing_Code"), __scope, false) } getOrElse {Nil},
        __obj.SUI_Rate map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("SUI_Rate"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Tip_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tip_Wages"), __scope, false) } getOrElse {Nil},
        __obj.QTD_Data map { scalaxb.toXML[generated2.QTD_Tax_Filing_Data_for_Periodic_WorkerType](_, Some("urn:com.workday/bsvc"), Some("QTD_Data"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Data map { scalaxb.toXML[generated2.YTD_Tax_Filing_Data_for_Periodic_WorkerType](_, Some("urn:com.workday/bsvc"), Some("YTD_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_QTD_Tax_Filing_Data_for_Periodic_WorkerTypeFormat extends scalaxb.ElemNameParser[generated2.QTD_Tax_Filing_Data_for_Periodic_WorkerType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("QTD_Tax_Filing_Data_for_Periodic_WorkerType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.QTD_Tax_Filing_Data_for_Periodic_WorkerType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tip_Wages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.QTD_Tax_Filing_Data_for_Periodic_WorkerType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.QTD_Tax_Filing_Data_for_Periodic_WorkerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Tip_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tip_Wages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_YTD_Tax_Filing_Data_for_Periodic_WorkerTypeFormat extends scalaxb.ElemNameParser[generated2.YTD_Tax_Filing_Data_for_Periodic_WorkerType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("YTD_Tax_Filing_Data_for_Periodic_WorkerType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.YTD_Tax_Filing_Data_for_Periodic_WorkerType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tip_Wages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.YTD_Tax_Filing_Data_for_Periodic_WorkerType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.YTD_Tax_Filing_Data_for_Periodic_WorkerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Tip_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tip_Wages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Periodic_Company_Tax_Filing_Data_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Periodic_Company_Tax_Filing_Data_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Periodic_Company_Tax_Filing_Data_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Periodic_Company_Tax_Filing_Data_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Periodic_Company_Tax_Filing_Data_RequestType(scalaxb.fromXML[generated2.Periodic_Tax_Filing_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Periodic_Tax_Filing_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Periodic_Company_Tax_Filing_Data_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Periodic_Company_Tax_Filing_Data_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Periodic_Tax_Filing_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Periodic_Tax_Filing_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Periodic_Company_Tax_Filing_Data_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Periodic_Company_Tax_Filing_Data_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Periodic_Company_Tax_Filing_Data_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Periodic_Company_Tax_Filing_Data_ResponseType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Periodic_Company_Tax_Filing_Data_ResponseType(scalaxb.fromXML[generated2.Periodic_Tax_Filing_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Periodic_Tax_Filing_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Periodic_Company_Tax_Filing_Data_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Periodic_Company_Tax_Filing_Data_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Periodic_Company_Tax_Filing_Data_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Periodic_Tax_Filing_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Periodic_Tax_Filing_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Periodic_Company_Tax_Filing_Data_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Periodic_Company_Tax_Filing_Data_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Periodic_Company_Tax_Filing_Data_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Periodic_Company_Tax_Filing_Data_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Periodic_Company_Tax_Filing_Data_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Periodic_Company_Tax_Filing_Data")) ^^
      { case p1 =>
      generated2.Periodic_Company_Tax_Filing_Data_Response_DataType(p1 map { scalaxb.fromXML[generated2.Periodic_Company_Tax_Filing_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Periodic_Company_Tax_Filing_Data_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Periodic_Company_Tax_Filing_Data flatMap { scalaxb.toXML[generated2.Periodic_Company_Tax_Filing_DataType](_, Some("urn:com.workday/bsvc"), Some("Periodic_Company_Tax_Filing_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Periodic_Company_Tax_Filing_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Periodic_Company_Tax_Filing_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Periodic_Company_Tax_Filing_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Periodic_Company_Tax_Filing_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Provides_Sick_Pay_W-2")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Frequency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employer_Paid")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Filing_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Male_Count")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Female_Count")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Unknown_Gender_Count")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SUI_Rate")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tip_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "QTD_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 =>
      generated2.Periodic_Company_Tax_Filing_DataType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Periodic_Company_Tax_Filing_Pay_Group_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[generated2.Frequency_BehaviorObjectType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[generated2.Payroll_CalculationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[generated2.Metadata_Payroll_WorktagObjectType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[generated2.QTD_Tax_Filing_Data_for_Periodic_CompanyType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[generated2.YTD_Tax_Filing_Data_for_Periodic_CompanyType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Periodic_Company_Tax_Filing_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        __obj.Third_Party_Provides_Sick_Pay_Wu452 map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Provides_Sick_Pay_W-2"), __scope, false) } getOrElse {Nil},
        __obj.Period_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Data flatMap { scalaxb.toXML[generated2.Periodic_Company_Tax_Filing_Pay_Group_DataType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Data"), __scope, false) },
        __obj.Period_Reference flatMap { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Reference"), __scope, false) },
        __obj.Frequency_Reference flatMap { scalaxb.toXML[generated2.Frequency_BehaviorObjectType](_, Some("urn:com.workday/bsvc"), Some("Frequency_Reference"), __scope, false) },
        __obj.Third_Party_Sick_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay"), __scope, false) } getOrElse {Nil},
        __obj.Employer_Paid map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Employer_Paid"), __scope, false) } getOrElse {Nil},
        __obj.Deduction_Reference map { scalaxb.toXML[generated2.Payroll_CalculationObjectType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Tax_Authority_Reference map { scalaxb.toXML[generated2.Metadata_Payroll_WorktagObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Filing_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Tax_Filing_Code"), __scope, false) } getOrElse {Nil},
        __obj.Male_Count map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Male_Count"), __scope, false) } getOrElse {Nil},
        __obj.Female_Count map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Female_Count"), __scope, false) } getOrElse {Nil},
        __obj.Unknown_Gender_Count map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Unknown_Gender_Count"), __scope, false) } getOrElse {Nil},
        __obj.SUI_Rate map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("SUI_Rate"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Tip_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tip_Wages"), __scope, false) } getOrElse {Nil},
        __obj.QTD_Data map { scalaxb.toXML[generated2.QTD_Tax_Filing_Data_for_Periodic_CompanyType](_, Some("urn:com.workday/bsvc"), Some("QTD_Data"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Data map { scalaxb.toXML[generated2.YTD_Tax_Filing_Data_for_Periodic_CompanyType](_, Some("urn:com.workday/bsvc"), Some("YTD_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_QTD_Tax_Filing_Data_for_Periodic_CompanyTypeFormat extends scalaxb.ElemNameParser[generated2.QTD_Tax_Filing_Data_for_Periodic_CompanyType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("QTD_Tax_Filing_Data_for_Periodic_CompanyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.QTD_Tax_Filing_Data_for_Periodic_CompanyType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Wages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.QTD_Tax_Filing_Data_for_Periodic_CompanyType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.QTD_Tax_Filing_Data_for_Periodic_CompanyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Wages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_YTD_Tax_Filing_Data_for_Periodic_CompanyTypeFormat extends scalaxb.ElemNameParser[generated2.YTD_Tax_Filing_Data_for_Periodic_CompanyType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("YTD_Tax_Filing_Data_for_Periodic_CompanyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.YTD_Tax_Filing_Data_for_Periodic_CompanyType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Wages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.YTD_Tax_Filing_Data_for_Periodic_CompanyType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.YTD_Tax_Filing_Data_for_Periodic_CompanyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Wages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Quarterly_Deduction_Tax_Filing_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Quarterly_Deduction_Tax_Filing_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Quarterly_Deduction_Tax_Filing_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Quarterly_Deduction_Tax_Filing_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employer_Paid")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Work_PSD_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Resident_PSD_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Filing_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SUI_Rate")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Active_for_Month_1")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Active_for_12th_Day_Month_1")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Active_for_Month_2")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Active_for_12th_Day_Month_2")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Active_for_Month_3")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Active_for_12th_Day_Month_3")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Tax_Election_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "QTD_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      generated2.Quarterly_Deduction_Tax_Filing_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Payroll_CalculationObjectType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[generated2.Metadata_Payroll_WorktagObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[generated2.Worker_Tax_ElectionsType](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[generated2.QTD_Tax_Filing_Data_for_Quarterly_WorkerType](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[generated2.YTD_Tax_Filing_Data_for_Quarterly_WorkerType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Quarterly_Deduction_Tax_Filing_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Third_Party_Sick_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay"), __scope, false) } getOrElse {Nil},
        __obj.Employer_Paid map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Employer_Paid"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Payroll_CalculationObjectType](__obj.Deduction_Reference, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false),
        __obj.Payroll_Tax_Authority_Reference flatMap { scalaxb.toXML[generated2.Metadata_Payroll_WorktagObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Authority_Reference"), __scope, false) },
        __obj.Work_PSD_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Work_PSD_Code"), __scope, false) } getOrElse {Nil},
        __obj.Resident_PSD_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Resident_PSD_Code"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Filing_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Tax_Filing_Code"), __scope, false) } getOrElse {Nil},
        __obj.SUI_Rate map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("SUI_Rate"), __scope, false) } getOrElse {Nil},
        __obj.Active_for_Month_1 map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Active_for_Month_1"), __scope, false) } getOrElse {Nil},
        __obj.Active_for_12th_Day_Month_1 map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Active_for_12th_Day_Month_1"), __scope, false) } getOrElse {Nil},
        __obj.Active_for_Month_2 map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Active_for_Month_2"), __scope, false) } getOrElse {Nil},
        __obj.Active_for_12th_Day_Month_2 map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Active_for_12th_Day_Month_2"), __scope, false) } getOrElse {Nil},
        __obj.Active_for_Month_3 map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Active_for_Month_3"), __scope, false) } getOrElse {Nil},
        __obj.Active_for_12th_Day_Month_3 map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Active_for_12th_Day_Month_3"), __scope, false) } getOrElse {Nil},
        __obj.Employee_Tax_Election_Data flatMap { scalaxb.toXML[generated2.Worker_Tax_ElectionsType](_, Some("urn:com.workday/bsvc"), Some("Employee_Tax_Election_Data"), __scope, false) },
        __obj.QTD_Data map { scalaxb.toXML[generated2.QTD_Tax_Filing_Data_for_Quarterly_WorkerType](_, Some("urn:com.workday/bsvc"), Some("QTD_Data"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Data map { scalaxb.toXML[generated2.YTD_Tax_Filing_Data_for_Quarterly_WorkerType](_, Some("urn:com.workday/bsvc"), Some("YTD_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_YTD_Tax_Filing_Data_for_Quarterly_WorkerTypeFormat extends scalaxb.ElemNameParser[generated2.YTD_Tax_Filing_Data_for_Quarterly_WorkerType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("YTD_Tax_Filing_Data_for_Quarterly_WorkerType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.YTD_Tax_Filing_Data_for_Quarterly_WorkerType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tip_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Uncollected_Tip_Tax")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Uncollected_GTL")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "W-2_Eligible")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.YTD_Tax_Filing_Data_for_Quarterly_WorkerType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.YTD_Tax_Filing_Data_for_Quarterly_WorkerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Tip_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tip_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Uncollected_Tip_Tax map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Uncollected_Tip_Tax"), __scope, false) } getOrElse {Nil},
        __obj.Uncollected_GTL map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Uncollected_GTL"), __scope, false) } getOrElse {Nil},
        __obj.Wu452_Eligible map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("W-2_Eligible"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_QTD_Tax_Filing_Data_for_Quarterly_WorkerTypeFormat extends scalaxb.ElemNameParser[generated2.QTD_Tax_Filing_Data_for_Quarterly_WorkerType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("QTD_Tax_Filing_Data_for_Quarterly_WorkerType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.QTD_Tax_Filing_Data_for_Quarterly_WorkerType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tip_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Uncollected_Tip_Tax")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Uncollected_GTL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated2.QTD_Tax_Filing_Data_for_Quarterly_WorkerType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.QTD_Tax_Filing_Data_for_Quarterly_WorkerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Tip_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tip_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Uncollected_Tip_Tax map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Uncollected_Tip_Tax"), __scope, false) } getOrElse {Nil},
        __obj.Uncollected_GTL map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Uncollected_GTL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Quarterly_Tax_Filing_Configuration_Data_WrapperTypeFormat extends scalaxb.ElemNameParser[generated2.Quarterly_Tax_Filing_Configuration_Data_WrapperType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Quarterly_Tax_Filing_Configuration_Data_WrapperType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Quarterly_Tax_Filing_Configuration_Data_WrapperType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Quarterly_Tax_Configuration_Data")) ^^
      { case p1 =>
      generated2.Quarterly_Tax_Filing_Configuration_Data_WrapperType(p1 map { scalaxb.fromXML[generated2.Quarterly_Tax_Filing_Configuration_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Quarterly_Tax_Filing_Configuration_Data_WrapperType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Quarterly_Tax_Configuration_Data flatMap { scalaxb.toXML[generated2.Quarterly_Tax_Filing_Configuration_DataType](_, Some("urn:com.workday/bsvc"), Some("Quarterly_Tax_Configuration_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Quarterly_Tax_Filing_Configuration_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Quarterly_Tax_Filing_Configuration_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Quarterly_Tax_Filing_Configuration_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Quarterly_Tax_Filing_Configuration_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Quarterly_Tax_Category_Data")) ^^
      { case p1 =>
      generated2.Quarterly_Tax_Filing_Configuration_DataType(p1 map { scalaxb.fromXML[generated2.Quarterly_Tax_Filing_Category_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Quarterly_Tax_Filing_Configuration_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Quarterly_Tax_Category_Data flatMap { scalaxb.toXML[generated2.Quarterly_Tax_Filing_Category_DataType](_, Some("urn:com.workday/bsvc"), Some("Quarterly_Tax_Category_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Quarterly_Tax_Filing_Category_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Quarterly_Tax_Filing_Category_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Quarterly_Tax_Filing_Category_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Quarterly_Tax_Filing_Category_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Filing_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Tax_Filing_Category_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Total_Tax_Filing_Category_Amount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Quarterly_Tax_Filing_Category_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Quarterly_Tax_Filing_Category_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Third_Party_Sick_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Filing_Category_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Filing_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Total_Tax_Filing_Category_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Total_Tax_Filing_Category_Amount"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Total_Tax_Filing_Category_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD_Total_Tax_Filing_Category_Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Tax_Authority_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Tax_Authority_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Tax_Authority_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Tax_Authority_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Attribute")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Value")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Tax_Authority_DataType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Tax_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Tax_Authority_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Tax_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Tax_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Attribute map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Attribute"), __scope, false) } getOrElse {Nil},
        __obj.Value map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_FICA_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_FICA_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_FICA_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_FICA_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "All_Positions")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_As_Of")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Apply_To_Worker")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Medicare_Exempt_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "OASDI_Exempt_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated2.Payroll_Payee_FICA_DataType(scalaxb.fromXML[generated2.WorkerObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Position_ElementObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Medicare_Exempt_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[generated2.OASDI_Exempt_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_FICA_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        __obj.Position_Reference map { scalaxb.toXML[generated2.Position_ElementObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Reference"), __scope, false) } getOrElse {Nil},
        __obj.All_Positions map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("All_Positions"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_As_Of, Some("urn:com.workday/bsvc"), Some("Effective_As_Of"), __scope, false),
        __obj.Apply_To_Worker map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Apply_To_Worker"), __scope, false) } getOrElse {Nil},
        __obj.Medicare_Exempt_Data flatMap { scalaxb.toXML[generated2.Medicare_Exempt_DataType](_, Some("urn:com.workday/bsvc"), Some("Medicare_Exempt_Data"), __scope, false) },
        __obj.OASDI_Exempt_Data flatMap { scalaxb.toXML[generated2.OASDI_Exempt_DataType](_, Some("urn:com.workday/bsvc"), Some("OASDI_Exempt_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Valuation_Date_Override_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Valuation_Date_Override_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Valuation_Date_Override_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Valuation_Date_Override_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Settlement_Valuation_Date")) ^^
      { case p1 ~ p2 =>
      generated2.Valuation_Date_Override_DataType(scalaxb.fromXML[generated2.CountryObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Valuation_Date_Override_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CountryObjectType](__obj.Country_Reference, Some("urn:com.workday/bsvc"), Some("Country_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Payroll_Settlement_Valuation_Date, Some("urn:com.workday/bsvc"), Some("Payroll_Settlement_Valuation_Date"), __scope, false))

  }

  trait DefaultGenerated2_Payroll_Payee_PT1_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_PT1_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_PT1_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_PT1_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_PT1_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_PT1_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_PT1ObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_PT1_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_PT1_Reference flatMap { scalaxb.toXML[generated2.Payroll_Payee_PT1ObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_PT1_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_PT1_Request_CriteriaTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Payee_PT1_Request_CriteriaType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Payee_PT1_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Payee_PT1_Request_CriteriaType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Payee_PT1_Request_CriteriaType())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_PT1_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated2_Payroll_Payee_PT1_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_PT1_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_PT1_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_PT1_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_PT1_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_PT1_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Payee_PT1s_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_PT1s_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_PT1s_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_PT1s_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_PT1_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_PT1_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Payee_PT1s_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_PT1_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_PT1s_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_PT1s_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_payee_pt1s_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Payee_PT1s_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payee_PT1_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_PT1TypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_PT1Type] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_PT1Type")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_PT1Type] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_PT1_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_PT1_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Payee_PT1Type(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_PT1ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Payee_PT1_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_PT1Type, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_PT1_Reference map { scalaxb.toXML[generated2.Payroll_Payee_PT1ObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_PT1_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Payee_PT1_Data flatMap { scalaxb.toXML[generated2.Payroll_Payee_PT1_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_PT1_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_PT1_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_PT1_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_PT1_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_PT1_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_PT1")) ^^
      { case p1 =>
      generated2.Payroll_Payee_PT1_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_PT1Type](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_PT1_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_PT1 flatMap { scalaxb.toXML[generated2.Payroll_Payee_PT1Type](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_PT1"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Payee_PT1s_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_PT1s_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_PT1s_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_PT1s_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Payroll_Payee_PT1s_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_PT1_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_PT1_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_PT1_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_PT1_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_PT1s_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_PT1s_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Payee_PT1_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Payee_PT1_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payee_PT1_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Payee_PT1_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_PT1_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_PT1_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_PT1_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_PT1_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_PT1_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_As_Of")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_State_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Basic_Personal_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Child_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Age_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Age_Amount_Supplement")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Senior_Supplementary_Amount_for_Withholding")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount_for_Workers_65_or_Older")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pension_Income_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tuition__Education_and_Textbook_Amounts")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Disability_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Spouse_or_Common-law_Partner_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Spouse_or_Common-law_Partner_Amount_Supplement")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_for_Living_in_a_Prescribed_Zone")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount_for_an_Eligible_Dependant")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount_for_an_Eligible_Dependant_Supplement")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Caregiver_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount_for_Infirm_Dependants_Age_18_or_Older")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amounts_Transferred_from_your_Spouse_or_Common-law_Partner")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amounts_Transferred_from_a_Dependant")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Manitoba_Family_Tax_Benefit_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Income_less_than_Total_Claim_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "More_than_One_Employer_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Dependents_Under_Age_19")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Disabled_Dependents")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_from_Health_Contribution")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Last_Updated")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 =>
      generated2.Payroll_Payee_PT1_DataType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_PT1ObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.CompanyObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.WorkerObjectType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_PT1_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_PT1_Reference map { scalaxb.toXML[generated2.Payroll_Payee_PT1ObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_PT1_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_As_Of, Some("urn:com.workday/bsvc"), Some("Effective_As_Of"), __scope, false),
        scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](__obj.Payroll_State_Authority_Reference, Some("urn:com.workday/bsvc"), Some("Payroll_State_Authority_Reference"), __scope, false),
        __obj.Basic_Personal_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Basic_Personal_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Child_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Child_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Age_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Age_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Age_Amount_Supplement map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Age_Amount_Supplement"), __scope, false) } getOrElse {Nil},
        __obj.Senior_Supplementary_Amount_for_Withholding map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Senior_Supplementary_Amount_for_Withholding"), __scope, false) } getOrElse {Nil},
        __obj.Amount_for_Workers_65_or_Older map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount_for_Workers_65_or_Older"), __scope, false) } getOrElse {Nil},
        __obj.Pension_Income_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Pension_Income_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Tuition__Education_and_Textbook_Amounts map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tuition__Education_and_Textbook_Amounts"), __scope, false) } getOrElse {Nil},
        __obj.Disability_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Disability_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Spouse_or_Commonu45law_Partner_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Spouse_or_Common-law_Partner_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Spouse_or_Commonu45law_Partner_Amount_Supplement map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Spouse_or_Common-law_Partner_Amount_Supplement"), __scope, false) } getOrElse {Nil},
        __obj.Additional_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Additional_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Deduction_for_Living_in_a_Prescribed_Zone map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Deduction_for_Living_in_a_Prescribed_Zone"), __scope, false) } getOrElse {Nil},
        __obj.Amount_for_an_Eligible_Dependant map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount_for_an_Eligible_Dependant"), __scope, false) } getOrElse {Nil},
        __obj.Amount_for_an_Eligible_Dependant_Supplement map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount_for_an_Eligible_Dependant_Supplement"), __scope, false) } getOrElse {Nil},
        __obj.Caregiver_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Caregiver_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Amount_for_Infirm_Dependants_Age_18_or_Older map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount_for_Infirm_Dependants_Age_18_or_Older"), __scope, false) } getOrElse {Nil},
        __obj.Amounts_Transferred_from_your_Spouse_or_Commonu45law_Partner map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amounts_Transferred_from_your_Spouse_or_Common-law_Partner"), __scope, false) } getOrElse {Nil},
        __obj.Amounts_Transferred_from_a_Dependant map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amounts_Transferred_from_a_Dependant"), __scope, false) } getOrElse {Nil},
        __obj.Manitoba_Family_Tax_Benefit_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Manitoba_Family_Tax_Benefit_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Total_Income_less_than_Total_Claim_Amount map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Total_Income_less_than_Total_Claim_Amount"), __scope, false) } getOrElse {Nil},
        __obj.More_than_One_Employer_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("More_than_One_Employer_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Dependents_Under_Age_19 map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Dependents_Under_Age_19"), __scope, false) } getOrElse {Nil},
        __obj.Disabled_Dependents map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Disabled_Dependents"), __scope, false) } getOrElse {Nil},
        __obj.Exempt map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt"), __scope, false) } getOrElse {Nil},
        __obj.Exempt_from_Health_Contribution map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt_from_Health_Contribution"), __scope, false) } getOrElse {Nil},
        __obj.Last_Updated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Last_Updated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Payee_PT1_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_PT1_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_PT1_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_PT1_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_PT1_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_Payee_PT1_RequestType(scalaxb.fromXML[generated2.Payroll_Payee_PT1_DataType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_PT1_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_PT1_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.Payroll_Payee_PT1_DataType](__obj.Payroll_Payee_PT1_Data, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_PT1_Data"), __scope, false))

  }

  trait DefaultGenerated2_Put_Payroll_Payee_PT1_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_PT1_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_PT1_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_PT1_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_PT1_Reference")) ^^
      { case p1 =>
      generated2.Put_Payroll_Payee_PT1_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_PT1ObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_PT1_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_PT1_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_PT1_Reference map { scalaxb.toXML[generated2.Payroll_Payee_PT1ObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_PT1_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Data_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Data_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Data_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Data_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Data_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_Tax_Data_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_DataObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Data_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_Tax_Data_Reference flatMap { scalaxb.toXML[generated2.Payroll_Payee_Tax_DataObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Data_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Data_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Data_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Data_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Data_Request_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_As_Of")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Payee_Tax_Data_Request_CriteriaType(p1 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Position_ElementObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Data_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) },
        __obj.Position_Reference flatMap { scalaxb.toXML[generated2.Position_ElementObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Reference"), __scope, false) },
        __obj.Effective_As_Of map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_As_Of"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Data_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Data_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Data_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Data_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_Tax_Data_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Data_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Payee_FICAs_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_FICAs_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_FICAs_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_FICAs_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_Tax_Data_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_Tax_Data_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Payee_FICAs_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_FICAs_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_FICAs_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_payee_ficas_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Payee_FICAs_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Data_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_FICA_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Payee_Tax_DataType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_DataObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Payee_FICA_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_Tax_Data_Reference map { scalaxb.toXML[generated2.Payroll_Payee_Tax_DataObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Data_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Payee_FICA_Data flatMap { scalaxb.toXML[generated2.Payroll_Payee_FICA_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_FICA_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Data_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Data_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Data_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Data_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Data")) ^^
      { case p1 =>
      generated2.Payroll_Payee_Tax_Data_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Data_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_Tax_Data flatMap { scalaxb.toXML[generated2.Payroll_Payee_Tax_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Payee_FICAs_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_FICAs_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_FICAs_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_FICAs_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Payroll_Payee_FICAs_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Data_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Data_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Data_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_FICAs_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_FICAs_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Data_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Data_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Data_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Offu45cycle_Result_Override_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Offu45cycle_Result_Override_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Off-cycle_Result_Override_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Offu45cycle_Result_Override_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Off-cycle_Payment_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Offu45cycle_Result_Override_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Offu45cycle_Result_Override_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Offu45cycle_Payment_Reference flatMap { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Off-cycle_Payment_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Offu45cycle_Result_Override_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Offu45cycle_Result_Override_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Off-cycle_Result_Override_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Offu45cycle_Result_Override_Request_CriteriaType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_ID")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Batch_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Reason_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Payroll_Offu45cycle_Result_Override_Request_CriteriaType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.EmployeeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Run_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Pay_GroupObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[generated2.Payroll_Action_ReasonObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Offu45cycle_Result_Override_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payment_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payment_ID"), __scope, false) } getOrElse {Nil},
        __obj.Employee_Reference flatMap { scalaxb.toXML[generated2.EmployeeObjectType](_, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false) },
        __obj.Period_Reference flatMap { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Reference"), __scope, false) },
        __obj.Run_Category_Reference flatMap { scalaxb.toXML[generated2.Run_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Reference"), __scope, false) },
        __obj.Pay_Group_Reference flatMap { scalaxb.toXML[generated2.Pay_GroupObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Reference"), __scope, false) },
        __obj.Batch_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Batch_ID"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false) } getOrElse {Nil},
        __obj.Reason_Reference flatMap { scalaxb.toXML[generated2.Payroll_Action_ReasonObjectType](_, Some("urn:com.workday/bsvc"), Some("Reason_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Offu45cycle_Payments_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Offu45cycle_Payments_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Off-cycle_Payments_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Offu45cycle_Payments_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_Override_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_Override_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ^^
      { case p1 ~ p2 =>
      generated2.Get_Payroll_Offu45cycle_Payments_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Offu45cycle_Payments_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Offu45cycle_Payments_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_offu45cycle_payments_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Offu45cycle_Payments_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Offu45cycle_PaymentTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Offu45cycle_PaymentType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Off-cycle_PaymentType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Offu45cycle_PaymentType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Off-cycle_Result_Override_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Off-cycle_Payment_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Offu45cycle_PaymentType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Payment_Response_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Offu45cycle_PaymentType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Offu45cycle_Result_Override_Reference map { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Off-cycle_Result_Override_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Offu45cycle_Payment_Data flatMap { scalaxb.toXML[generated2.Payroll_Offu45cycle_Payment_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Off-cycle_Payment_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Offu45cycle_Result_Override_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Offu45cycle_Result_Override_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Off-cycle_Result_Override_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Offu45cycle_Result_Override_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Off-cycle_Result_Override")) ^^
      { case p1 =>
      generated2.Payroll_Offu45cycle_Result_Override_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_PaymentType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Offu45cycle_Result_Override_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Offu45cycle_Result_Override flatMap { scalaxb.toXML[generated2.Payroll_Offu45cycle_PaymentType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Off-cycle_Result_Override"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Offu45cycle_Payments_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Offu45cycle_Payments_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Off-cycle_Payments_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Offu45cycle_Payments_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Payroll_Offu45cycle_Payments_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_Override_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_Override_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_Override_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Offu45cycle_Payments_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Offu45cycle_Payments_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_Override_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_Override_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_Override_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Company_Payment_Dates_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Company_Payment_Dates_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Company_Payment_Dates_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Company_Payment_Dates_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ^^
      { case p1 ~ p2 =>
      generated2.Get_Company_Payment_Dates_RequestType(scalaxb.fromXML[generated2.Company_Payment_Dates_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Company_Payment_Dates_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Company_Payment_Dates_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Company_Payment_Dates_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Company_Payment_Dates_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Company_Payment_Dates_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Company_Payment_Dates_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Company_Payment_Dates_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Get_Company_Payment_Dates_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Company_Payment_Dates_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Company_Payment_Dates_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Company_Payment_Dates_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Company_Payment_Dates_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_Criteria map { scalaxb.toXML[generated2.Company_Payment_Dates_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Company_Payment_Dates_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Company_Payment_Dates_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Company_Payment_Dates_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Company_Payment_Dates_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Company_Payment_Dates_Request_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Related_Companies_for_Legal_Entity")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Completed_From")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Completed_To")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Company_Payment_Dates_Request_CriteriaType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Company_Payment_Dates_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        __obj.Include_Related_Companies_for_Legal_Entity map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Related_Companies_for_Legal_Entity"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Result_Completed_From, Some("urn:com.workday/bsvc"), Some("Result_Completed_From"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Result_Completed_To, Some("urn:com.workday/bsvc"), Some("Result_Completed_To"), __scope, false))

  }

  trait DefaultGenerated2_Company_Payment_Dates_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Company_Payment_Dates_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Company_Payment_Dates_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Company_Payment_Dates_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ^^
      { case p1 ~ p2 =>
      generated2.Company_Payment_Dates_DataType(p1.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Company_Payment_Dates_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Company_Payment_Dates_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Company_Payment_Dates_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Company_Payment_Dates_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Company_Payment_Dates_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Payment_Dates_Data")) ^^
      { case p1 =>
      generated2.Company_Payment_Dates_Response_DataType(p1 map { scalaxb.fromXML[generated2.Company_Payment_Dates_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Company_Payment_Dates_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Company_Payment_Dates_Data flatMap { scalaxb.toXML[generated2.Company_Payment_Dates_DataType](_, Some("urn:com.workday/bsvc"), Some("Company_Payment_Dates_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_TD1_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_TD1_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_TD1_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_TD1_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "TD1_Election_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_TD1_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_T1ObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_TD1_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.TD1_Election_Reference flatMap { scalaxb.toXML[generated2.Payroll_Payee_T1ObjectType](_, Some("urn:com.workday/bsvc"), Some("TD1_Election_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_TD1_Request_CriteriaTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Payee_TD1_Request_CriteriaType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Payee_TD1_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Payee_TD1_Request_CriteriaType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Payee_TD1_Request_CriteriaType())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_TD1_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated2_Payroll_Payee_TD1_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_TD1_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_TD1_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_TD1_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_TD1_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_TD1_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Payee_TD1s_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_TD1s_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_TD1s_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_TD1s_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_TD1_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_TD1_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Payee_TD1s_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_TD1_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_TD1s_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_TD1s_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_payee_td1s_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Payee_TD1s_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payee_TD1_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_TD1TypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_TD1Type] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_TD1Type")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_TD1Type] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_TD1_Data")) ^^
      { case p1 =>
      generated2.Payroll_Payee_TD1Type(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_TD1_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_TD1Type, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_TD1_Data flatMap { scalaxb.toXML[generated2.Payroll_Payee_TD1_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_TD1_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_TD1_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_TD1_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_TD1_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_TD1_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_TD1")) ^^
      { case p1 =>
      generated2.Payroll_Payee_TD1_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_TD1Type](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_TD1_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_TD1 flatMap { scalaxb.toXML[generated2.Payroll_Payee_TD1Type](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_TD1"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Payee_TD1s_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_TD1s_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_TD1s_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_TD1s_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Payroll_Payee_TD1s_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_TD1_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_TD1_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_TD1_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_TD1_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_TD1s_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_TD1s_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Payee_TD1_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Payee_TD1_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payee_TD1_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Payee_TD1_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_TD1_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_TD1_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_TD1_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_TD1_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_TD1_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_As_Of")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Basic_Personal_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Child_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Age_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pension_Income_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tuition__Education_and_Textbook_Amounts")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Disability_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Spouse_or_Common-law_Partner_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount_for_an_Eligible_Dependant")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Caregiver_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount_for_Infirm_Dependants_Age_18_or_Older")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amounts_Transferred_from_your_Spouse_or_Common-law_Partner")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amounts_Transferred_from_a_Dependant")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Income_less_than_Total_Claim_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "More_than_One_Employer_or_Payer_at_the_Same_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_for_Living_in_a_Prescribed_Zone")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ESS_Electronic_Signature_Confirmation")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Data_Event_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Last_Updated")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Last_Updated_By_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 =>
      generated2.Payroll_Payee_TD1_DataType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_T1ObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.CompanyObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.WorkerObjectType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_TD1_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_TD1_Reference map { scalaxb.toXML[generated2.Payroll_Payee_T1ObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_TD1_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_As_Of, Some("urn:com.workday/bsvc"), Some("Effective_As_Of"), __scope, false),
        __obj.Basic_Personal_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Basic_Personal_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Child_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Child_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Age_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Age_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Pension_Income_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Pension_Income_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Tuition__Education_and_Textbook_Amounts map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tuition__Education_and_Textbook_Amounts"), __scope, false) } getOrElse {Nil},
        __obj.Disability_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Disability_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Spouse_or_Commonu45law_Partner_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Spouse_or_Common-law_Partner_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Amount_for_an_Eligible_Dependant map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount_for_an_Eligible_Dependant"), __scope, false) } getOrElse {Nil},
        __obj.Caregiver_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Caregiver_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Amount_for_Infirm_Dependants_Age_18_or_Older map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount_for_Infirm_Dependants_Age_18_or_Older"), __scope, false) } getOrElse {Nil},
        __obj.Amounts_Transferred_from_your_Spouse_or_Commonu45law_Partner map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amounts_Transferred_from_your_Spouse_or_Common-law_Partner"), __scope, false) } getOrElse {Nil},
        __obj.Amounts_Transferred_from_a_Dependant map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amounts_Transferred_from_a_Dependant"), __scope, false) } getOrElse {Nil},
        __obj.Total_Income_less_than_Total_Claim_Amount map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Total_Income_less_than_Total_Claim_Amount"), __scope, false) } getOrElse {Nil},
        __obj.More_than_One_Employer_or_Payer_at_the_Same_Time map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("More_than_One_Employer_or_Payer_at_the_Same_Time"), __scope, false) } getOrElse {Nil},
        __obj.Deduction_for_Living_in_a_Prescribed_Zone map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Deduction_for_Living_in_a_Prescribed_Zone"), __scope, false) } getOrElse {Nil},
        __obj.Additional_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Additional_Amount"), __scope, false) } getOrElse {Nil},
        __obj.ESS_Electronic_Signature_Confirmation map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("ESS_Electronic_Signature_Confirmation"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Payee_Tax_Data_Event_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Data_Event_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Last_Updated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Last_Updated"), __scope, false) } getOrElse {Nil},
        __obj.Last_Updated_By_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Last_Updated_By_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Payee_TD1_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_TD1_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_TD1_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_TD1_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_TD1_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_Payee_TD1_RequestType(scalaxb.fromXML[generated2.Payroll_Payee_TD1_DataType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_TD1_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_TD1_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.Payroll_Payee_TD1_DataType](__obj.Payroll_Payee_TD1_Data, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_TD1_Data"), __scope, false))

  }

  trait DefaultGenerated2_Put_Payroll_Payee_T1_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_T1_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_T1_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_T1_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_T1_Reference")) ^^
      { case p1 =>
      generated2.Put_Payroll_Payee_T1_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_T1ObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_T1_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_T1_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_T1_Reference map { scalaxb.toXML[generated2.Payroll_Payee_T1ObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_T1_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Result_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Result_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Result_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Result_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Result_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Result_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Result_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Result_Reference flatMap { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Result_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Canadian_Record_of_Employment_Data_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Canadian_Record_of_Employment_Data_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Canadian_Record_of_Employment_Data_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Canadian_Record_of_Employment_Data_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Canadian_Record_of_Employment_Data_Reference")) ^^
      { case p1 =>
      generated2.Canadian_Record_of_Employment_Data_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Canadian_Record_of_Employment_Data_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Canadian_Record_of_Employment_Data_Reference flatMap { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Canadian_Record_of_Employment_Data_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Canadian_Record_of_Employment_Data_Request_CriteriaTypeFormat extends scalaxb.XMLFormat[generated2.Canadian_Record_of_Employment_Data_Request_CriteriaType] with scalaxb.CanWriteChildNodes[generated2.Canadian_Record_of_Employment_Data_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Canadian_Record_of_Employment_Data_Request_CriteriaType] = seq match {
      case node: scala.xml.Node => Right(generated2.Canadian_Record_of_Employment_Data_Request_CriteriaType())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: generated2.Canadian_Record_of_Employment_Data_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated2_Canadian_Record_of_Employment_Data_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Canadian_Record_of_Employment_Data_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Canadian_Record_of_Employment_Data_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Canadian_Record_of_Employment_Data_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Canadian_Record_of_Employment_Data_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Canadian_Record_of_Employment_Data_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Canadian_Record_of_Employment_Data_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Canadian_Record_of_Employment_Data_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Canadian_Record_of_Employment_Data_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Canadian_Record_of_Employment_Data_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Canadian_Record_of_Employment_Data_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Canadian_Record_of_Employment_Data_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Canadian_Record_of_Employment_Data_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Canadian_Record_of_Employment_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Canadian_Record_of_Employment_Data_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Canadian_Record_of_Employment_Data_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_canadian_record_of_employment_data_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Canadian_Record_of_Employment_Data_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Canadian_Record_of_Employment_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Canadian_Record_of_Employment_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Canadian_Record_of_Employment_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Canadian_Record_of_Employment_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Canadian_Record_of_Employment_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Printing_Language")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Issue_Type")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Data_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Serial_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_ID")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employer_Payroll_Reference_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Organization_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Folder_CD")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Period_Type")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Social_Insurance_Number")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Address_Line_1")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Address_Line_2")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Address_Line_3")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Postal_Code")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Legal_First_Name")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Legal_Last_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Legal_Middle_Name")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "First_Day_Worked")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Last_Day_For_Which_Paid")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Final_Pay_Period_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Occupation")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Expected_Recall_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Expected_Date_of_Return")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Insurable_Hours")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Insurable_Earnings")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Insurable_Earnings_By_Period_Data")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Reason_Contact_Area_Code_Number")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Reason_Code_for_ROE_Reason")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Reason_Phone_Extension_Number")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Reason_Contact_First_Name")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Reason_Contact_Last_Name")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Reason_Contact_Phone_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Vacation_Pay_Amount")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Vacation_Pay_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Statutory_Holiday_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Other_Monies_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Comments")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Special_Payment_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Preferred_User_Language")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 =>
      generated2.Canadian_Record_of_Employment_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p11, scalaxb.ElemName(node) :: stack),
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p15, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p16, scalaxb.ElemName(node) :: stack),
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p18, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p19, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p20, scalaxb.ElemName(node) :: stack),
        p21.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p24, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p25, scalaxb.ElemName(node) :: stack),
        p26 map { scalaxb.fromXML[generated2.Canadian_Record_of_Employment_Insurable_Earnings_By_Period_DataType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p27, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p28, scalaxb.ElemName(node) :: stack),
        p29.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p30, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p31, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p32, scalaxb.ElemName(node) :: stack),
        p33.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p34 map { scalaxb.fromXML[generated2.ROE_Vacation_Pay_DataType](_, scalaxb.ElemName(node) :: stack) },
        p35 map { scalaxb.fromXML[generated2.Canadian_Record_of_Employment_Statutory_Holiday_Detail_DataType](_, scalaxb.ElemName(node) :: stack) },
        p36 map { scalaxb.fromXML[generated2.Other_Monies_DataType](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p38 map { scalaxb.fromXML[generated2.Canadian_Record_of_Employment_Paid_Sick_Leave__Maternity_and_Wage_Loss_Detail_DataType](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Canadian_Record_of_Employment_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Printing_Language map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Printing_Language"), __scope, false) } getOrElse {Nil},
        __obj.Issue_Type map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Issue_Type"), __scope, false) } getOrElse {Nil},
        __obj.ROE_Data_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("ROE_Data_Reference"), __scope, false) } getOrElse {Nil},
        __obj.ROE_Serial_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ROE_Serial_Number"), __scope, false) } getOrElse {Nil},
        __obj.Employee_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Employee_ID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Employer_Payroll_Reference_Number, Some("urn:com.workday/bsvc"), Some("Employer_Payroll_Reference_Number"), __scope, false),
        __obj.Organization_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Organization_Number"), __scope, false) } getOrElse {Nil},
        __obj.Folder_CD map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Folder_CD"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Pay_Period_Type, Some("urn:com.workday/bsvc"), Some("Pay_Period_Type"), __scope, false),
        __obj.Social_Insurance_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Social_Insurance_Number"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.ROE_Address_Line_1, Some("urn:com.workday/bsvc"), Some("ROE_Address_Line_1"), __scope, false),
        __obj.ROE_Address_Line_2 map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ROE_Address_Line_2"), __scope, false) } getOrElse {Nil},
        __obj.ROE_Address_Line_3 map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ROE_Address_Line_3"), __scope, false) } getOrElse {Nil},
        __obj.Postal_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Postal_Code"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Legal_First_Name, Some("urn:com.workday/bsvc"), Some("Legal_First_Name"), __scope, false),
        scalaxb.toXML[String](__obj.Legal_Last_Name, Some("urn:com.workday/bsvc"), Some("Legal_Last_Name"), __scope, false),
        __obj.Legal_Middle_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Legal_Middle_Name"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.First_Day_Worked, Some("urn:com.workday/bsvc"), Some("First_Day_Worked"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Last_Day_For_Which_Paid, Some("urn:com.workday/bsvc"), Some("Last_Day_For_Which_Paid"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Final_Pay_Period_End_Date, Some("urn:com.workday/bsvc"), Some("Final_Pay_Period_End_Date"), __scope, false),
        __obj.Employee_Occupation map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Employee_Occupation"), __scope, false) } getOrElse {Nil},
        __obj.ROE_Expected_Recall_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ROE_Expected_Recall_Code"), __scope, false) } getOrElse {Nil},
        __obj.Expected_Date_of_Return map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Expected_Date_of_Return"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.Total_Insurable_Hours, Some("urn:com.workday/bsvc"), Some("Total_Insurable_Hours"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.Total_Insurable_Earnings, Some("urn:com.workday/bsvc"), Some("Total_Insurable_Earnings"), __scope, false),
        __obj.ROE_Insurable_Earnings_By_Period_Data flatMap { scalaxb.toXML[generated2.Canadian_Record_of_Employment_Insurable_Earnings_By_Period_DataType](_, Some("urn:com.workday/bsvc"), Some("ROE_Insurable_Earnings_By_Period_Data"), __scope, false) },
        scalaxb.toXML[String](__obj.ROE_Reason_Contact_Area_Code_Number, Some("urn:com.workday/bsvc"), Some("ROE_Reason_Contact_Area_Code_Number"), __scope, false),
        scalaxb.toXML[String](__obj.ROE_Reason_Code_for_ROE_Reason, Some("urn:com.workday/bsvc"), Some("ROE_Reason_Code_for_ROE_Reason"), __scope, false),
        __obj.ROE_Reason_Phone_Extension_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ROE_Reason_Phone_Extension_Number"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.ROE_Reason_Contact_First_Name, Some("urn:com.workday/bsvc"), Some("ROE_Reason_Contact_First_Name"), __scope, false),
        scalaxb.toXML[String](__obj.ROE_Reason_Contact_Last_Name, Some("urn:com.workday/bsvc"), Some("ROE_Reason_Contact_Last_Name"), __scope, false),
        scalaxb.toXML[String](__obj.ROE_Reason_Contact_Phone_Number, Some("urn:com.workday/bsvc"), Some("ROE_Reason_Contact_Phone_Number"), __scope, false),
        __obj.Vacation_Pay_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Vacation_Pay_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Vacation_Pay_Data flatMap { scalaxb.toXML[generated2.ROE_Vacation_Pay_DataType](_, Some("urn:com.workday/bsvc"), Some("Vacation_Pay_Data"), __scope, false) },
        __obj.Statutory_Holiday_Data flatMap { scalaxb.toXML[generated2.Canadian_Record_of_Employment_Statutory_Holiday_Detail_DataType](_, Some("urn:com.workday/bsvc"), Some("Statutory_Holiday_Data"), __scope, false) },
        __obj.Other_Monies_Data flatMap { scalaxb.toXML[generated2.Other_Monies_DataType](_, Some("urn:com.workday/bsvc"), Some("Other_Monies_Data"), __scope, false) },
        __obj.Comments map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Comments"), __scope, false) } getOrElse {Nil},
        __obj.Special_Payment_Data flatMap { scalaxb.toXML[generated2.Canadian_Record_of_Employment_Paid_Sick_Leave__Maternity_and_Wage_Loss_Detail_DataType](_, Some("urn:com.workday/bsvc"), Some("Special_Payment_Data"), __scope, false) },
        __obj.Preferred_User_Language map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Preferred_User_Language"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Canadian_Record_of_Employment_Data_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Canadian_Record_of_Employment_Data_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Canadian_Record_of_Employment_Data_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Canadian_Record_of_Employment_Data_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Canadian_Record_of_Employment_Data")) ^^
      { case p1 =>
      generated2.Canadian_Record_of_Employment_Data_Response_DataType(p1 map { scalaxb.fromXML[generated2.Canadian_Record_of_Employment_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Canadian_Record_of_Employment_Data_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Canadian_Record_of_Employment_Data flatMap { scalaxb.toXML[generated2.Canadian_Record_of_Employment_DataType](_, Some("urn:com.workday/bsvc"), Some("Canadian_Record_of_Employment_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Canadian_Record_of_Employment_Data_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Canadian_Record_of_Employment_Data_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Canadian_Record_of_Employment_Data_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Canadian_Record_of_Employment_Data_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Canadian_Record_of_Employment_Data_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Canadian_Record_of_Employment_Data_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Canadian_Record_of_Employment_Data_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Canadian_Record_of_Employment_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Canadian_Record_of_Employment_Data_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Canadian_Record_of_Employment_Data_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Canadian_Record_of_Employment_Data_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Canadian_Record_of_Employment_Data_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Canadian_Record_of_Employment_Data_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Canadian_Record_of_Employment_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Canadian_Record_of_Employment_Data_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Canadian_Record_of_Employment_Insurable_Earnings_By_Period_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Canadian_Record_of_Employment_Insurable_Earnings_By_Period_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Canadian_Record_of_Employment_Insurable_Earnings_By_Period_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Canadian_Record_of_Employment_Insurable_Earnings_By_Period_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_ROE_Period_Number")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EI_Earning_Value")) ^^
      { case p1 ~ p2 =>
      generated2.Canadian_Record_of_Employment_Insurable_Earnings_By_Period_DataType(scalaxb.fromXML[BigDecimal](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Canadian_Record_of_Employment_Insurable_Earnings_By_Period_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigDecimal](__obj.Payroll_ROE_Period_Number, Some("urn:com.workday/bsvc"), Some("Payroll_ROE_Period_Number"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.EI_Earning_Value, Some("urn:com.workday/bsvc"), Some("EI_Earning_Value"), __scope, false))

  }

  trait DefaultGenerated2_ROE_History_DataTypeFormat extends scalaxb.ElemNameParser[generated2.ROE_History_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("ROE_History_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.ROE_History_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_ROE_History_Data_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Reference_Number_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Date_Issued")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Serial_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Return_from_Leave_Date__Prior_to_Go_Live_")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated2.ROE_History_DataType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.CompanyObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.WorkerObjectType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Payroll_Reference_NumberObjectType](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.ROE_History_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_ROE_History_Data_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_ROE_History_Data_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[generated2.Payroll_Reference_NumberObjectType](__obj.Payroll_Reference_Number_Reference, Some("urn:com.workday/bsvc"), Some("Payroll_Reference_Number_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Date_Issued, Some("urn:com.workday/bsvc"), Some("Date_Issued"), __scope, false),
        __obj.Serial_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Serial_Number"), __scope, false) } getOrElse {Nil},
        __obj.Return_from_Leave_Date__Prior_to_Go_Liveu93 map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Return_from_Leave_Date__Prior_to_Go_Live_"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_ROE_History_Data_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_ROE_History_Data_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_ROE_History_Data_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_ROE_History_Data_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_History_Data")) ^^
      { case p1 =>
      generated2.Put_ROE_History_Data_RequestType(scalaxb.fromXML[generated2.ROE_History_DataType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_ROE_History_Data_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_ROE_History_Data_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.ROE_History_DataType](__obj.ROE_History_Data, Some("urn:com.workday/bsvc"), Some("ROE_History_Data"), __scope, false))

  }

  trait DefaultGenerated2_Put_ROE_History_Data_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_ROE_History_Data_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_ROE_History_Data_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_ROE_History_Data_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Data_Reference")) ^^
      { case p1 =>
      generated2.Put_ROE_History_Data_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_ROE_History_Data_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_ROE_History_Data_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ROE_Data_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("ROE_Data_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_ROE_History_Data_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.ROE_History_Data_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("ROE_History_Data_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.ROE_History_Data_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_History_Data_Reference")) ^^
      { case p1 =>
      generated2.ROE_History_Data_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.ROE_History_Data_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ROE_History_Data_Reference flatMap { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("ROE_History_Data_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_ROE_History_Data_Request_CriteriaTypeFormat extends scalaxb.XMLFormat[generated2.ROE_History_Data_Request_CriteriaType] with scalaxb.CanWriteChildNodes[generated2.ROE_History_Data_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.ROE_History_Data_Request_CriteriaType] = seq match {
      case node: scala.xml.Node => Right(generated2.ROE_History_Data_Request_CriteriaType())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: generated2.ROE_History_Data_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated2_ROE_History_Data_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.ROE_History_Data_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("ROE_History_Data_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.ROE_History_Data_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.ROE_History_Data_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.ROE_History_Data_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_ROE_History_Data_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_ROE_History_Data_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_ROE_History_Data_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_ROE_History_Data_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.ROE_History_Data_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.ROE_History_Data_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_ROE_History_Data_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.ROE_History_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_ROE_History_Data_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_ROE_History_Data_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_roe_history_data_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_ROE_History_Data_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.ROE_History_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_ROE_History_Data_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.ROE_History_Data_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("ROE_History_Data_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.ROE_History_Data_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_History")) ^^
      { case p1 =>
      generated2.ROE_History_Data_Response_DataType(p1 map { scalaxb.fromXML[generated2.ROE_HistoryType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.ROE_History_Data_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ROE_History flatMap { scalaxb.toXML[generated2.ROE_HistoryType](_, Some("urn:com.workday/bsvc"), Some("ROE_History"), __scope, false) })

  }

  trait DefaultGenerated2_Get_ROE_History_Data_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_ROE_History_Data_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_ROE_History_Data_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_ROE_History_Data_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_ROE_History_Data_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.ROE_History_Data_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.ROE_History_Data_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.ROE_History_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.ROE_History_Data_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_ROE_History_Data_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_ROE_History_Data_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.ROE_History_Data_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.ROE_History_Data_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.ROE_History_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.ROE_History_Data_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_ROE_HistoryTypeFormat extends scalaxb.ElemNameParser[generated2.ROE_HistoryType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("ROE_HistoryType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.ROE_HistoryType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_ROE_Data_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_History_Data")) ^^
      { case p1 ~ p2 =>
      generated2.ROE_HistoryType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.ROE_History_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.ROE_HistoryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_ROE_Data_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_ROE_Data_Reference"), __scope, false) } getOrElse {Nil},
        __obj.ROE_History_Data flatMap { scalaxb.toXML[generated2.ROE_History_DataType](_, Some("urn:com.workday/bsvc"), Some("ROE_History_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Other_Monies_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Other_Monies_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Other_Monies_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Other_Monies_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Other_Monies_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Other_Monies_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Other_Monies_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Other_Monies_Amount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Other_Monies_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Other_Monies_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ROE_Other_Monies_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ROE_Other_Monies_Code"), __scope, false) } getOrElse {Nil},
        __obj.ROE_Other_Monies_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("ROE_Other_Monies_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.ROE_Other_Monies_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("ROE_Other_Monies_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.ROE_Other_Monies_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("ROE_Other_Monies_Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Offu45cycle_Payment_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Offu45cycle_Payment_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Off-cycle_Payment_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Offu45cycle_Payment_Response_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Batch_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Priority")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Replacement")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Reason_Reference")) ~ 
      opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "On_Demand_Payment_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.On_Demand_Payment_DataType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Manual_Payment_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Manual_Payment_DataType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Worktag_Overrides_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Off-cycle_Input_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      generated2.Payroll_Offu45cycle_Payment_Response_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.EmployeeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Run_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[generated2.Pay_GroupObjectType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[generated2.Payroll_Action_ReasonObjectType](_, scalaxb.ElemName(node) :: stack) },
        p12,
        p13 map { scalaxb.fromXML[generated2.Result_Worktag_Overrides_DataType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[generated2.Offu45cycle_Input_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Offu45cycle_Payment_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Batch_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Batch_ID"), __scope, false) } getOrElse {Nil},
        __obj.Payment_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payment_ID"), __scope, false) } getOrElse {Nil},
        __obj.Employee_Reference map { scalaxb.toXML[generated2.EmployeeObjectType](_, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false) } getOrElse {Nil},
        __obj.Period_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Priority map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Payment_Priority"), __scope, false) } getOrElse {Nil},
        __obj.Run_Category_Reference map { scalaxb.toXML[generated2.Run_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Reference map { scalaxb.toXML[generated2.Pay_GroupObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Result_Type_Reference map { scalaxb.toXML[generated2.Payroll_Offu45cycle_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Result_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Replacement map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Replacement"), __scope, false) } getOrElse {Nil},
        __obj.Reason_Reference map { scalaxb.toXML[generated2.Payroll_Action_ReasonObjectType](_, Some("urn:com.workday/bsvc"), Some("Reason_Reference"), __scope, false) } getOrElse {Nil},
        __obj.payroll_offu45cycle_payment_response_datatypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Payroll_Offu45cycle_Payment_Response_DataTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Result_Worktag_Overrides_Data flatMap { scalaxb.toXML[generated2.Result_Worktag_Overrides_DataType](_, Some("urn:com.workday/bsvc"), Some("Result_Worktag_Overrides_Data"), __scope, false) },
        __obj.Offu45cycle_Input_Data flatMap { scalaxb.toXML[generated2.Offu45cycle_Input_DataType](_, Some("urn:com.workday/bsvc"), Some("Off-cycle_Input_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Canadian_Record_of_Employment_Paid_Sick_Leave__Maternity_and_Wage_Loss_Detail_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Canadian_Record_of_Employment_Paid_Sick_Leave__Maternity_and_Wage_Loss_Detail_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Canadian_Record_of_Employment_Paid_Sick_Leave__Maternity_and_Wage_Loss_Detail_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Canadian_Record_of_Employment_Paid_Sick_Leave__Maternity_and_Wage_Loss_Detail_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Special_Payment_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Special_Payment_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Special_Payment_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Special_Payment_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Special_Payment_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Per_Day")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Per_Week")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated2.Canadian_Record_of_Employment_Paid_Sick_Leave__Maternity_and_Wage_Loss_Detail_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Canadian_Record_of_Employment_Paid_Sick_Leave__Maternity_and_Wage_Loss_Detail_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ROE_Special_Payment_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ROE_Special_Payment_Code"), __scope, false) } getOrElse {Nil},
        __obj.Special_Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Special_Payment_Date"), __scope, false) } getOrElse {Nil},
        __obj.Special_Payment_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Special_Payment_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Special_Payment_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Special_Payment_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Special_Payment_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Special_Payment_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Per_Day map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Per_Day"), __scope, false) } getOrElse {Nil},
        __obj.Per_Week map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Per_Week"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Canadian_Record_of_Employment_Data_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Canadian_Record_of_Employment_Data_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Canadian_Record_of_Employment_Data_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Canadian_Record_of_Employment_Data_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Serial_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Date_Issued")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Ref_Number")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Business_Number")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SIN")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "First_Day_Worked")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Last_Day_For_Which_Paid")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Final_Pay_Period_Ending_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Insurable_Earnings")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Status_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      generated2.Canadian_Record_of_Employment_Data_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Unique_IdentifierObjectType](p10, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Canadian_Record_of_Employment_Data_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Serial_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Serial_Number"), __scope, false) } getOrElse {Nil},
        __obj.Date_Issued map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Date_Issued"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Ref_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Ref_Number"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.Business_Number, Some("urn:com.workday/bsvc"), Some("Business_Number"), __scope, false),
        scalaxb.toXML[String](__obj.SIN, Some("urn:com.workday/bsvc"), Some("SIN"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.First_Day_Worked, Some("urn:com.workday/bsvc"), Some("First_Day_Worked"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Last_Day_For_Which_Paid, Some("urn:com.workday/bsvc"), Some("Last_Day_For_Which_Paid"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Final_Pay_Period_Ending_Date, Some("urn:com.workday/bsvc"), Some("Final_Pay_Period_Ending_Date"), __scope, false),
        __obj.Total_Insurable_Earnings map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Total_Insurable_Earnings"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Unique_IdentifierObjectType](__obj.ROE_Status_Reference, Some("urn:com.workday/bsvc"), Some("ROE_Status_Reference"), __scope, false))

  }

  trait DefaultGenerated2_Put_Canadian_Record_of_Employment_Data_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Canadian_Record_of_Employment_Data_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Canadian_Record_of_Employment_Data_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Canadian_Record_of_Employment_Data_RequestType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Canadian_Record_of_Employment_Data_Data")) ^^
      { case p1 =>
      generated2.Put_Canadian_Record_of_Employment_Data_RequestType(p1 map { scalaxb.fromXML[generated2.Canadian_Record_of_Employment_Data_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Canadian_Record_of_Employment_Data_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Canadian_Record_of_Employment_Data_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Canadian_Record_of_Employment_Data_Data flatMap { scalaxb.toXML[generated2.Canadian_Record_of_Employment_Data_DataType](_, Some("urn:com.workday/bsvc"), Some("Canadian_Record_of_Employment_Data_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Put_Canadian_Record_of_Employment_Data_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Canadian_Record_of_Employment_Data_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Canadian_Record_of_Employment_Data_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Canadian_Record_of_Employment_Data_ResponseType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Canadian_Record_of_Employment_Data_Reference")) ^^
      { case p1 =>
      generated2.Put_Canadian_Record_of_Employment_Data_ResponseType(p1 map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Canadian_Record_of_Employment_Data_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Canadian_Record_of_Employment_Data_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Canadian_Record_of_Employment_Data_Reference flatMap { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Canadian_Record_of_Employment_Data_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_Accumulation_Data_for_Get_Payroll_ResultsTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Accumulation_Data_for_Get_Payroll_ResultsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Accumulation_Data_for_Get_Payroll_ResultsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Accumulation_Data_for_Get_Payroll_ResultsType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Accumulation_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "QTD_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Amount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Pay_Accumulation_Data_for_Get_Payroll_ResultsType(p1 map { scalaxb.fromXML[generated2.Payroll_CalculationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Pay_Accumulation_Data_for_Get_Payroll_ResultsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Pay_Accumulation_Reference flatMap { scalaxb.toXML[generated2.Payroll_CalculationObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Accumulation_Reference"), __scope, false) },
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.QTD_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("QTD_Amount"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD_Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Medicare_Exempt_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Medicare_Exempt_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Medicare_Exempt_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Medicare_Exempt_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_from_Medicare")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Medicare_Reason_for_Exemption_Reference")) ^^
      { case p1 ~ p2 =>
      generated2.Medicare_Exempt_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Medicare_Exempt_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Exempt_from_Medicare map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt_from_Medicare"), __scope, false) } getOrElse {Nil},
        __obj.Medicare_Reason_for_Exemption_Reference flatMap { scalaxb.toXML[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectType](_, Some("urn:com.workday/bsvc"), Some("Medicare_Reason_for_Exemption_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_OASDI_Exempt_DataTypeFormat extends scalaxb.ElemNameParser[generated2.OASDI_Exempt_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("OASDI_Exempt_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.OASDI_Exempt_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_from_OASDI")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "OASDI_Reason_for_Exemption_Reference")) ^^
      { case p1 ~ p2 =>
      generated2.OASDI_Exempt_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.OASDI_Exempt_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Exempt_from_OASDI map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt_from_OASDI"), __scope, false) } getOrElse {Nil},
        __obj.OASDI_Reason_for_Exemption_Reference flatMap { scalaxb.toXML[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectType](_, Some("urn:com.workday/bsvc"), Some("OASDI_Reason_for_Exemption_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Federal_Wu454_Tax_Election_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Federal_Wu454_Tax_Election_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Federal_W-4_Tax_Election_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Federal_Wu454_Tax_Election_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_W-4_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Federal_Wu454_Tax_Election_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Federal_Wu454_Tax_Election_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_Wu454_Reference flatMap { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_W-4_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Federal_Wu454_Tax_Election_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Federal_Wu454_Tax_Election_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Federal_W-4_Tax_Election_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Federal_Wu454_Tax_Election_Request_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_As_Of")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Federal_Wu454_Tax_Election_Request_CriteriaType(p1 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Federal_Wu454_Tax_Election_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) },
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Effective_As_Of map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_As_Of"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Federal_Wu454_Tax_Election_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Federal_Wu454_Tax_Election_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Federal_W-4_Tax_Election_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Federal_Wu454_Tax_Election_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Federal_Wu454_Tax_Election_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Federal_Wu454_Tax_Election_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Federal_Wu454_Tax_Elections_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Federal_Wu454_Tax_Elections_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Federal_W-4_Tax_Elections_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Federal_Wu454_Tax_Elections_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Federal_Wu454_Tax_Election_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Federal_Wu454_Tax_Election_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Federal_Wu454_Tax_Elections_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Federal_Wu454_Tax_Election_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Federal_Wu454_Tax_Elections_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Federal_Wu454_Tax_Elections_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_federal_wu454_tax_elections_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Federal_Wu454_Tax_Elections_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Federal_Wu454_Tax_Election_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Federal_Wu454_Tax_ElectionTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Federal_Wu454_Tax_ElectionType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Federal_W-4_Tax_ElectionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Federal_Wu454_Tax_ElectionType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_W-4_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Federal_W-4_Tax_Election_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Federal_Wu454_Tax_ElectionType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Federal_Wu454_Tax_Election_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Federal_Wu454_Tax_ElectionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_Wu454_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_W-4_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Federal_Wu454_Tax_Election_Data map { scalaxb.toXML[generated2.Payroll_Federal_Wu454_Tax_Election_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Federal_W-4_Tax_Election_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Federal_Wu454_Tax_Election_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Federal_Wu454_Tax_Election_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Federal_W-4_Tax_Election_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Federal_Wu454_Tax_Election_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Federal_W-4_Tax_Election")) ^^
      { case p1 =>
      generated2.Payroll_Federal_Wu454_Tax_Election_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Federal_Wu454_Tax_ElectionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Federal_Wu454_Tax_Election_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Federal_Wu454_Tax_Election flatMap { scalaxb.toXML[generated2.Payroll_Federal_Wu454_Tax_ElectionType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Federal_W-4_Tax_Election"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Federal_Wu454_Tax_Elections_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Federal_Wu454_Tax_Elections_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Federal_W-4_Tax_Elections_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Federal_Wu454_Tax_Elections_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Payroll_Federal_Wu454_Tax_Elections_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Federal_Wu454_Tax_Election_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Federal_Wu454_Tax_Election_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Federal_Wu454_Tax_Election_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Federal_Wu454_Tax_Election_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Federal_Wu454_Tax_Elections_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Federal_Wu454_Tax_Elections_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Federal_Wu454_Tax_Election_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Federal_Wu454_Tax_Election_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Federal_Wu454_Tax_Election_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Federal_Wu454_Tax_Election_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Federal_Wu454_Tax_Election_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Federal_Wu454_Tax_Election_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Federal_W-4_Tax_Election_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Federal_Wu454_Tax_Election_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_as_of")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Marital_Status_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Number_of_Allowances")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Nonresident_Alien")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_from_NRA_Additional_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Lock_In_Letter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "No_Wage_No_Tax")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 =>
      generated2.Payroll_Federal_Wu454_Tax_Election_DataType(scalaxb.fromXML[generated2.WorkerObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.CompanyObjectType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Withholding_StatusObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Federal_Wu454_Tax_Election_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_as_of, Some("urn:com.workday/bsvc"), Some("Effective_as_of"), __scope, false),
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        __obj.Marital_Status_Reference map { scalaxb.toXML[generated2.Payroll_Withholding_StatusObjectType](_, Some("urn:com.workday/bsvc"), Some("Marital_Status_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Number_of_Allowances map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Number_of_Allowances"), __scope, false) } getOrElse {Nil},
        __obj.Additional_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Additional_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Exempt map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt"), __scope, false) } getOrElse {Nil},
        __obj.Nonresident_Alien map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Nonresident_Alien"), __scope, false) } getOrElse {Nil},
        __obj.Exempt_from_NRA_Additional_Amount map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt_from_NRA_Additional_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Lock_In_Letter map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Lock_In_Letter"), __scope, false) } getOrElse {Nil},
        __obj.No_Wage_No_Tax map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("No_Wage_No_Tax"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Federal_Wu454_Tax_Election_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Federal_Wu454_Tax_Election_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Federal_W-4_Tax_Election_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Federal_Wu454_Tax_Election_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Federal_W-4_Tax_Election_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_Federal_Wu454_Tax_Election_RequestType(scalaxb.fromXML[generated2.Payroll_Federal_Wu454_Tax_Election_DataType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Federal_Wu454_Tax_Election_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Federal_Wu454_Tax_Election_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.Payroll_Federal_Wu454_Tax_Election_DataType](__obj.Payroll_Federal_Wu454_Tax_Election_Data, Some("urn:com.workday/bsvc"), Some("Payroll_Federal_W-4_Tax_Election_Data"), __scope, false))

  }

  trait DefaultGenerated2_Put_Payroll_Federal_Wu454_Tax_Election_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Federal_Wu454_Tax_Election_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Federal_W-4_Tax_Election_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Federal_Wu454_Tax_Election_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_W-4_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Put_Payroll_Federal_W-4_Tax_Election_Response_Data_Element")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Payroll_Federal_Wu454_Tax_Election_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Put_Payroll_Federal_Wu454_Tax_Election_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Federal_Wu454_Tax_Election_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Federal_Wu454_Tax_Election_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_Wu454_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_W-4_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Put_Payroll_Federal_Wu454_Tax_Election_Response_Data_Element map { scalaxb.toXML[generated2.Put_Payroll_Federal_Wu454_Tax_Election_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Put_Payroll_Federal_W-4_Tax_Election_Response_Data_Element"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Federal_Wu454_Tax_Election_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Federal_Wu454_Tax_Election_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Federal_W-4_Tax_Election_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Federal_Wu454_Tax_Election_Response_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_as_of")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_for_Payroll_Payee_Tax_Data_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Put_Payroll_Federal_Wu454_Tax_Election_Response_DataType(scalaxb.fromXML[generated2.WorkerObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.CompanyObjectType](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Put_Payroll_Federal_Wu454_Tax_Election_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_as_of, Some("urn:com.workday/bsvc"), Some("Effective_as_of"), __scope, false),
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_for_Payroll_Payee_Tax_Data_Reference, Some("urn:com.workday/bsvc"), Some("Company_for_Payroll_Payee_Tax_Data_Reference"), __scope, false))

  }

  trait DefaultGenerated2_Worker_Tax_Treaty_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Tax_Treaty_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Tax_Treaty_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Tax_Treaty_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Year_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Treaty_Benefit_Start_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Treaty_Benefit_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Maximum_Benefit_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "No_Treaty_Maximum")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Treaty_Eligibility_Begin")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Treaty_Eligibility_End")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Income_Code_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Income_Code_Subtype_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Eligible_for_Withholding_Allowance")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Rate")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Residency_Country_Code_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      generated2.Worker_Tax_Treaty_DataType(scalaxb.fromXML[generated2.WorkerObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Calendar_YearObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Payroll_Income_CodeObjectType](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[generated2.Payroll_Income_Code_SubtypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Payroll_IRS_CountryObjectType](p13, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Worker_Tax_Treaty_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[generated2.Calendar_YearObjectType](__obj.Tax_Year_Reference, Some("urn:com.workday/bsvc"), Some("Tax_Year_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Treaty_Benefit_Start_Date, Some("urn:com.workday/bsvc"), Some("Treaty_Benefit_Start_Date"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Treaty_Benefit_End_Date, Some("urn:com.workday/bsvc"), Some("Treaty_Benefit_End_Date"), __scope, false),
        __obj.Maximum_Benefit_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Maximum_Benefit_Amount"), __scope, false) } getOrElse {Nil},
        __obj.No_Treaty_Maximum map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("No_Treaty_Maximum"), __scope, false) } getOrElse {Nil},
        __obj.Treaty_Eligibility_Begin map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Treaty_Eligibility_Begin"), __scope, false) } getOrElse {Nil},
        __obj.Treaty_Eligibility_End map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Treaty_Eligibility_End"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Payroll_Income_CodeObjectType](__obj.Income_Code_Reference, Some("urn:com.workday/bsvc"), Some("Income_Code_Reference"), __scope, false),
        __obj.Income_Code_Subtype_Reference map { scalaxb.toXML[generated2.Payroll_Income_Code_SubtypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Income_Code_Subtype_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Eligible_for_Withholding_Allowance map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Eligible_for_Withholding_Allowance"), __scope, false) } getOrElse {Nil},
        __obj.Withholding_Rate map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Withholding_Rate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Payroll_IRS_CountryObjectType](__obj.Tax_Residency_Country_Code_Reference, Some("urn:com.workday/bsvc"), Some("Tax_Residency_Country_Code_Reference"), __scope, false))

  }

  trait DefaultGenerated2_Put_Payroll_Worker_Tax_Treaty_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Worker_Tax_Treaty_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Worker_Tax_Treaty_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Worker_Tax_Treaty_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Tax_Treaty_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_Worker_Tax_Treaty_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Worker_Tax_Treaty_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Worker_Tax_Treaty_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Worker_Tax_Treaty_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_Tax_Treaty_Data map { scalaxb.toXML[generated2.Worker_Tax_Treaty_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_Tax_Treaty_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Worker_Tax_Treaty_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Worker_Tax_Treaty_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Worker_Tax_Treaty_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Worker_Tax_Treaty_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Tax_Treaty_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Tax_Treaty_Response_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Worker_Tax_Treaty_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Treaty_USAObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Put_Worker_Tax_Treaty_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Worker_Tax_Treaty_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Worker_Tax_Treaty_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Tax_Treaty_Reference map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Treaty_USAObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Tax_Treaty_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Tax_Treaty_Response_Data flatMap { scalaxb.toXML[generated2.Put_Worker_Tax_Treaty_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_Tax_Treaty_Response_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Worker_Tax_Treaties_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Tax_Treaties_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Tax_Treaties_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Tax_Treaties_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Tax_Treaty_Reference")) ^^
      { case p1 =>
      generated2.Worker_Tax_Treaties_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Treaty_USAObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Tax_Treaties_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_Tax_Treaty_Reference flatMap { scalaxb.toXML[generated2.Payroll_Payee_Tax_Treaty_USAObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Tax_Treaty_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Worker_Tax_Treaties_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Tax_Treaties_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Tax_Treaties_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Tax_Treaties_Request_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Year_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Income_Code_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Income_Code_Subtype_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Worker_Tax_Treaties_Request_CriteriaType(p1 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Calendar_YearObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Income_CodeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Income_Code_SubtypeObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Tax_Treaties_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) },
        __obj.Tax_Year_Reference map { scalaxb.toXML[generated2.Calendar_YearObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Year_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Income_Code_Reference map { scalaxb.toXML[generated2.Payroll_Income_CodeObjectType](_, Some("urn:com.workday/bsvc"), Some("Income_Code_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Income_Code_Subtype_Reference map { scalaxb.toXML[generated2.Payroll_Income_Code_SubtypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Income_Code_Subtype_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Worker_Tax_Treaties_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Worker_Tax_Treaties_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Worker_Tax_Treaties_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Worker_Tax_Treaties_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Worker_Tax_Treaties_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Worker_Tax_Treaties_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ^^
      { case p1 ~ p2 =>
      generated2.Get_Payroll_Worker_Tax_Treaties_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Worker_Tax_Treaties_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Worker_Tax_Treaties_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_worker_tax_treaties_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Worker_Tax_Treaties_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Tax_TreatyTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Tax_TreatyType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Tax_TreatyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Tax_TreatyType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Tax_Treaty_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Tax_Treaty_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Worker_Tax_TreatyType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Treaty_USAObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Worker_Tax_Treaty_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Tax_TreatyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Tax_Treaty_Reference map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Treaty_USAObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Tax_Treaty_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Tax_Treaty_Data flatMap { scalaxb.toXML[generated2.Worker_Tax_Treaty_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_Tax_Treaty_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Worker_Tax_Treaties_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Tax_Treaties_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Tax_Treaties_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Tax_Treaties_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Tax_Treaty")) ^^
      { case p1 =>
      generated2.Worker_Tax_Treaties_Response_DataType(p1 map { scalaxb.fromXML[generated2.Worker_Tax_TreatyType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Tax_Treaties_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_Tax_Treaty flatMap { scalaxb.toXML[generated2.Worker_Tax_TreatyType](_, Some("urn:com.workday/bsvc"), Some("Worker_Tax_Treaty"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Worker_Tax_Treaties_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Worker_Tax_Treaties_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Worker_Tax_Treaties_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Worker_Tax_Treaties_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Worker_Tax_Treaties_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Worker_Tax_Treaties_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Worker_Tax_Treaties_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Worker_Tax_Treaties_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Worker_Tax_Treaties_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Worker_Tax_Treaties_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Worker_Tax_Treaties_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Worker_Tax_Treaties_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Worker_Tax_Treaties_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Worker_Tax_Treaty_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Worker_Tax_Treaty_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Worker_Tax_Treaty_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Worker_Tax_Treaty_Response_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Year_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Income_Code_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Put_Worker_Tax_Treaty_Response_DataType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Calendar_YearObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Income_CodeObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Put_Worker_Tax_Treaty_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Year_Reference map { scalaxb.toXML[generated2.Calendar_YearObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Year_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Income_Code_Reference map { scalaxb.toXML[generated2.Payroll_Income_CodeObjectType](_, Some("urn:com.workday/bsvc"), Some("Income_Code_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Involuntary_Withholding_Order_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Involuntary_Withholding_Order_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Involuntary_Withholding_Order_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Involuntary_Withholding_Order_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Involuntary_Withholding_Order_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Involuntary_Withholding_Order_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Withholding_OrderObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Involuntary_Withholding_Order_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Involuntary_Withholding_Order_Reference flatMap { scalaxb.toXML[generated2.Withholding_OrderObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Involuntary_Withholding_Order_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Involuntary_Withholding_Order_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Involuntary_Withholding_Order_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Involuntary_Withholding_Order_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Involuntary_Withholding_Order_Request_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_As_Of")) ~ 
      safeRep(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Case_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Withholding_Order_CaseObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Case_Number")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Payroll_Involuntary_Withholding_Order_Request_CriteriaType(p1 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Withholding_Order_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4) })
    
    def writesChildNodes(__obj: generated2.Payroll_Involuntary_Withholding_Order_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) },
        __obj.Type_Reference flatMap { scalaxb.toXML[generated2.Withholding_Order_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Type_Reference"), __scope, false) },
        __obj.Effective_As_Of map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_As_Of"), __scope, false) } getOrElse {Nil},
        __obj.payroll_involuntary_withholding_order_request_criteriatypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Involuntary_Withholding_Order_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Involuntary_Withholding_Order_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Involuntary_Withholding_Order_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Involuntary_Withholding_Order_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Involuntary_Withholding_Order_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Involuntary_Withholding_Order_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Involuntary_Withholding_Orders_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Involuntary_Withholding_Orders_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Involuntary_Withholding_Orders_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Involuntary_Withholding_Orders_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Involuntary_Withholding_Order_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Involuntary_Withholding_Order_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Involuntary_Withholding_Orders_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Involuntary_Withholding_Order_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Involuntary_Withholding_Orders_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Involuntary_Withholding_Orders_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_involuntary_withholding_orders_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Involuntary_Withholding_Orders_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Involuntary_Withholding_Order_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Involuntary_Withholding_OrderTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Involuntary_Withholding_OrderType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Involuntary_Withholding_OrderType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Involuntary_Withholding_OrderType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Involuntary_Withholding_Order_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Involuntary_Withholding_Order_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Involuntary_Withholding_OrderType(p1.headOption map { scalaxb.fromXML[generated2.Withholding_OrderObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Involuntary_Withholding_Order_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Involuntary_Withholding_OrderType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Involuntary_Withholding_Order_Reference map { scalaxb.toXML[generated2.Withholding_OrderObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Involuntary_Withholding_Order_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Involuntary_Withholding_Order_Data flatMap { scalaxb.toXML[generated2.Payroll_Involuntary_Withholding_Order_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Involuntary_Withholding_Order_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Involuntary_Withholding_Order_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Involuntary_Withholding_Order_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Involuntary_Withholding_Order_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Involuntary_Withholding_Order_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Involuntary_Withholding_Order")) ^^
      { case p1 =>
      generated2.Payroll_Involuntary_Withholding_Order_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Involuntary_Withholding_OrderType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Involuntary_Withholding_Order_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Involuntary_Withholding_Order flatMap { scalaxb.toXML[generated2.Payroll_Involuntary_Withholding_OrderType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Involuntary_Withholding_Order"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Involuntary_Withholding_Orders_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Involuntary_Withholding_Orders_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Involuntary_Withholding_Orders_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Involuntary_Withholding_Orders_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Payroll_Involuntary_Withholding_Orders_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Involuntary_Withholding_Order_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Involuntary_Withholding_Order_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Involuntary_Withholding_Order_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Involuntary_Withholding_Order_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Involuntary_Withholding_Orders_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Involuntary_Withholding_Orders_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Involuntary_Withholding_Order_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Involuntary_Withholding_Order_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Involuntary_Withholding_Order_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Involuntary_Withholding_Order_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Involuntary_Withholding_Order_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Involuntary_Withholding_Order_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Involuntary_Withholding_Order_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Involuntary_Withholding_Order_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Type_Reference")) ~ 
      (((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Case_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Withholding_Order_CaseObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Case_Number")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Additional_Order_Number")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Order_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Received_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Begin_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactive_Order")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Amount_Type_Reference")) ~ 
      opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Amount")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Amount_as_Percent")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Period_Frequency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Debt_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Monthly_Limit")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Issued_in_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Recipient_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Originating_Authority")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Memo")) ~ 
      opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bankruptcy_Order_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Bankruptcy_Order_Specific_DataType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Creditor_Garnishment_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Creditor_Garnishment_Specific_DataType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Federal_Tax_Levy_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Federal_Tax_Levy_Specific_DataType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_Tax_Levy_Order_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.State_Tax_Levy_Order_DataType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Support_Order_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Support_Order_DataType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Support_Order_Lump_Sum_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Support_Order_Lump_Sum_DataType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Wage_Assignment_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Wage_Assignment_Specific_DataType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Federal_Student_Loan_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Fee_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Withholding_Frequency_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Recipient_Address_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_ID")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 =>
      generated2.Payroll_Involuntary_Withholding_Order_DataType(scalaxb.fromXML[generated2.WorkerObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Withholding_Order_TypeObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3,
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p7, scalaxb.ElemName(node) :: stack),
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[generated2.Withholding_Order_Amount_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p12,
        scalaxb.fromXML[generated2.FrequencyObjectType](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Payroll_Tax_AuthorityObjectType](p16, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Deduction_RecipientObjectType](p17, scalaxb.ElemName(node) :: stack),
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p20,
        p21 map { scalaxb.fromXML[generated2.Federal_Student_Loan_Specific_DataType](_, scalaxb.ElemName(node) :: stack) },
        p22 map { scalaxb.fromXML[generated2.Withholding_Order_Fee_DataType](_, scalaxb.ElemName(node) :: stack) },
        p23 map { scalaxb.fromXML[generated2.Withholding_Order_Withholding_Frequency_DataType](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p25 map { scalaxb.fromXML[generated2.Address_Information_DataType](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Copied_Message").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Copied_Message" -> _ },
        (node \ "@{urn:com.workday/bsvc}Copied_To").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Copied_To" -> _ },
        (node \ "@{urn:com.workday/bsvc}Copied_From").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Copied_From" -> _ },
        (node \ "@{urn:com.workday/bsvc}Processing_Message").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Processing_Message" -> _ },
        (node \ "@{urn:com.workday/bsvc}Copied_From_Date").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@Copied_From_Date" -> _ },
        (node \ "@{urn:com.workday/bsvc}Copied_To_Date").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack)) } map { "@Copied_To_Date" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Involuntary_Withholding_Order_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Copied_Message", _) => __obj.Copied_Message foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Copied_Message", x.toString, attr) }
        case ("@Copied_To", _) => __obj.Copied_To foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Copied_To", x.toString, attr) }
        case ("@Copied_From", _) => __obj.Copied_From foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Copied_From", x.toString, attr) }
        case ("@Processing_Message", _) => __obj.Processing_Message foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Processing_Message", x.toString, attr) }
        case ("@Copied_From_Date", _) => __obj.Copied_From_Date foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Copied_From_Date", x.toString, attr) }
        case ("@Copied_To_Date", _) => __obj.Copied_To_Date foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Copied_To_Date", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Involuntary_Withholding_Order_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.WorkerObjectType](__obj.Employee_Reference, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false),
        scalaxb.toXML[generated2.Withholding_Order_TypeObjectType](__obj.Withholding_Order_Type_Reference, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Type_Reference"), __scope, false),
        (Some(__obj.payroll_involuntary_withholding_order_datatypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get,
        __obj.Withholding_Order_Additional_Order_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Additional_Order_Number"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Order_Date, Some("urn:com.workday/bsvc"), Some("Order_Date"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Received_Date, Some("urn:com.workday/bsvc"), Some("Received_Date"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Begin_Date, Some("urn:com.workday/bsvc"), Some("Begin_Date"), __scope, false),
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Inactive_Order map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactive_Order"), __scope, false) } getOrElse {Nil},
        __obj.Withholding_Order_Amount_Type_Reference map { scalaxb.toXML[generated2.Withholding_Order_Amount_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Amount_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.payroll_involuntary_withholding_order_datatypeoption2 map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.FrequencyObjectType](__obj.Pay_Period_Frequency_Reference, Some("urn:com.workday/bsvc"), Some("Pay_Period_Frequency_Reference"), __scope, false),
        __obj.Total_Debt_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Total_Debt_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Monthly_Limit map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Monthly_Limit"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Payroll_Tax_AuthorityObjectType](__obj.Issued_in_Reference, Some("urn:com.workday/bsvc"), Some("Issued_in_Reference"), __scope, false),
        scalaxb.toXML[generated2.Deduction_RecipientObjectType](__obj.Deduction_Recipient_Reference, Some("urn:com.workday/bsvc"), Some("Deduction_Recipient_Reference"), __scope, false),
        __obj.Originating_Authority map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Originating_Authority"), __scope, false) } getOrElse {Nil},
        __obj.Memo map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Memo"), __scope, false) } getOrElse {Nil},
        __obj.payroll_involuntary_withholding_order_datatypeoption3 map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Payroll_Involuntary_Withholding_Order_DataTypeOption3]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Federal_Student_Loan_Data flatMap { scalaxb.toXML[generated2.Federal_Student_Loan_Specific_DataType](_, Some("urn:com.workday/bsvc"), Some("Federal_Student_Loan_Data"), __scope, false) },
        __obj.Withholding_Order_Fee_Data flatMap { scalaxb.toXML[generated2.Withholding_Order_Fee_DataType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Fee_Data"), __scope, false) },
        __obj.Withholding_Order_Withholding_Frequency_Data flatMap { scalaxb.toXML[generated2.Withholding_Order_Withholding_Frequency_DataType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Withholding_Frequency_Data"), __scope, false) },
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Deduction_Recipient_Address_Data flatMap { scalaxb.toXML[generated2.Address_Information_DataType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Recipient_Address_Data"), __scope, false) },
        __obj.Withholding_Order_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Support_Order_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Support_Order_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Support_Order_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Support_Order_DataType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Original_Order")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amended_Order")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Termination_Order")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custodial_Party_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Supports_Second_Family")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Remittance_ID_Override")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Support_Order_Dependant_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Support_Order_Details_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_County_Authority_FIPS_Code")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated2.Payroll_Support_Order_DataType(p1,
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Support_Order_Dependent_DataType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Payroll_Support_Order_Detail_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Support_Order_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.payroll_support_order_datatypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[Boolean]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Custodial_Party_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Custodial_Party_Name"), __scope, false) } getOrElse {Nil},
        __obj.Supports_Second_Family map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Supports_Second_Family"), __scope, false) } getOrElse {Nil},
        __obj.Remittance_ID_Override map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Remittance_ID_Override"), __scope, false) } getOrElse {Nil},
        __obj.Support_Order_Dependant_Reference flatMap { scalaxb.toXML[generated2.Support_Order_Dependent_DataType](_, Some("urn:com.workday/bsvc"), Some("Support_Order_Dependant_Reference"), __scope, false) },
        __obj.Support_Order_Details_Reference flatMap { scalaxb.toXML[generated2.Payroll_Support_Order_Detail_DataType](_, Some("urn:com.workday/bsvc"), Some("Support_Order_Details_Reference"), __scope, false) },
        __obj.Payroll_Local_County_Authority_FIPS_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_County_Authority_FIPS_Code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Support_Order_Detail_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Support_Order_Detail_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Support_Order_Detail_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Support_Order_Detail_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Order_Form_Amount")) ~ 
      opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Period_Amount_Override")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount_as_Percent")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Support_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Arrears_Over_12_Weeks")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Payroll_Support_Order_Detail_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2,
        scalaxb.fromXML[generated2.Support_TypeObjectType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Support_Order_Detail_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Order_Form_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Order_Form_Amount"), __scope, false) } getOrElse {Nil},
        __obj.payroll_support_order_detail_datatypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Support_TypeObjectType](__obj.Support_Type_Reference, Some("urn:com.workday/bsvc"), Some("Support_Type_Reference"), __scope, false),
        __obj.Arrears_Over_12_Weeks map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Arrears_Over_12_Weeks"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Involuntary_Withholding_Order_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Involuntary_Withholding_Order_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Involuntary_Withholding_Order_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Involuntary_Withholding_Order_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Involuntary_Withholding_Order_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Withholding_OrderObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Support_Order_Amend_or_Terminate_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Support_Order_Amend_or_Terminate_DataType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Involuntary_Withholding_Order_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Payroll_Involuntary_Withholding_Order_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Involuntary_Withholding_Order_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Involuntary_Withholding_Order_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Involuntary_Withholding_Order_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.put_payroll_involuntary_withholding_order_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Put_Payroll_Involuntary_Withholding_Order_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Payroll_Involuntary_Withholding_Order_Data map { scalaxb.toXML[generated2.Payroll_Involuntary_Withholding_Order_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Involuntary_Withholding_Order_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Involuntary_Withholding_Order_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Involuntary_Withholding_Order_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Involuntary_Withholding_Order_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Involuntary_Withholding_Order_ResponseType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Put_Payroll_Involuntary_Withholding_Order_Response_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_Involuntary_Withholding_Order_ResponseType(p1 map { scalaxb.fromXML[generated2.Put_Payroll_Involuntary_Withholding_Order_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Involuntary_Withholding_Order_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Involuntary_Withholding_Order_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Put_Payroll_Involuntary_Withholding_Order_Response_Data flatMap { scalaxb.toXML[generated2.Put_Payroll_Involuntary_Withholding_Order_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Put_Payroll_Involuntary_Withholding_Order_Response_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Put_Payroll_Involuntary_Withholding_Order_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Involuntary_Withholding_Order_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Involuntary_Withholding_Order_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Involuntary_Withholding_Order_Response_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Type")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Case_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Put_Payroll_Involuntary_Withholding_Order_Response_DataType(p1.headOption map { scalaxb.fromXML[generated2.Withholding_OrderObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Withholding_Order_CaseObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Put_Payroll_Involuntary_Withholding_Order_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Withholding_Order_Reference map { scalaxb.toXML[generated2.Withholding_OrderObjectType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Withholding_Order_Type map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Type"), __scope, false) } getOrElse {Nil},
        __obj.Withholding_Order_Case_Reference map { scalaxb.toXML[generated2.Withholding_Order_CaseObjectType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Case_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Support_Order_Lump_Sum_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Support_Order_Lump_Sum_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Support_Order_Lump_Sum_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Support_Order_Lump_Sum_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Process_in_Regular_Period")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custodial_Party_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Remittance_ID_Override")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Supports_Second_Family")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_County_Authority_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Dependants_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Support_Order_Detail_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_County_Authority_FIPS_Code")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Payroll_Support_Order_Lump_Sum_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_Local_County_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Support_Order_Dependent_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Payroll_Support_Order_Detail_DataType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Support_Order_Lump_Sum_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Process_in_Regular_Period map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Process_in_Regular_Period"), __scope, false) } getOrElse {Nil},
        __obj.Custodial_Party_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Custodial_Party_Name"), __scope, false) } getOrElse {Nil},
        __obj.Remittance_ID_Override map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Remittance_ID_Override"), __scope, false) } getOrElse {Nil},
        __obj.Supports_Second_Family map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Supports_Second_Family"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Local_County_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Local_County_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_County_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Dependants_Reference flatMap { scalaxb.toXML[generated2.Support_Order_Dependent_DataType](_, Some("urn:com.workday/bsvc"), Some("Dependants_Reference"), __scope, false) },
        __obj.Support_Order_Detail_Reference map { scalaxb.toXML[generated2.Payroll_Support_Order_Detail_DataType](_, Some("urn:com.workday/bsvc"), Some("Support_Order_Detail_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Local_County_Authority_FIPS_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_County_Authority_FIPS_Code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_State_Tax_Levy_Order_DataTypeFormat extends scalaxb.ElemNameParser[generated2.State_Tax_Levy_Order_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("State_Tax_Levy_Order_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.State_Tax_Levy_Order_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Number_of_Dependents")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_County_Authority_FIPS_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_is_Laborer_or_Mechanic")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_Tax_Levy_Federal_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_Tax_Levy_Dependant_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Good_Cause_Limit_Percent")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Process_Until_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Prorate_Until_Date")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.State_Tax_Levy_Order_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.State_Tax_Levy_Federal_DataType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Federal_Tax_Levy_Dependent_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Withholding_Order_Override_Completion_CriteriaObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.State_Tax_Levy_Order_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Number_of_Dependents map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Number_of_Dependents"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Local_County_Authority_FIPS_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_County_Authority_FIPS_Code"), __scope, false) } getOrElse {Nil},
        __obj.Worker_is_Laborer_or_Mechanic map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Worker_is_Laborer_or_Mechanic"), __scope, false) } getOrElse {Nil},
        __obj.State_Tax_Levy_Federal_Data map { scalaxb.toXML[generated2.State_Tax_Levy_Federal_DataType](_, Some("urn:com.workday/bsvc"), Some("State_Tax_Levy_Federal_Data"), __scope, false) } getOrElse {Nil},
        __obj.State_Tax_Levy_Dependant_Reference flatMap { scalaxb.toXML[generated2.Federal_Tax_Levy_Dependent_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("State_Tax_Levy_Dependant_Reference"), __scope, false) },
        __obj.Good_Cause_Limit_Percent map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Good_Cause_Limit_Percent"), __scope, false) } getOrElse {Nil},
        __obj.Process_Until_Reference map { scalaxb.toXML[generated2.Withholding_Order_Override_Completion_CriteriaObjectType](_, Some("urn:com.workday/bsvc"), Some("Process_Until_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Prorate_Until_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Prorate_Until_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Support_Order_Amend_or_Terminate_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Support_Order_Amend_or_Terminate_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Support_Order_Amend_or_Terminate_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Support_Order_Amend_or_Terminate_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Support_Order_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Support_Order_Amend_or_Terminate_DataType(p1.headOption map { scalaxb.fromXML[generated2.Support_OrderObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Support_Order_Amend_or_Terminate_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Support_Order_Reference map { scalaxb.toXML[generated2.Support_OrderObjectType](_, Some("urn:com.workday/bsvc"), Some("Support_Order_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_State_Tax_Levy_Federal_DataTypeFormat extends scalaxb.ElemNameParser[generated2.State_Tax_Levy_Federal_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("State_Tax_Levy_Federal_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.State_Tax_Levy_Federal_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Part_3_Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Period_Exemption_Override_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Marital_Status_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Personal_Exemptions")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_65__or_Blind_Exemptions")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Termination_Date")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.State_Tax_Levy_Federal_DataType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Marital_Status_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.State_Tax_Levy_Federal_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Part_3_Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Part_3_Effective_Date"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Period_Exemption_Override_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Pay_Period_Exemption_Override_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Marital_Status_Reference map { scalaxb.toXML[generated2.Payroll_Marital_Status_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Marital_Status_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Personal_Exemptions map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Personal_Exemptions"), __scope, false) } getOrElse {Nil},
        __obj.Additional_65__or_Blind_Exemptions map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Additional_65__or_Blind_Exemptions"), __scope, false) } getOrElse {Nil},
        __obj.Termination_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Termination_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Periodic_Company_Tax_Filing_Pay_Group_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Periodic_Company_Tax_Filing_Pay_Group_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Periodic_Company_Tax_Filing_Pay_Group_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Periodic_Company_Tax_Filing_Pay_Group_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Reference")) ^^
      { case p1 =>
      generated2.Periodic_Company_Tax_Filing_Pay_Group_DataType(p1.headOption map { scalaxb.fromXML[generated2.Pay_GroupObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Periodic_Company_Tax_Filing_Pay_Group_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Pay_Group_Reference map { scalaxb.toXML[generated2.Pay_GroupObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Change_No_Retro_Processing_Prior_To_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Change_No_Retro_Processing_Prior_To_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Change_No_Retro_Processing_Prior_To_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Change_No_Retro_Processing_Prior_To_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Proposed_No_Retro_Processing_Prior_To")) ^^
      { case p1 ~ p2 =>
      generated2.Change_No_Retro_Processing_Prior_To_DataType(scalaxb.fromXML[generated2.EmployeeObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Change_No_Retro_Processing_Prior_To_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.EmployeeObjectType](__obj.Employee_Reference, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false),
        __obj.Proposed_No_Retro_Processing_Prior_To map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Proposed_No_Retro_Processing_Prior_To"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Change_No_Retro_Processing_Prior_To_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Change_No_Retro_Processing_Prior_To_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Change_No_Retro_Processing_Prior_To_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Change_No_Retro_Processing_Prior_To_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Business_Process_Parameters")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Change_No_Retro_Processing_Prior_To_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Change_No_Retro_Processing_Prior_To_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Business_Process_ParametersType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Change_No_Retro_Processing_Prior_To_DataType](p2, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Change_No_Retro_Processing_Prior_To_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Change_No_Retro_Processing_Prior_To_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Business_Process_Parameters map { scalaxb.toXML[generated2.Business_Process_ParametersType](_, Some("urn:com.workday/bsvc"), Some("Business_Process_Parameters"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Change_No_Retro_Processing_Prior_To_DataType](__obj.Change_No_Retro_Processing_Prior_To_Data, Some("urn:com.workday/bsvc"), Some("Change_No_Retro_Processing_Prior_To_Data"), __scope, false))

  }

  trait DefaultGenerated2_Change_No_Retro_Processing_Prior_To_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Change_No_Retro_Processing_Prior_To_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Change_No_Retro_Processing_Prior_To_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Change_No_Retro_Processing_Prior_To_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Retro_Worker_Data_Event_Reference")) ^^
      { case p1 =>
      generated2.Change_No_Retro_Processing_Prior_To_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Change_No_Retro_Processing_Prior_To_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Change_No_Retro_Processing_Prior_To_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Retro_Worker_Data_Event_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Retro_Worker_Data_Event_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Canadian_Record_of_Employment_Statutory_Holiday_Detail_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Canadian_Record_of_Employment_Statutory_Holiday_Detail_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Canadian_Record_of_Employment_Statutory_Holiday_Detail_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Canadian_Record_of_Employment_Statutory_Holiday_Detail_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Detail_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ROE_Detail_Amount")) ^^
      { case p1 ~ p2 =>
      generated2.Canadian_Record_of_Employment_Statutory_Holiday_Detail_DataType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Canadian_Record_of_Employment_Statutory_Holiday_Detail_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ROE_Detail_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("ROE_Detail_Date"), __scope, false) } getOrElse {Nil},
        __obj.ROE_Detail_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("ROE_Detail_Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_WA_IIF_Deduction_DataTypeFormat extends scalaxb.ElemNameParser[generated2.WA_IIF_Deduction_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("WA_IIF_Deduction_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.WA_IIF_Deduction_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Authority_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Workers_Compensation_Code_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Workers_Compensation_Rate_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Washington_Industrial_Insurance_Fund_QTD_Value")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Washington_Industrial_Insurance_Fund_YTD_Value")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "QTD_Taxable_Hours")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Taxable_Hours")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.WA_IIF_Deduction_DataType(p1 map { scalaxb.fromXML[generated2.Metadata_Payroll_WorktagObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.PositionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Workers_Compensation_CodeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.WA_IIF_Deduction_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Tax_Authority_Reference flatMap { scalaxb.toXML[generated2.Metadata_Payroll_WorktagObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Authority_Reference"), __scope, false) },
        __obj.Position_Reference flatMap { scalaxb.toXML[generated2.PositionObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Reference"), __scope, false) },
        __obj.Workers_Compensation_Code_Reference flatMap { scalaxb.toXML[generated2.Workers_Compensation_CodeObjectType](_, Some("urn:com.workday/bsvc"), Some("Workers_Compensation_Code_Reference"), __scope, false) },
        __obj.Workers_Compensation_Rate_Reference map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Workers_Compensation_Rate_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Washington_Industrial_Insurance_Fund_QTD_Value map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Washington_Industrial_Insurance_Fund_QTD_Value"), __scope, false) } getOrElse {Nil},
        __obj.Washington_Industrial_Insurance_Fund_YTD_Value map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Washington_Industrial_Insurance_Fund_YTD_Value"), __scope, false) } getOrElse {Nil},
        __obj.QTD_Taxable_Hours map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("QTD_Taxable_Hours"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Taxable_Hours map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("YTD_Taxable_Hours"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Multiple_Worksite_Report_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Multiple_Worksite_Report_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Multiple_Worksite_Report_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Multiple_Worksite_Report_Request_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calendar_Quarter_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Authority_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Multiple_Worksite_Report_Request_CriteriaType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Calendar_QuarterObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Multiple_Worksite_Report_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.Calendar_QuarterObjectType](__obj.Calendar_Quarter_Reference, Some("urn:com.workday/bsvc"), Some("Calendar_Quarter_Reference"), __scope, false),
        __obj.Payroll_Tax_Authority_Reference flatMap { scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Authority_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Multiple_Worksite_Report_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Multiple_Worksite_Report_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Multiple_Worksite_Report_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Multiple_Worksite_Report_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ^^
      { case p1 ~ p2 =>
      generated2.Get_Multiple_Worksite_Report_RequestType(scalaxb.fromXML[generated2.Multiple_Worksite_Report_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Multiple_Worksite_Report_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Multiple_Worksite_Report_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Multiple_Worksite_Report_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Multiple_Worksite_Report_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Multiple_Worksite_Report_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Multiple_Worksite_Report_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Multiple_Worksite_Report_ResponseType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Get_Multiple_Worksite_Report_ResponseType(scalaxb.fromXML[generated2.Multiple_Worksite_Report_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Multiple_Worksite_Report_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Multiple_Worksite_Report_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Multiple_Worksite_Report_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Multiple_Worksite_Report_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Multiple_Worksite_Report_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Multiple_Worksite_Report_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Multiple_Worksite_Report_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Multiple_Worksite_Report_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Multiple_Worksite_Report_Response_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Multiple_Worksite_Report_Data")) ^^
      { case p1 =>
      generated2.Multiple_Worksite_Report_Response_DataType(p1.headOption map { scalaxb.fromXML[generated2.Multiple_Worksite_Report_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Multiple_Worksite_Report_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Multiple_Worksite_Report_Data map { scalaxb.toXML[generated2.Multiple_Worksite_Report_DataType](_, Some("urn:com.workday/bsvc"), Some("Multiple_Worksite_Report_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Multiple_Worksite_Report_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Multiple_Worksite_Report_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Multiple_Worksite_Report_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Multiple_Worksite_Report_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Legal_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_FEIN")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calendar_Year_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calendar_Quarter_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Quarter_Number")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Multiple_Worksite_Report_State_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated2.Multiple_Worksite_Report_DataType(p1.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Calendar_YearObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Calendar_QuarterObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[generated2.Multiple_Worksite_Report_State_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Multiple_Worksite_Report_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Company_Legal_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Company_Legal_Name"), __scope, false) } getOrElse {Nil},
        __obj.Company_FEIN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Company_FEIN"), __scope, false) } getOrElse {Nil},
        __obj.Calendar_Year_Reference map { scalaxb.toXML[generated2.Calendar_YearObjectType](_, Some("urn:com.workday/bsvc"), Some("Calendar_Year_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Calendar_Quarter_Reference map { scalaxb.toXML[generated2.Calendar_QuarterObjectType](_, Some("urn:com.workday/bsvc"), Some("Calendar_Quarter_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Quarter_Number map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Quarter_Number"), __scope, false) } getOrElse {Nil},
        __obj.Multiple_Worksite_Report_State_Data flatMap { scalaxb.toXML[generated2.Multiple_Worksite_Report_State_DataType](_, Some("urn:com.workday/bsvc"), Some("Multiple_Worksite_Report_State_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Multiple_Worksite_Report_State_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Multiple_Worksite_Report_State_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Multiple_Worksite_Report_State_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Multiple_Worksite_Report_State_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_Tax_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_UI_Account_Number")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worksite_Data")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Multiple_Worksite_Report_State_DataType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Tax_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Worksite_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Multiple_Worksite_Report_State_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.State_Tax_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Tax_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("State_Tax_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.State_UI_Account_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("State_UI_Account_Number"), __scope, false) } getOrElse {Nil},
        __obj.Worksite_Data flatMap { scalaxb.toXML[generated2.Worksite_DataType](_, Some("urn:com.workday/bsvc"), Some("Worksite_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Worksite_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worksite_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worksite_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worksite_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worksite_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Trade_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worksite_Street_Address")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worksite_City")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worksite_State")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worksite_Zip_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worksite_Expanded_Zip_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worksite_Identification_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worksite_Description")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employees_Active_Month_1_Day_12")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employees_Active_Month_2_Day_12")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employees_Active_Month_3_Day_12")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Wages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      generated2.Worksite_DataType(p1.headOption map { scalaxb.fromXML[generated2.LocationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worksite_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worksite_Reference map { scalaxb.toXML[generated2.LocationObjectType](_, Some("urn:com.workday/bsvc"), Some("Worksite_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Trade_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Trade_Name"), __scope, false) } getOrElse {Nil},
        __obj.Worksite_Street_Address map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Worksite_Street_Address"), __scope, false) } getOrElse {Nil},
        __obj.Worksite_City map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Worksite_City"), __scope, false) } getOrElse {Nil},
        __obj.Worksite_State map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Worksite_State"), __scope, false) } getOrElse {Nil},
        __obj.Worksite_Zip_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Worksite_Zip_Code"), __scope, false) } getOrElse {Nil},
        __obj.Worksite_Expanded_Zip_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Worksite_Expanded_Zip_Code"), __scope, false) } getOrElse {Nil},
        __obj.Worksite_Identification_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Worksite_Identification_Code"), __scope, false) } getOrElse {Nil},
        __obj.Worksite_Description map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Worksite_Description"), __scope, false) } getOrElse {Nil},
        __obj.Employees_Active_Month_1_Day_12 map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Employees_Active_Month_1_Day_12"), __scope, false) } getOrElse {Nil},
        __obj.Employees_Active_Month_2_Day_12 map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Employees_Active_Month_2_Day_12"), __scope, false) } getOrElse {Nil},
        __obj.Employees_Active_Month_3_Day_12 map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Employees_Active_Month_3_Day_12"), __scope, false) } getOrElse {Nil},
        __obj.Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Wages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Limit_Override_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Limit_Override_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Limit_Override_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Limit_Override_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Limit_Override_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Limit_Override_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_Limit_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Limit_Override_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Limit_Override_Reference flatMap { scalaxb.toXML[generated2.Payroll_Limit_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Limit_Override_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Limit_Override_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Limit_Override_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Limit_Override_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Limit_Override_Request_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_End_Date")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Payroll_Limit_Override_Request_CriteriaType(p1 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Limit_InterfaceObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Limit_Override_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) },
        __obj.Pay_Component_Reference flatMap { scalaxb.toXML[generated2.Limit_InterfaceObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Component_Reference"), __scope, false) },
        __obj.Period_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Period_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_End_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Limit_Override_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Limit_Override_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Limit_Override_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Limit_Override_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Limit_Override_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Limit_Override_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Limit_Overrides_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Limit_Overrides_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Limit_Overrides_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Limit_Overrides_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Limit_Override_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Limit_Override_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Limit_Overrides_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Limit_Override_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Limit_Overrides_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Limit_Overrides_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_limit_overrides_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Limit_Overrides_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Limit_Override_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Limit_OverrideTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Limit_OverrideType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Limit_OverrideType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Limit_OverrideType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Limit_Override_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Limit_Override_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Limit_OverrideType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Limit_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Limit_Override_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Limit_OverrideType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Limit_Override_Reference map { scalaxb.toXML[generated2.Payroll_Limit_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Limit_Override_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Limit_Override_Data map { scalaxb.toXML[generated2.Payroll_Limit_Override_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Limit_Override_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Limit_Override_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Limit_Override_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Limit_Override_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Limit_Override_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Limit_Override")) ^^
      { case p1 =>
      generated2.Payroll_Limit_Override_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Limit_OverrideType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Limit_Override_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Limit_Override flatMap { scalaxb.toXML[generated2.Payroll_Limit_OverrideType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Limit_Override"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Limit_Overrides_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Limit_Overrides_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Limit_Overrides_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Limit_Overrides_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Payroll_Limit_Overrides_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Limit_Override_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Limit_Override_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Limit_Override_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Limit_Override_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Limit_Overrides_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Limit_Overrides_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Limit_Override_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Limit_Override_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Limit_Override_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Limit_Override_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Limit_Override_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Limit_Override_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Limit_Override_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Limit_Override_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Limit_Interface_Data")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Use_Limit_Override_Value")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Limit_Override_Value")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Payroll_Limit_Override_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.WorkerObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[generated2.Position_ElementObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Limit_Interface_DataType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Limit_Override_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        __obj.Position_Reference map { scalaxb.toXML[generated2.Position_ElementObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Limit_Interface_Data flatMap { scalaxb.toXML[generated2.Limit_Interface_DataType](_, Some("urn:com.workday/bsvc"), Some("Limit_Interface_Data"), __scope, false) },
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Period_Start_Date, Some("urn:com.workday/bsvc"), Some("Period_Start_Date"), __scope, false),
        __obj.Period_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Use_Limit_Override_Value map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Use_Limit_Override_Value"), __scope, false) } getOrElse {Nil},
        __obj.Limit_Override_Value map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Limit_Override_Value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Limit_Override_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Limit_Override_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Limit_Override_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Limit_Override_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Limit_Override_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Limit_Override_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Payroll_Limit_Override_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Limit_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Limit_Override_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Limit_Override_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Limit_Override_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Limit_Override_Reference map { scalaxb.toXML[generated2.Payroll_Limit_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Limit_Override_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Limit_Override_Data map { scalaxb.toXML[generated2.Payroll_Limit_Override_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Limit_Override_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Limit_Override_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Limit_Override_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Limit_Override_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Limit_Override_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Limit_Override_Reference")) ^^
      { case p1 =>
      generated2.Put_Payroll_Limit_Override_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Limit_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Limit_Override_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Limit_Override_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Limit_Override_Reference map { scalaxb.toXML[generated2.Payroll_Limit_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Limit_Override_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Costing_Interval_Update_KeyTypeFormat extends scalaxb.ElemNameParser[generated2.Costing_Interval_Update_KeyType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Costing_Interval_Update_KeyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Costing_Interval_Update_KeyType] =
      phrase((((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Costing_Override_ID_Update_Key")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date_Update_Key")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      generated2.Costing_Interval_Update_KeyType(p1,
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Delete").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Delete" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Costing_Interval_Update_KeyType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Delete", _) => __obj.Delete foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Delete", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Costing_Interval_Update_KeyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.costing_interval_update_keytypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)}).get)

  }

  trait DefaultGenerated2_Get_Worker_Costing_Allocations_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Worker_Costing_Allocations_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Worker_Costing_Allocations_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Worker_Costing_Allocations_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Worker_Costing_Allocations_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Worker_Costing_Allocations_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Worker_Costing_Allocations_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Worker_Costing_Allocations_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Worker_Costing_Allocations_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_Criteria map { scalaxb.toXML[generated2.Worker_Costing_Allocations_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Worker_Costing_Allocations_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Costing_Allocations_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Costing_Allocations_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Costing_Allocations_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Costing_Allocations_Request_CriteriaType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Costing_Override_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_All_Worker_Costing_Allocations")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_All_Position_Restrictions_Costing_Allocations")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Only_Current_Costing_Override_Interval")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Worker_Costing_Allocations_Request_CriteriaType(p1.headOption map { scalaxb.fromXML[generated2.Costing_Override_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Costing_Allocations_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Costing_Override_Criteria map { scalaxb.toXML[generated2.Costing_Override_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Costing_Override_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Include_All_Worker_Costing_Allocations map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_All_Worker_Costing_Allocations"), __scope, false) } getOrElse {Nil},
        __obj.Include_All_Position_Restrictions_Costing_Allocations map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_All_Position_Restrictions_Costing_Allocations"), __scope, false) } getOrElse {Nil},
        __obj.Include_Only_Current_Costing_Override_Interval map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Only_Current_Costing_Override_Interval"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Costing_Allocations_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Costing_Allocations_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Costing_Allocations_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Costing_Allocations_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exclude_Allocation_Detail_Data")) ^^
      { case p1 =>
      generated2.Worker_Costing_Allocations_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Costing_Allocations_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Exclude_Allocation_Detail_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exclude_Allocation_Detail_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Costing_Override_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Costing_Override_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Costing_Override_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Costing_Override_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Restriction_Reference")) ^^
      { case p1 ~ p2 =>
      generated2.Costing_Override_CriteriaType(p1 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Position_RestrictionsObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Costing_Override_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) },
        __obj.Position_Restriction_Reference flatMap { scalaxb.toXML[generated2.Position_RestrictionsObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Restriction_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Worker_Costing_Allocations_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Worker_Costing_Allocations_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Worker_Costing_Allocations_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Worker_Costing_Allocations_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Worker_Costing_Allocations_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Worker_Costing_Allocations_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Worker_Costing_Allocations_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Worker_Costing_Allocations_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Worker_Costing_Allocations_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Worker_Costing_Allocations_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_Criteria map { scalaxb.toXML[generated2.Worker_Costing_Allocations_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Worker_Costing_Allocations_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Worker_Costing_Allocations_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Costing_Allocations_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Costing_Allocations_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Costing_Allocations_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Costing_Allocations_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Costing_Allocations_Data")) ^^
      { case p1 =>
      generated2.Worker_Costing_Allocations_Response_DataType(p1 map { scalaxb.fromXML[generated2.Worker_Costing_Allocations_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Costing_Allocations_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_Costing_Allocations_Data flatMap { scalaxb.toXML[generated2.Worker_Costing_Allocations_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_Costing_Allocations_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Worker_Costing_Allocations_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Costing_Allocations_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Costing_Allocations_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Costing_Allocations_DataType] =
      phrase((((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.WorkerObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Restrictions_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Position_RestrictionsObjectType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earning_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Costing_Allocation_Interval_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Worker_Costing_Allocations_DataType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Position_ElementObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Earning__All_ObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Worker_Costing_Allocation_Interval_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Costing_Allocations_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat((Some(__obj.worker_costing_allocations_datatypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[generated2.Worker_Costing_Allocations_DataTypeOption]](x, x.namespace, x.key, __scope, false)}).get,
        __obj.Position_Reference map { scalaxb.toXML[generated2.Position_ElementObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Earning_Reference map { scalaxb.toXML[generated2.Earning__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Earning_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Costing_Allocation_Interval_Data flatMap { scalaxb.toXML[generated2.Worker_Costing_Allocation_Interval_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_Costing_Allocation_Interval_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Worker_Costing_Allocation_Interval_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Costing_Allocation_Interval_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Costing_Allocation_Interval_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Costing_Allocation_Interval_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Costing_Override_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Costing_Allocation_Detail_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Worker_Costing_Allocation_Interval_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Worker_Costing_Allocation_Detail_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Costing_Allocation_Interval_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Costing_Override_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Costing_Override_ID"), __scope, false) } getOrElse {Nil},
        __obj.Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Costing_Allocation_Detail_Data flatMap { scalaxb.toXML[generated2.Worker_Costing_Allocation_Detail_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_Costing_Allocation_Detail_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Worker_Costing_Allocation_Detail_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Costing_Allocation_Detail_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Costing_Allocation_Detail_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Costing_Allocation_Detail_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Order")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Default_from_Organization_Assignment")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Costing_Override_Worktag_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Distribution_Percent")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Salary_Over_the_Cap_Costing_Allocation_Detail_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Worker_Costing_Allocation_Detail_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Tenanted_Payroll_WorktagObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Salary_Over_the_Cap_Costing_Allocation_Detail_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Costing_Allocation_Detail_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Order map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Order"), __scope, false) } getOrElse {Nil},
        __obj.Default_from_Organization_Assignment map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Default_from_Organization_Assignment"), __scope, false) } getOrElse {Nil},
        __obj.Costing_Override_Worktag_Reference flatMap { scalaxb.toXML[generated2.Tenanted_Payroll_WorktagObjectType](_, Some("urn:com.workday/bsvc"), Some("Costing_Override_Worktag_Reference"), __scope, false) },
        __obj.Distribution_Percent map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Distribution_Percent"), __scope, false) } getOrElse {Nil},
        __obj.Salary_Over_the_Cap_Costing_Allocation_Detail_Data flatMap { scalaxb.toXML[generated2.Salary_Over_the_Cap_Costing_Allocation_Detail_DataType](_, Some("urn:com.workday/bsvc"), Some("Salary_Over_the_Cap_Costing_Allocation_Detail_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference flatMap { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_NumberTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumberType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_RPP_or_DPSP_Registration_NumberType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumberType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_RPP_or_DPSP_Registration_Number_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumberType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumberType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference map { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Payee_RPP_or_DPSP_Registration_Number_Data flatMap { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_RPP_or_DPSP_Registration_Number_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_RPP_or_DPSP_Registration_Number")) ^^
      { case p1 =>
      generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumberType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_RPP_or_DPSP_Registration_Number flatMap { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumberType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_RPP_or_DPSP_Registration_Number"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_Number_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_RPP_or_DPSP_Registration_Number_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "RPP_or_DPSP_Registration_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Last_Updated")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_DataType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.CompanyObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.WorkerObjectType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference map { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_Date, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false),
        scalaxb.toXML[String](__obj.RPP_or_DPSP_Registration_Number, Some("urn:com.workday/bsvc"), Some("RPP_or_DPSP_Registration_Number"), __scope, false),
        __obj.Last_Updated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Last_Updated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_RPP_or_DPSP_Registration_Number_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_RPP_or_DPSP_Registration_Number_Data map { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_Number_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_RPP_or_DPSP_Registration_Number_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference")) ^^
      { case p1 =>
      generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference map { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_RPP_or_DPSP_Registration_Number_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaType(p1.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) },
        __obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_USA_State_and_Local_Tax_Election_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_USA_State_and_Local_Tax_Election_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_USA_State_and_Local_Tax_Election_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_USA_State_and_Local_Tax_Election_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Payroll_USA_State_and_Local_Tax_Election_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_USA_State_and_Local_Tax_Election_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_USA_State_and_Local_Tax_Elections_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_USA_State_and_Local_Tax_Elections_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_USA_State_and_Local_Tax_Election_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_USA_State_and_Local_Tax_Election_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_State_and_Local_Tax_Election_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_State_and_Local_Tax_Election_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_State_and_Local_Tax_Election_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_State_and_Local_Tax_Election_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_State_and_Local_Tax_Election")) ^^
      { case p1 =>
      generated2.Payroll_State_and_Local_Tax_Election_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_State_and_Local_Tax_ElectionsType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_State_and_Local_Tax_Election_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_State_and_Local_Tax_Election flatMap { scalaxb.toXML[generated2.Payroll_Payee_State_and_Local_Tax_ElectionsType](_, Some("urn:com.workday/bsvc"), Some("Payroll_State_and_Local_Tax_Election"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_USA_State_and_Local_Tax_Election_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_State_and_Local_Tax_Election_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_USA_State_and_Local_Tax_Election_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_USA_State_and_Local_Tax_Election_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_State_and_Local_Tax_Election_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_State_and_Local_Tax_ElectionsTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_State_and_Local_Tax_ElectionsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_State_and_Local_Tax_ElectionsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_State_and_Local_Tax_ElectionsType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_State_Authority_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Payroll_Payee_State_and_Local_Tax_ElectionsType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.State_Tax_Election_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_State_and_Local_Tax_ElectionsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_State_Authority_Data flatMap { scalaxb.toXML[generated2.State_Tax_Election_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_State_Authority_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_State_Election_for_State_and_LocalTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_State_Election_for_State_and_LocalType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_State_Election_for_State_and_LocalType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_State_Election_for_State_and_LocalType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Married_Filing_Jointly_Optional_Calculation")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Withholding_Status_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Veteran_Exemption")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exemption_for_Dependents_Complete")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exemption_for_Dependents_Joint_Custody")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Allowance_on_Special_Deduction")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "New_Jersey_Rate_Table_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Dependent_Allowance")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Number_of_Allowances")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Number_of_Allowances_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Estimated_Deductions")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exemptions")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Exemption")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Blind")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Percent")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Services_Localized_in_Illinois")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Reciprocity_Tax_Credit_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "XMLNAME_6A")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "XMLNAME_6B")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "XMLNAME_6C")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "XMLNAME_6D")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Certificate_of_Non-Residence")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Certificate_of_Residence")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Certificate_of_Withholding_Exemption_and_County_Status")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Lock_In_Letter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Allocation_Percent")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Percent_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Period_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Spouse_Indicator")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Full-time_Student_Indicator")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Head_of_Household")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Annual_Tax_Credits")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Allowance")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Reduced_Withholding_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "No_Wage_No_Tax")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_Reason_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Substantiated")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactivate_State_Tax")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "MSRR_Exempt")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Entrepreneur_Exemption")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Domicile_State_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Increase_or_Decrease_Withholding_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Lower_Tax_Rate_or_Low_Income")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 ~ p29 ~ p30 ~ p31 ~ p32 ~ p33 ~ p34 ~ p35 ~ p36 ~ p37 ~ p38 ~ p39 ~ p40 ~ p41 ~ p42 ~ p43 ~ p44 ~ p45 ~ p46 =>
      generated2.Payroll_Payee_State_Election_for_State_and_LocalType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Withholding_StatusObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[generated2.Payroll_Withholding_StatusObjectType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[generated2.Payroll_Constant_NumberObjectType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p29.headOption map { scalaxb.fromXML[generated2.Payroll_Constant_PercentObjectType](_, scalaxb.ElemName(node) :: stack) },
        p30.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p31.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p32.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p33.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p34.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p35.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p36.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p37.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p38.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p39.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p40.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p41.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p42.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p43.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p44.headOption map { scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p45.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p46.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_State_Election_for_State_and_LocalType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil},
        __obj.Married_Filing_Jointly_Optional_Calculation map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Married_Filing_Jointly_Optional_Calculation"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Withholding_Status_Reference map { scalaxb.toXML[generated2.Payroll_Withholding_StatusObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Withholding_Status_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Veteran_Exemption map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Veteran_Exemption"), __scope, false) } getOrElse {Nil},
        __obj.Exemption_for_Dependents_Complete map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Exemption_for_Dependents_Complete"), __scope, false) } getOrElse {Nil},
        __obj.Exemption_for_Dependents_Joint_Custody map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Exemption_for_Dependents_Joint_Custody"), __scope, false) } getOrElse {Nil},
        __obj.Allowance_on_Special_Deduction map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Allowance_on_Special_Deduction"), __scope, false) } getOrElse {Nil},
        __obj.New_Jersey_Rate_Table_Reference map { scalaxb.toXML[generated2.Payroll_Withholding_StatusObjectType](_, Some("urn:com.workday/bsvc"), Some("New_Jersey_Rate_Table_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Dependent_Allowance map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Dependent_Allowance"), __scope, false) } getOrElse {Nil},
        __obj.Number_of_Allowances map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Number_of_Allowances"), __scope, false) } getOrElse {Nil},
        __obj.Number_of_Allowances_Reference map { scalaxb.toXML[generated2.Payroll_Constant_NumberObjectType](_, Some("urn:com.workday/bsvc"), Some("Number_of_Allowances_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Estimated_Deductions map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Estimated_Deductions"), __scope, false) } getOrElse {Nil},
        __obj.Exemptions map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Exemptions"), __scope, false) } getOrElse {Nil},
        __obj.Withholding_Exemption map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Withholding_Exemption"), __scope, false) } getOrElse {Nil},
        __obj.Employee_Blind map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Employee_Blind"), __scope, false) } getOrElse {Nil},
        __obj.Additional_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Additional_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Additional_Percent map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Additional_Percent"), __scope, false) } getOrElse {Nil},
        __obj.Services_Localized_in_Illinois map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Services_Localized_in_Illinois"), __scope, false) } getOrElse {Nil},
        __obj.Reciprocity_Tax_Credit_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Reciprocity_Tax_Credit_Amount"), __scope, false) } getOrElse {Nil},
        __obj.XMLNAME_6A map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("XMLNAME_6A"), __scope, false) } getOrElse {Nil},
        __obj.XMLNAME_6B map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("XMLNAME_6B"), __scope, false) } getOrElse {Nil},
        __obj.XMLNAME_6C map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("XMLNAME_6C"), __scope, false) } getOrElse {Nil},
        __obj.XMLNAME_6D map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("XMLNAME_6D"), __scope, false) } getOrElse {Nil},
        __obj.Certificate_of_Nonu45Residence map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Certificate_of_Non-Residence"), __scope, false) } getOrElse {Nil},
        __obj.Certificate_of_Residence map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Certificate_of_Residence"), __scope, false) } getOrElse {Nil},
        __obj.Certificate_of_Withholding_Exemption_and_County_Status map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Certificate_of_Withholding_Exemption_and_County_Status"), __scope, false) } getOrElse {Nil},
        __obj.Lock_In_Letter map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Lock_In_Letter"), __scope, false) } getOrElse {Nil},
        __obj.Allocation_Percent map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Allocation_Percent"), __scope, false) } getOrElse {Nil},
        __obj.Withholding_Percent_Reference map { scalaxb.toXML[generated2.Payroll_Constant_PercentObjectType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Percent_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Period_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Pay_Period_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Spouse_Indicator map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Spouse_Indicator"), __scope, false) } getOrElse {Nil},
        __obj.Fullu45time_Student_Indicator map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Full-time_Student_Indicator"), __scope, false) } getOrElse {Nil},
        __obj.Head_of_Household map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Head_of_Household"), __scope, false) } getOrElse {Nil},
        __obj.Annual_Tax_Credits map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Annual_Tax_Credits"), __scope, false) } getOrElse {Nil},
        __obj.Additional_Allowance map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Additional_Allowance"), __scope, false) } getOrElse {Nil},
        __obj.Reduced_Withholding_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Reduced_Withholding_Amount"), __scope, false) } getOrElse {Nil},
        __obj.No_Wage_No_Tax map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("No_Wage_No_Tax"), __scope, false) } getOrElse {Nil},
        __obj.Exempt map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt"), __scope, false) } getOrElse {Nil},
        __obj.Exempt_Reason_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Exempt_Reason_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Withholding_Substantiated map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Withholding_Substantiated"), __scope, false) } getOrElse {Nil},
        __obj.Inactivate_State_Tax map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactivate_State_Tax"), __scope, false) } getOrElse {Nil},
        __obj.MSRR_Exempt map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("MSRR_Exempt"), __scope, false) } getOrElse {Nil},
        __obj.Entrepreneur_Exemption map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Entrepreneur_Exemption"), __scope, false) } getOrElse {Nil},
        __obj.Domicile_State_Reference map { scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Domicile_State_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Increase_or_Decrease_Withholding_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Increase_or_Decrease_Withholding_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Lower_Tax_Rate_or_Low_Income map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Lower_Tax_Rate_or_Low_Income"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_State_Tax_Election_DataTypeFormat extends scalaxb.ElemNameParser[generated2.State_Tax_Election_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("State_Tax_Election_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.State_Tax_Election_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_State_Authority_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_Income_Tax_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_Unemployment_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Earned_Income_Credit_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_State_County_Tax_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_State_City_Tax_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_State_School_District_Tax_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_State_Other_Tax_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.State_Tax_Election_DataType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Payee_State_Election_for_State_and_LocalType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_SUTA_Electon_for_State_and_LocalType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_EIC_Election_for_State_and_LocalType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Payroll_Payee_County_Election_for_State_and_LocalType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Payroll_Payee_City_Election_for_State_and_LocalType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[generated2.Payroll_Payee_School_District_Election_for_State_and_LocalType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[generated2.Payroll_Payee_Other_Election_for_State_and_LocalType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.State_Tax_Election_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_State_Authority_Reference map { scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_State_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.State_Income_Tax_Data flatMap { scalaxb.toXML[generated2.Payroll_Payee_State_Election_for_State_and_LocalType](_, Some("urn:com.workday/bsvc"), Some("State_Income_Tax_Data"), __scope, false) },
        __obj.State_Unemployment_Data map { scalaxb.toXML[generated2.Payroll_Payee_SUTA_Electon_for_State_and_LocalType](_, Some("urn:com.workday/bsvc"), Some("State_Unemployment_Data"), __scope, false) } getOrElse {Nil},
        __obj.Earned_Income_Credit_Data map { scalaxb.toXML[generated2.Payroll_Payee_EIC_Election_for_State_and_LocalType](_, Some("urn:com.workday/bsvc"), Some("Earned_Income_Credit_Data"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_State_County_Tax_Data flatMap { scalaxb.toXML[generated2.Payroll_Payee_County_Election_for_State_and_LocalType](_, Some("urn:com.workday/bsvc"), Some("Payroll_State_County_Tax_Data"), __scope, false) },
        __obj.Payroll_State_City_Tax_Data flatMap { scalaxb.toXML[generated2.Payroll_Payee_City_Election_for_State_and_LocalType](_, Some("urn:com.workday/bsvc"), Some("Payroll_State_City_Tax_Data"), __scope, false) },
        __obj.Payroll_State_School_District_Tax_Data flatMap { scalaxb.toXML[generated2.Payroll_Payee_School_District_Election_for_State_and_LocalType](_, Some("urn:com.workday/bsvc"), Some("Payroll_State_School_District_Tax_Data"), __scope, false) },
        __obj.Payroll_State_Other_Tax_Data flatMap { scalaxb.toXML[generated2.Payroll_Payee_Other_Election_for_State_and_LocalType](_, Some("urn:com.workday/bsvc"), Some("Payroll_State_Other_Tax_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_SUTA_Electon_for_State_and_LocalTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_SUTA_Electon_for_State_and_LocalType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_SUTA_Electon_for_State_and_LocalType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_SUTA_Electon_for_State_and_LocalType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Payee_SUTA_Electon_for_State_and_LocalType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_SUTA_Electon_for_State_and_LocalType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil},
        __obj.Exempt map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_EIC_Election_for_State_and_LocalTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_EIC_Election_for_State_and_LocalType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_EIC_Election_for_State_and_LocalType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_EIC_Election_for_State_and_LocalType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Number_of_Allowances")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Payee_EIC_Election_for_State_and_LocalType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_EIC_Election_for_State_and_LocalType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil},
        __obj.Exempt map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt"), __scope, false) } getOrElse {Nil},
        __obj.Number_of_Allowances map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Number_of_Allowances"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_County_Election_for_State_and_LocalTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_County_Election_for_State_and_LocalType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_County_Election_for_State_and_LocalType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_County_Election_for_State_and_LocalType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Address_Type_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_County_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "County_Additional_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactivate_State_Tax")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Payroll_Payee_County_Election_for_State_and_LocalType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Tax_Address_TypeObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Payroll_Local_AuthorityObjectType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_County_Election_for_State_and_LocalType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Tax_Address_TypeObjectType](__obj.Tax_Address_Type_Reference, Some("urn:com.workday/bsvc"), Some("Tax_Address_Type_Reference"), __scope, false),
        scalaxb.toXML[generated2.Payroll_Local_AuthorityObjectType](__obj.Payroll_Local_County_Authority_Reference, Some("urn:com.workday/bsvc"), Some("Payroll_Local_County_Authority_Reference"), __scope, false),
        __obj.County_Additional_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("County_Additional_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Inactivate_State_Tax map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactivate_State_Tax"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_City_Election_for_State_and_LocalTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_City_Election_for_State_and_LocalType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_City_Election_for_State_and_LocalType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_City_Election_for_State_and_LocalType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Address_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_City_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exemptions")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Percent_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Previous_Employer_Deducted_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Nonresident_Alien")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Certificate_of_Non-Residence")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Allocation_Percent")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Low_Income_Threshold")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_Reason_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactivate_State_Tax")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      generated2.Payroll_Payee_City_Election_for_State_and_LocalType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Tax_Address_TypeObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Local_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_Constant_PercentObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[generated2.Payroll_Constant_TextObjectType](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_City_Election_for_State_and_LocalType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Tax_Address_TypeObjectType](__obj.Tax_Address_Type_Reference, Some("urn:com.workday/bsvc"), Some("Tax_Address_Type_Reference"), __scope, false),
        __obj.Payroll_Local_City_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Local_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_City_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Exemptions map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Exemptions"), __scope, false) } getOrElse {Nil},
        __obj.Withholding_Percent_Reference map { scalaxb.toXML[generated2.Payroll_Constant_PercentObjectType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Percent_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Previous_Employer_Deducted_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Previous_Employer_Deducted_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Additional_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Additional_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Nonresident_Alien map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Nonresident_Alien"), __scope, false) } getOrElse {Nil},
        __obj.Certificate_of_Nonu45Residence map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Certificate_of_Non-Residence"), __scope, false) } getOrElse {Nil},
        __obj.Allocation_Percent map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Allocation_Percent"), __scope, false) } getOrElse {Nil},
        __obj.Low_Income_Threshold map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Low_Income_Threshold"), __scope, false) } getOrElse {Nil},
        __obj.Exempt map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt"), __scope, false) } getOrElse {Nil},
        __obj.Exempt_Reason_Reference map { scalaxb.toXML[generated2.Payroll_Constant_TextObjectType](_, Some("urn:com.workday/bsvc"), Some("Exempt_Reason_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Inactivate_State_Tax map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactivate_State_Tax"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_School_District_Election_for_State_and_LocalTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_School_District_Election_for_State_and_LocalType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_School_District_Election_for_State_and_LocalType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_School_District_Election_for_State_and_LocalType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_School_District_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_Reason_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Previous_Employer_Deducted_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactivate_State_Tax")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Payroll_Payee_School_District_Election_for_State_and_LocalType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Local_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Constant_TextObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_School_District_Election_for_State_and_LocalType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Local_School_District_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Local_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_School_District_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Exempt map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt"), __scope, false) } getOrElse {Nil},
        __obj.Exempt_Reason_Reference map { scalaxb.toXML[generated2.Payroll_Constant_TextObjectType](_, Some("urn:com.workday/bsvc"), Some("Exempt_Reason_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Previous_Employer_Deducted_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Previous_Employer_Deducted_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Inactivate_State_Tax map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactivate_State_Tax"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_Other_Election_for_State_and_LocalTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Other_Election_for_State_and_LocalType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Other_Election_for_State_and_LocalType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Other_Election_for_State_and_LocalType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Address_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Other_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactive")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Payroll_Payee_Other_Election_for_State_and_LocalType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Tax_Address_TypeObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Local_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Other_Election_for_State_and_LocalType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Tax_Address_TypeObjectType](__obj.Tax_Address_Type_Reference, Some("urn:com.workday/bsvc"), Some("Tax_Address_Type_Reference"), __scope, false),
        __obj.Payroll_Other_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Local_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Other_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Exempt map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exempt"), __scope, false) } getOrElse {Nil},
        __obj.Inactive map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactive"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_USA_State_and_Local_Tax_Election_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_USA_State_and_Local_Tax_Election_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_USA_State_and_Local_Tax_Election_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_USA_State_and_Local_Tax_Election_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_USA_State_and_Local_Tax_Election_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Put_Payroll_USA_State_and_Local_Tax_Election_RequestType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.WorkerObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[generated2.State_Tax_Election_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_USA_State_and_Local_Tax_Election_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_USA_State_and_Local_Tax_Election_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_Date, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false),
        __obj.Payroll_USA_State_and_Local_Tax_Election_Data flatMap { scalaxb.toXML[generated2.State_Tax_Election_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_USA_State_and_Local_Tax_Election_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Put_Payroll_USA_State_and_Local_Tax_Election_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_USA_State_and_Local_Tax_Election_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_USA_State_and_Local_Tax_Election_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_USA_State_and_Local_Tax_Election_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Put_Payroll_USA_State_and_Local_Tax_Election_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_USA_State_and_Local_Tax_Election_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_USA_State_and_Local_Tax_Election_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Ongoing_Jurisdiction_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_Ongoing_Jurisdiction_Reference flatMap { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Ongoing_Jurisdiction_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_as_Of")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaType(p1 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) },
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Effective_as_Of map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_as_Of"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ^^
      { case p1 ~ p2 =>
      generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_payee_ongoing_work_jurisdiction_tax_election_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election")) ^^
      { case p1 =>
      generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_ElectionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election flatMap { scalaxb.toXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_ElectionType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_ElectionTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_ElectionType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_ElectionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_ElectionType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_ElectionType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_ElectionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Data map { scalaxb.toXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_for_Tax_Election_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_for_Tax_Election_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactive")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Ongoing_Jurisdiction_Split")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataType(scalaxb.fromXML[generated2.WorkerObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Payroll_Payee_Ongoing_Jurisdiction_Splits_Tax_Election_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_for_Tax_Election_Reference, Some("urn:com.workday/bsvc"), Some("Worker_for_Tax_Election_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_Date, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false),
        __obj.Company_for_Tax_Election_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_for_Tax_Election_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Inactive map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactive"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Payee_Ongoing_Jurisdiction_Split flatMap { scalaxb.toXML[generated2.Payroll_Payee_Ongoing_Jurisdiction_Splits_Tax_Election_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Ongoing_Jurisdiction_Split"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_Ongoing_Jurisdiction_Splits_Tax_Election_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Ongoing_Jurisdiction_Splits_Tax_Election_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Ongoing_Jurisdiction_Splits_Tax_Election_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Ongoing_Jurisdiction_Splits_Tax_Election_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "County_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "City_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Other_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Allocation_Percent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Payroll_Payee_Ongoing_Jurisdiction_Splits_Tax_Election_DataType(scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Local_County_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Local_City_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Other_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Ongoing_Jurisdiction_Splits_Tax_Election_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](__obj.State_Reference, Some("urn:com.workday/bsvc"), Some("State_Reference"), __scope, false),
        __obj.County_Reference map { scalaxb.toXML[generated2.Payroll_Local_County_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("County_Reference"), __scope, false) } getOrElse {Nil},
        __obj.City_Reference map { scalaxb.toXML[generated2.Payroll_Local_City_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("City_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Other_Reference map { scalaxb.toXML[generated2.Payroll_Other_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Other_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.Allocation_Percent, Some("urn:com.workday/bsvc"), Some("Allocation_Percent"), __scope, false))

  }

  trait DefaultGenerated2_Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType(scalaxb.fromXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_DataType](__obj.Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Data, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Data"), __scope, false))

  }

  trait DefaultGenerated2_Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Put_Payroll_Payee_Ongoing_Jurisdiction_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Ongoing_Jurisdiction_Response_Tax_Election_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Put_Payroll_Payee_Ongoing_Jurisdiction_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Put_Payroll_Payee_Ongoing_Jurisdiction_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Ongoing_Jurisdiction_Response_Tax_Election_Data map { scalaxb.toXML[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Ongoing_Jurisdiction_Response_Tax_Election_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_for_Tax_Election_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_for_Tax_Election_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType(scalaxb.fromXML[generated2.WorkerObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.CompanyObjectType](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_for_Tax_Election_Reference, Some("urn:com.workday/bsvc"), Some("Worker_for_Tax_Election_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_Date, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false),
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_for_Tax_Election_Reference, Some("urn:com.workday/bsvc"), Some("Company_for_Tax_Election_Reference"), __scope, false))

  }

  trait DefaultGenerated2_Custom_Organization_Worktag_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Organization_Worktag_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Organization_Worktag_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Organization_Worktag_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Organization_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Custom_Organization_Worktag_Reference")) ^^
      { case p1 ~ p2 =>
      generated2.Custom_Organization_Worktag_DataType(p1.headOption map { scalaxb.fromXML[generated2.Organization_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Custom_OrganizationObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Custom_Organization_Worktag_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Organization_Type_Reference map { scalaxb.toXML[generated2.Organization_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Organization_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Custom_Organization_Worktag_Reference map { scalaxb.toXML[generated2.Custom_OrganizationObjectType](_, Some("urn:com.workday/bsvc"), Some("Custom_Organization_Worktag_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Federal_Student_Loan_Specific_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Federal_Student_Loan_Specific_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Federal_Student_Loan_Specific_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Federal_Student_Loan_Specific_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Department_of_Education_Student_Loan")) ^^
      { case p1 =>
      generated2.Federal_Student_Loan_Specific_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Federal_Student_Loan_Specific_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Department_of_Education_Student_Loan map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Department_of_Education_Student_Loan"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Import_Process_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Import_Process_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Import_Process_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Import_Process_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Import_Process_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Header_Instance_Reference")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Import_Process_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Web_Service_Background_Process_RuntimeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.InstanceObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Import_Process_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Import_Process_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Import_Process_Reference map { scalaxb.toXML[generated2.Web_Service_Background_Process_RuntimeObjectType](_, Some("urn:com.workday/bsvc"), Some("Import_Process_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Header_Instance_Reference map { scalaxb.toXML[generated2.InstanceObjectType](_, Some("urn:com.workday/bsvc"), Some("Header_Instance_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Monthly_Worker_Tax_Filing_Data_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Monthly_Worker_Tax_Filing_Data_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Monthly_Worker_Tax_Filing_Data_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Monthly_Worker_Tax_Filing_Data_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calendar_Year_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Month_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "As_Of_Date")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Monthly_Worker_Tax_Filing_Data_CriteriaType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Calendar_YearObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.MonthObjectType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Monthly_Worker_Tax_Filing_Data_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.Calendar_YearObjectType](__obj.Calendar_Year_Reference, Some("urn:com.workday/bsvc"), Some("Calendar_Year_Reference"), __scope, false),
        scalaxb.toXML[generated2.MonthObjectType](__obj.Month_Reference, Some("urn:com.workday/bsvc"), Some("Month_Reference"), __scope, false),
        __obj.As_Of_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("As_Of_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Monthly_Worker_Tax_Filing_Data_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Monthly_Worker_Tax_Filing_Data_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Monthly_Worker_Tax_Filing_Data_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Monthly_Worker_Tax_Filing_Data_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Monthly_Worker_Tax_Filing_Data_RequestType(scalaxb.fromXML[generated2.Monthly_Worker_Tax_Filing_Data_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Monthly_Worker_Tax_Filing_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Monthly_Worker_Tax_Filing_Data_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Monthly_Worker_Tax_Filing_Data_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Monthly_Worker_Tax_Filing_Data_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Monthly_Worker_Tax_Filing_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Monthly_Worker_Tax_Filing_Data_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Monthly_Worker_Tax_Filing_Data_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Monthly_Worker_Tax_Filing_Data_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Monthly_Worker_Tax_Filing_Data_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_YTD_Data")) ^^
      { case p1 =>
      generated2.Monthly_Worker_Tax_Filing_Data_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Monthly_Worker_Tax_Filing_Data_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_YTD_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_YTD_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Monthly_Worker_Tax_Filing_Data_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Monthly_Worker_Tax_Filing_Data_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Monthly_Worker_Tax_Filing_Data_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Monthly_Worker_Tax_Filing_Data_ResponseType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Monthly_Worker_Tax_Filing_Data_ResponseType(scalaxb.fromXML[generated2.Monthly_Worker_Tax_Filing_Data_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Monthly_Worker_Tax_Filing_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Monthly_Worker_Tax_Filing_Data_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Monthly_Worker_Tax_Filing_Data_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Monthly_Worker_Tax_Filing_Data_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Monthly_Worker_Tax_Filing_Data_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Monthly_Worker_Tax_Filing_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results flatMap { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) },
        __obj.Response_Data flatMap { scalaxb.toXML[generated2.Monthly_Worker_Tax_Filing_Data_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Monthly_Worker_Tax_Filing_Data_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Monthly_Worker_Tax_Filing_Data_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Monthly_Worker_Tax_Filing_Data_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Monthly_Worker_Tax_Filing_Data_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Monthly_Worker_Tax_Filing_Data")) ^^
      { case p1 =>
      generated2.Monthly_Worker_Tax_Filing_Data_Response_DataType(p1 map { scalaxb.fromXML[generated2.Monthly_Worker_Tax_Filing_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Monthly_Worker_Tax_Filing_Data_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Monthly_Worker_Tax_Filing_Data flatMap { scalaxb.toXML[generated2.Monthly_Worker_Tax_Filing_DataType](_, Some("urn:com.workday/bsvc"), Some("Monthly_Worker_Tax_Filing_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Monthly_Worker_Tax_Filing_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Monthly_Worker_Tax_Filing_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Monthly_Worker_Tax_Filing_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Monthly_Worker_Tax_Filing_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calendar_Year_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Month_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Weeks_Worked")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Hours_Worked")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Seasonal_Worker")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Corporate_Officer")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Reporting_Code_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Monthly_Deduction_Tax_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      generated2.Monthly_Worker_Tax_Filing_DataType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Calendar_YearObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.MonthObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[generated2.Worker_Payroll_Reporting_Code_DataType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[generated2.Monthly_Tax_Filing_Deduction_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Monthly_Worker_Tax_Filing_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Calendar_Year_Reference map { scalaxb.toXML[generated2.Calendar_YearObjectType](_, Some("urn:com.workday/bsvc"), Some("Calendar_Year_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Month_Reference map { scalaxb.toXML[generated2.MonthObjectType](_, Some("urn:com.workday/bsvc"), Some("Month_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Weeks_Worked map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Weeks_Worked"), __scope, false) } getOrElse {Nil},
        __obj.Hours_Worked map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Hours_Worked"), __scope, false) } getOrElse {Nil},
        __obj.Seasonal_Worker map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Seasonal_Worker"), __scope, false) } getOrElse {Nil},
        __obj.Corporate_Officer map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Corporate_Officer"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Reporting_Code_Data flatMap { scalaxb.toXML[generated2.Worker_Payroll_Reporting_Code_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Reporting_Code_Data"), __scope, false) },
        __obj.Monthly_Deduction_Tax_Data flatMap { scalaxb.toXML[generated2.Monthly_Tax_Filing_Deduction_DataType](_, Some("urn:com.workday/bsvc"), Some("Monthly_Deduction_Tax_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Monthly_Tax_Filing_Deduction_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Monthly_Tax_Filing_Deduction_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Monthly_Tax_Filing_Deduction_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Monthly_Tax_Filing_Deduction_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Filing_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "MTD_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Monthly_Tax_Filing_Deduction_DataType(scalaxb.fromXML[generated2.Payroll_CalculationObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[generated2.Metadata_Payroll_WorktagObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.MTD_Tax_Filing_DataType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.YTD_Tax_Filing_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Monthly_Tax_Filing_Deduction_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Payroll_CalculationObjectType](__obj.Deduction_Reference, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false),
        __obj.Payroll_Tax_Authority_Reference flatMap { scalaxb.toXML[generated2.Metadata_Payroll_WorktagObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Authority_Reference"), __scope, false) },
        __obj.Tax_Filing_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Tax_Filing_Code"), __scope, false) } getOrElse {Nil},
        __obj.MTD_Data map { scalaxb.toXML[generated2.MTD_Tax_Filing_DataType](_, Some("urn:com.workday/bsvc"), Some("MTD_Data"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Data map { scalaxb.toXML[generated2.YTD_Tax_Filing_DataType](_, Some("urn:com.workday/bsvc"), Some("YTD_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_MTD_Tax_Filing_DataTypeFormat extends scalaxb.ElemNameParser[generated2.MTD_Tax_Filing_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("MTD_Tax_Filing_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.MTD_Tax_Filing_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Wages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.MTD_Tax_Filing_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.MTD_Tax_Filing_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Wages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_YTD_Tax_Filing_DataTypeFormat extends scalaxb.ElemNameParser[generated2.YTD_Tax_Filing_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("YTD_Tax_Filing_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.YTD_Tax_Filing_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Wages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.YTD_Tax_Filing_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.YTD_Tax_Filing_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Wages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Limit_Interface_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Limit_Interface_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Limit_Interface_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Limit_Interface_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Component_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Related_Calculation__All__Reference")) ^^
      { case p1 ~ p2 =>
      generated2.Limit_Interface_DataType(scalaxb.fromXML[generated2.Pay_ComponentObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Related_Calculation__All_ObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Limit_Interface_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Pay_ComponentObjectType](__obj.Pay_Component_Reference, Some("urn:com.workday/bsvc"), Some("Pay_Component_Reference"), __scope, false),
        __obj.Related_Calculation__All__Reference map { scalaxb.toXML[generated2.Related_Calculation__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Related_Calculation__All__Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Repository_Document_MetadataTypeFormat extends scalaxb.ElemNameParser[generated2.Repository_Document_MetadataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Repository_Document_MetadataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Repository_Document_MetadataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "File_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Created_by")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Date_and_Time_Created")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Report_Tag_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Repository_Document_MetadataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Report_Output_TagObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Repository_Document_MetadataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.File_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("File_Name"), __scope, false) } getOrElse {Nil},
        __obj.Created_by map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Created_by"), __scope, false) } getOrElse {Nil},
        __obj.Date_and_Time_Created map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Date_and_Time_Created"), __scope, false) } getOrElse {Nil},
        __obj.Report_Tag_Reference flatMap { scalaxb.toXML[generated2.Report_Output_TagObjectType](_, Some("urn:com.workday/bsvc"), Some("Report_Tag_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Successor_Employer_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Successor_Employer_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Successor_Employer_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Successor_Employer_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Successor_Employer_Reference")) ^^
      { case p1 =>
      generated2.Successor_Employer_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Successor_EmployerObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Successor_Employer_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Successor_Employer_Reference flatMap { scalaxb.toXML[generated2.Successor_EmployerObjectType](_, Some("urn:com.workday/bsvc"), Some("Successor_Employer_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Successor_Employer_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Successor_Employer_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Successor_Employer_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Successor_Employer_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Successor_Employer_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Successor_Employer_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Successor_Employers_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Successor_Employers_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Successor_Employers_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Successor_Employers_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Successor_Employer_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Successor_Employers_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Successor_Employer_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Successor_Employers_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Successor_Employers_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_successor_employers_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Successor_Employer_Request_ReferencesType]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Successor_Employer_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Successor_EmployerTypeFormat extends scalaxb.ElemNameParser[generated2.Successor_EmployerType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Successor_EmployerType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Successor_EmployerType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Successor_Employer_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Successor_Employer_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Successor_EmployerType(p1.headOption map { scalaxb.fromXML[generated2.Successor_EmployerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Successor_Employer_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Successor_EmployerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Successor_Employer_Reference map { scalaxb.toXML[generated2.Successor_EmployerObjectType](_, Some("urn:com.workday/bsvc"), Some("Successor_Employer_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Successor_Employer_Data map { scalaxb.toXML[generated2.Successor_Employer_DataType](_, Some("urn:com.workday/bsvc"), Some("Successor_Employer_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Successor_Employer_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Successor_Employer_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Successor_Employer_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Successor_Employer_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Successor_Employer")) ^^
      { case p1 =>
      generated2.Successor_Employer_Response_DataType(p1 map { scalaxb.fromXML[generated2.Successor_EmployerType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Successor_Employer_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Successor_Employer flatMap { scalaxb.toXML[generated2.Successor_EmployerType](_, Some("urn:com.workday/bsvc"), Some("Successor_Employer"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Successor_Employers_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Successor_Employers_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Successor_Employers_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Successor_Employers_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Successor_Employers_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Successor_Employer_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Successor_Employer_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Successor_Employer_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Successor_Employers_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Successor_Employers_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Successor_Employer_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Successor_Employer_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Successor_Employer_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Successor_Employer_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Successor_Employer_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Successor_Employer_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Successor_Employer_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Successor_Employer_Type_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Acquisition_or_Merger_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Processing_Begin_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Successor_Company_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Predecessor_Company_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Type_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Authorities_not_Recognizing_Predecessor_Payments_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated2.Successor_Employer_DataType(scalaxb.fromXML[generated2.Company_Relationship_TypeObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.CompanyObjectType](p4, scalaxb.ElemName(node) :: stack),
        p5 map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Withholding_Order_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[generated2.Payroll_Tax_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}ID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@ID" -> _ },
        (node \ "@{urn:com.workday/bsvc}Federal_Tax_ID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Federal_Tax_ID" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Successor_Employer_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@ID", _) => __obj.ID foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "ID", x.toString, attr) }
        case ("@Federal_Tax_ID", _) => __obj.Federal_Tax_ID foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Federal_Tax_ID", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Successor_Employer_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Company_Relationship_TypeObjectType](__obj.Successor_Employer_Type_Reference, Some("urn:com.workday/bsvc"), Some("Successor_Employer_Type_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Acquisition_or_Merger_Date, Some("urn:com.workday/bsvc"), Some("Acquisition_or_Merger_Date"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Payroll_Processing_Begin_Date, Some("urn:com.workday/bsvc"), Some("Payroll_Processing_Begin_Date"), __scope, false),
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Successor_Company_Reference, Some("urn:com.workday/bsvc"), Some("Successor_Company_Reference"), __scope, false),
        __obj.Predecessor_Company_Reference flatMap { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Predecessor_Company_Reference"), __scope, false) },
        __obj.Withholding_Order_Type_Reference flatMap { scalaxb.toXML[generated2.Withholding_Order_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Type_Reference"), __scope, false) },
        __obj.Tax_Authorities_not_Recognizing_Predecessor_Payments_Reference flatMap { scalaxb.toXML[generated2.Payroll_Tax_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Authorities_not_Recognizing_Predecessor_Payments_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Put_Successor_Employer_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Successor_Employer_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Successor_Employer_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Successor_Employer_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Successor_Employer_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Successor_Employer_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Successor_Employer_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Successor_EmployerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Successor_Employer_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Successor_Employer_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Successor_Employer_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Successor_Employer_Reference map { scalaxb.toXML[generated2.Successor_EmployerObjectType](_, Some("urn:com.workday/bsvc"), Some("Successor_Employer_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Successor_Employer_Data map { scalaxb.toXML[generated2.Successor_Employer_DataType](_, Some("urn:com.workday/bsvc"), Some("Successor_Employer_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Successor_Employer_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Successor_Employer_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Successor_Employer_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Successor_Employer_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Successor_Employer_Reference")) ^^
      { case p1 =>
      generated2.Put_Successor_Employer_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Successor_EmployerObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Successor_Employer_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Successor_Employer_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Successor_Employer_Reference map { scalaxb.toXML[generated2.Successor_EmployerObjectType](_, Some("urn:com.workday/bsvc"), Some("Successor_Employer_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Offu45Cycle_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Offu45Cycle_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Off-Cycle_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Offu45Cycle_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Pay")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Reason_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Offu45Cycle_DataType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Action_ReasonObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Offu45Cycle_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Result_Type_Reference map { scalaxb.toXML[generated2.Payroll_Offu45cycle_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Result_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Additional_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Additional_Pay"), __scope, false) } getOrElse {Nil},
        __obj.Reason_Reference map { scalaxb.toXML[generated2.Payroll_Action_ReasonObjectType](_, Some("urn:com.workday/bsvc"), Some("Reason_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Background_Process_Message_Data_WSTypeFormat extends scalaxb.ElemNameParser[generated2.Background_Process_Message_Data_WSType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Background_Process_Message_Data_WSType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Background_Process_Message_Data_WSType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Timestamp")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Severity")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Message_Summary")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Line_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Line_Identifier")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Background_Process_Message_Data_WSType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Background_Process_Message_Data_WSType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Timestamp map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Timestamp"), __scope, false) } getOrElse {Nil},
        __obj.Severity map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Severity"), __scope, false) } getOrElse {Nil},
        __obj.Message_Summary map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Message_Summary"), __scope, false) } getOrElse {Nil},
        __obj.Line_Number map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Line_Number"), __scope, false) } getOrElse {Nil},
        __obj.Line_Identifier map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Line_Identifier"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_ROE_Prior_History_Results_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_ROE_Prior_History_Results_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_ROE_Prior_History_Results_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_ROE_Prior_History_Results_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Reference_Number_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Reporting_Period_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EI_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EI_Hours")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Payroll_ROE_Prior_History_Results_DataType(scalaxb.fromXML[generated2.EmployeeObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.CompanyObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Payroll_Reference_NumberObjectType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.PeriodObjectType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_ROE_Prior_History_Results_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.EmployeeObjectType](__obj.Employee_Reference, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false),
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.Payroll_Reference_NumberObjectType](__obj.Payroll_Reference_Number_Reference, Some("urn:com.workday/bsvc"), Some("Payroll_Reference_Number_Reference"), __scope, false),
        scalaxb.toXML[generated2.PeriodObjectType](__obj.Reporting_Period_Reference, Some("urn:com.workday/bsvc"), Some("Reporting_Period_Reference"), __scope, false),
        __obj.EI_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("EI_Wages"), __scope, false) } getOrElse {Nil},
        __obj.EI_Hours map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("EI_Hours"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_ROE_Prior_Period_History_Results_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_ROE_Prior_Period_History_Results_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_ROE_Prior_Period_History_Results_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_ROE_Prior_Period_History_Results_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_ROE_Prior_Period_History_Results_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_ROE_Prior_Period_History_Results_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_ROE_Prior_History_Results_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_ROE_Prior_Period_History_Results_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_ROE_Prior_Period_History_Results_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_ROE_Prior_Period_History_Results_Data map { scalaxb.toXML[generated2.Payroll_ROE_Prior_History_Results_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_ROE_Prior_Period_History_Results_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_ROE_Prior_Period_History_Results_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_ROE_Prior_Period_History_Results_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_ROE_Prior_Period_History_Results_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_ROE_Prior_Period_History_Results_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_ROE_Prior_Period_History_Results_Reference")) ^^
      { case p1 =>
      generated2.Put_Payroll_ROE_Prior_Period_History_Results_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_ROE_Prior_Period_History_Results_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_ROE_Prior_Period_History_Results_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_ROE_Prior_Period_History_Results_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_ROE_Prior_Period_History_Results_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Intermediary_Bank_Account_WWS_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Intermediary_Bank_Account_WWS_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Intermediary_Bank_Account_WWS_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Intermediary_Bank_Account_WWS_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Intermediary_Bank_Account_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Intermediary_Bank_Order")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Nickname")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Routing_Transit_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Branch_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Branch_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Check_Digit")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Account_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Roll_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "IBAN")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SWIFT_Bank_Identification_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactive")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Bank_Instructions")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      generated2.Intermediary_Bank_Account_WWS_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.CountryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Bank_Account_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Intermediary_Bank_Account_WWS_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Intermediary_Bank_Account_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Intermediary_Bank_Account_ID"), __scope, false) } getOrElse {Nil},
        __obj.Intermediary_Bank_Order map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Intermediary_Bank_Order"), __scope, false) } getOrElse {Nil},
        __obj.Country_Reference map { scalaxb.toXML[generated2.CountryObjectType](_, Some("urn:com.workday/bsvc"), Some("Country_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Nickname map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Nickname"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Type_Reference map { scalaxb.toXML[generated2.Bank_Account_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Name"), __scope, false) } getOrElse {Nil},
        __obj.Routing_Transit_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Routing_Transit_Number"), __scope, false) } getOrElse {Nil},
        __obj.Branch_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Branch_ID"), __scope, false) } getOrElse {Nil},
        __obj.Branch_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Branch_Name"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Number"), __scope, false) } getOrElse {Nil},
        __obj.Check_Digit map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Check_Digit"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Account_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Account_Name"), __scope, false) } getOrElse {Nil},
        __obj.Roll_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Roll_Number"), __scope, false) } getOrElse {Nil},
        __obj.IBAN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("IBAN"), __scope, false) } getOrElse {Nil},
        __obj.SWIFT_Bank_Identification_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("SWIFT_Bank_Identification_Code"), __scope, false) } getOrElse {Nil},
        __obj.Inactive map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactive"), __scope, false) } getOrElse {Nil},
        __obj.Bank_Instructions map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Bank_Instructions"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Payee_FUTA_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_FUTA_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_FUTA_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_FUTA_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_FUTA_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_Payee_FUTA_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_FUTA_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_FUTA_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_FUTA_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_FUTA_Data map { scalaxb.toXML[generated2.Payroll_Payee_FUTA_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_FUTA_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Payee_FUTA_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_FUTA_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_FUTA_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_FUTA_ResponseType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_FUTA_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Put_Payroll_Payee_FUTA_Response_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Payroll_Payee_FUTA_ResponseType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_FUTAObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Put_Payroll_Payee_FUTA_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_FUTA_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_FUTA_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_FUTA_Reference flatMap { scalaxb.toXML[generated2.Payroll_Payee_FUTAObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_FUTA_Reference"), __scope, false) },
        __obj.Put_Payroll_Payee_FUTA_Response_Data flatMap { scalaxb.toXML[generated2.Put_Payroll_Payee_FUTA_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Put_Payroll_Payee_FUTA_Response_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_FUTA_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_FUTA_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_FUTA_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_FUTA_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_FUTA_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_FUTA_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_FUTAObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_FUTA_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_FUTA_Reference flatMap { scalaxb.toXML[generated2.Payroll_Payee_FUTAObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_FUTA_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_FUTA_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_FUTA_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_FUTA_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_FUTA_Request_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Payee_FUTA_Request_CriteriaType(p1 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_FUTA_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) },
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_FUTA_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_FUTA_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_FUTA_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_FUTA_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_FUTA_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_FUTA_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Payee_FUTAs_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_FUTAs_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_FUTAs_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_FUTAs_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_FUTA_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_FUTA_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Payee_FUTAs_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_FUTA_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_FUTAs_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_FUTAs_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_payee_futas_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Payee_FUTAs_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payee_FUTA_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_FUTATypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_FUTAType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_FUTAType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_FUTAType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_FUTA_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_FUTA_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Payee_FUTAType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_FUTAObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_FUTA_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_FUTAType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_FUTA_Reference map { scalaxb.toXML[generated2.Payroll_Payee_FUTAObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_FUTA_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Payee_FUTA_Data map { scalaxb.toXML[generated2.Payroll_Payee_FUTA_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_FUTA_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_FUTA_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_FUTA_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_FUTA_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_FUTA_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_FUTA")) ^^
      { case p1 =>
      generated2.Payroll_Payee_FUTA_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_FUTAType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_FUTA_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_FUTA flatMap { scalaxb.toXML[generated2.Payroll_Payee_FUTAType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_FUTA"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Payee_FUTAs_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_FUTAs_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_FUTAs_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_FUTAs_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Payroll_Payee_FUTAs_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_FUTA_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_FUTA_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_FUTA_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_FUTA_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_FUTAs_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_FUTAs_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Payee_FUTA_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Payee_FUTA_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Payee_FUTA_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Payee_FUTA_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Payee_FUTA_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_FUTA_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_FUTA_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_FUTA_Response_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Put_Payroll_Payee_FUTA_Response_DataType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_FUTA_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Tax_Frequency_Override_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Frequency_Override_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Frequency_Override_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Frequency_Override_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Frequency_Value")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Frequency_Period_Reference")) ^^
      { case p1 ~ p2 =>
      generated2.Tax_Frequency_Override_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Time_Unit_for_AnnualizationObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Frequency_Override_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Frequency_Value map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Frequency_Value"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Frequency_Period_Reference map { scalaxb.toXML[generated2.Time_Unit_for_AnnualizationObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Frequency_Period_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Deduction_Recipient_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Deduction_Recipient_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Deduction_Recipient_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Deduction_Recipient_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Deduction_Recipient_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Deduction_Recipient_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Deduction_RecipientObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Deduction_Recipient_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Deduction_Recipient_Reference flatMap { scalaxb.toXML[generated2.Deduction_RecipientObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Deduction_Recipient_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Deduction_Recipient_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Deduction_Recipient_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Deduction_Recipient_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Deduction_Recipient_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Deduction_Recipient_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Deduction_Recipient_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Deduction_Recipients_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Deduction_Recipients_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Deduction_Recipients_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Deduction_Recipients_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Deduction_Recipients_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Deduction_Recipient_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Deduction_Recipient_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Deduction_Recipients_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Deduction_Recipients_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Deduction_Recipient_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Deduction_Recipient_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Deduction_RecipientTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Deduction_RecipientType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Deduction_RecipientType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Deduction_RecipientType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Deduction_Recipient_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Deduction_Recipient_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Deduction_RecipientType(p1.headOption map { scalaxb.fromXML[generated2.Deduction_RecipientObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Deduction_Recipient_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Deduction_RecipientType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Deduction_Recipient_Reference map { scalaxb.toXML[generated2.Deduction_RecipientObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Deduction_Recipient_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Deduction_Recipient_Data flatMap { scalaxb.toXML[generated2.Payroll_Deduction_Recipient_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Deduction_Recipient_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Deduction_Recipient_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Deduction_Recipient_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Deduction_Recipient_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Deduction_Recipient_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Deduction_Recipient")) ^^
      { case p1 =>
      generated2.Payroll_Deduction_Recipient_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Deduction_RecipientType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Deduction_Recipient_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Deduction_Recipient flatMap { scalaxb.toXML[generated2.Payroll_Deduction_RecipientType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Deduction_Recipient"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Deduction_Recipients_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Deduction_Recipients_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Deduction_Recipients_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Deduction_Recipients_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Payroll_Deduction_Recipients_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Deduction_Recipient_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Deduction_Recipient_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_Deduction_Recipient_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Deduction_Recipients_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Deduction_Recipients_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Deduction_Recipient_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Deduction_Recipient_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Deduction_Recipient_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Deduction_Recipient_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Deduction_Recipient_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Deduction_Recipient_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Deduction_Recipient_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Deduction_Recipient_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Alternate_Deduction_Recipient_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Deduction_Recipient_ID")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Business_Entity_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Settlement_Account_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Payroll_Deduction_Recipient_DataType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.Payment_TypeObjectType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[generated2.Business_Entity_WWS_DataType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Settlement_Account_WWS_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Deduction_Recipient_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Payroll_Deduction_Recipient_Name, Some("urn:com.workday/bsvc"), Some("Payroll_Deduction_Recipient_Name"), __scope, false),
        __obj.Payroll_Alternate_Deduction_Recipient_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Alternate_Deduction_Recipient_Name"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Deduction_Recipient_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Deduction_Recipient_ID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.Payment_TypeObjectType](__obj.Payment_Type_Reference, Some("urn:com.workday/bsvc"), Some("Payment_Type_Reference"), __scope, false),
        __obj.Business_Entity_Data map { scalaxb.toXML[generated2.Business_Entity_WWS_DataType](_, Some("urn:com.workday/bsvc"), Some("Business_Entity_Data"), __scope, false) } getOrElse {Nil},
        __obj.Settlement_Account_Data flatMap { scalaxb.toXML[generated2.Settlement_Account_WWS_DataType](_, Some("urn:com.workday/bsvc"), Some("Settlement_Account_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Put_Payroll_Deduction_Recipient_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Deduction_Recipient_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Deduction_Recipient_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Deduction_Recipient_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Deduction_Recipient_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Deduction_Recipient_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Payroll_Deduction_Recipient_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Deduction_RecipientObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Deduction_Recipient_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Add_Only").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)) } map { "@Add_Only" -> _ },
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Deduction_Recipient_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Add_Only", _) => __obj.Add_Only foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Add_Only", x.toString, attr) }
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Deduction_Recipient_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Deduction_Recipient_Reference map { scalaxb.toXML[generated2.Deduction_RecipientObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Deduction_Recipient_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Deduction_Recipient_Data map { scalaxb.toXML[generated2.Payroll_Deduction_Recipient_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Deduction_Recipient_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Deduction_Recipient_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Deduction_Recipient_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Deduction_Recipient_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Deduction_Recipient_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Deduction_Recipient_Reference")) ^^
      { case p1 =>
      generated2.Put_Payroll_Deduction_Recipient_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Deduction_RecipientObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Deduction_Recipient_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Deduction_Recipient_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Deduction_Recipient_Reference map { scalaxb.toXML[generated2.Deduction_RecipientObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Deduction_Recipient_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Paycheck_Deliveries_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Paycheck_Deliveries_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Paycheck_Deliveries_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Paycheck_Deliveries_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Paycheck_Delivery_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Paycheck_Delivery_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Paycheck_Deliveries_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Paycheck_Delivery_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Paycheck_Deliveries_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Paycheck_Deliveries_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_paycheck_deliveries_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Paycheck_Deliveries_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Paycheck_Delivery_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Paycheck_Deliveries_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Paycheck_Deliveries_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Paycheck_Deliveries_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Paycheck_Deliveries_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Paycheck_Deliveries_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Paycheck_Delivery_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Paycheck_Delivery_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Paycheck_Delivery_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Paycheck_Delivery_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Paycheck_Deliveries_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Paycheck_Deliveries_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Paycheck_Delivery_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Paycheck_Delivery_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Paycheck_Delivery_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Paycheck_Delivery_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Paycheck_Delivery__Public__RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Paycheck_Delivery__Public__RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Paycheck_Delivery__Public__RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Paycheck_Delivery__Public__RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Paycheck_Delivery_Data")) ^^
      { case p1 =>
      generated2.Put_Paycheck_Delivery__Public__RequestType(scalaxb.fromXML[generated2.Paycheck_Delivery_DataType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Paycheck_Delivery__Public__RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Paycheck_Delivery__Public__RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.Paycheck_Delivery_DataType](__obj.Paycheck_Delivery_Data, Some("urn:com.workday/bsvc"), Some("Paycheck_Delivery_Data"), __scope, false))

  }

  trait DefaultGenerated2_Put_Paycheck_Delivery__Public__ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Paycheck_Delivery__Public__ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Paycheck_Delivery__Public__ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Paycheck_Delivery__Public__ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Paycheck_Delivery_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Paycheck_Delivery_Method_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payslip_Printing_Override_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Last_Updated")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Put_Paycheck_Delivery__Public__ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Paycheck_DeliveryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Paycheck_Delivery_MethodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payslip_Printing_OverrideObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Paycheck_Delivery__Public__ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Paycheck_Delivery__Public__ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Paycheck_Delivery_Reference map { scalaxb.toXML[generated2.Paycheck_DeliveryObjectType](_, Some("urn:com.workday/bsvc"), Some("Paycheck_Delivery_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Paycheck_Delivery_Method_Reference map { scalaxb.toXML[generated2.Paycheck_Delivery_MethodObjectType](_, Some("urn:com.workday/bsvc"), Some("Paycheck_Delivery_Method_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payslip_Printing_Override_Reference map { scalaxb.toXML[generated2.Payslip_Printing_OverrideObjectType](_, Some("urn:com.workday/bsvc"), Some("Payslip_Printing_Override_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Last_Updated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Last_Updated"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Business_Process_Attachment_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Business_Process_Attachment_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Business_Process_Attachment_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Business_Process_Attachment_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "File_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Event_Attachment_Description")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Event_Attachment_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "File")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Content_Type")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Business_Process_Attachment_DataType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Event_Attachment_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[scalaxb.Base64Binary](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Business_Process_Attachment_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.File_Name, Some("urn:com.workday/bsvc"), Some("File_Name"), __scope, false),
        __obj.Event_Attachment_Description map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Event_Attachment_Description"), __scope, false) } getOrElse {Nil},
        __obj.Event_Attachment_Category_Reference map { scalaxb.toXML[generated2.Event_Attachment_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Event_Attachment_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.File map { scalaxb.toXML[scalaxb.Base64Binary](_, Some("urn:com.workday/bsvc"), Some("File"), __scope, false) } getOrElse {Nil},
        __obj.Content_Type map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Content_Type"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Single_Legal_Entity_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Single_Legal_Entity_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Single_Legal_Entity_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Single_Legal_Entity_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Single_Legal_Entity_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Single_Legal_Entity_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Single_Legal_Entity_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Single_Legal_EntityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Single_Legal_Entity_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Single_Legal_Entity_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Single_Legal_Entity_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Single_Legal_Entity_Reference map { scalaxb.toXML[generated2.Single_Legal_EntityObjectType](_, Some("urn:com.workday/bsvc"), Some("Single_Legal_Entity_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Single_Legal_Entity_Data map { scalaxb.toXML[generated2.Single_Legal_Entity_DataType](_, Some("urn:com.workday/bsvc"), Some("Single_Legal_Entity_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Single_Legal_Entity_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Single_Legal_Entity_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Single_Legal_Entity_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Single_Legal_Entity_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Reporting_Tax_Year_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactive_as-of_Tax_Year_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Legal_Entity_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Related_Companies_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Periodic_Combined_Tax_Filing")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Quarterly_Separate_Tax_Filing")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Combined_ACA_Reporting")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Single_Legal_Entity_DataType(scalaxb.fromXML[generated2.Calendar_YearObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Calendar_YearObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.CompanyObjectType](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Withholding_Order_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Federal_Tax_ID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Federal_Tax_ID" -> _ },
        (node \ "@{urn:com.workday/bsvc}Single_Legal_Entity_Type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Single_Legal_Entity_Type" -> _ },
        (node \ "@{urn:com.workday/bsvc}Financial_Tax_Reporting").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Financial_Tax_Reporting" -> _ },
        (node \ "@{urn:com.workday/bsvc}Combined_Financial_YE_for_all_companies").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Combined_Financial_YE_for_all_companies" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Single_Legal_Entity_DataType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Federal_Tax_ID", _) => __obj.Federal_Tax_ID foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Federal_Tax_ID", x.toString, attr) }
        case ("@Single_Legal_Entity_Type", _) => __obj.Single_Legal_Entity_Type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Single_Legal_Entity_Type", x.toString, attr) }
        case ("@Financial_Tax_Reporting", _) => __obj.Financial_Tax_Reporting foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Financial_Tax_Reporting", x.toString, attr) }
        case ("@Combined_Financial_YE_for_all_companies", _) => __obj.Combined_Financial_YE_for_all_companies foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Combined_Financial_YE_for_all_companies", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Single_Legal_Entity_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Calendar_YearObjectType](__obj.Reporting_Tax_Year_Reference, Some("urn:com.workday/bsvc"), Some("Reporting_Tax_Year_Reference"), __scope, false),
        __obj.Inactive_asu45of_Tax_Year_Reference map { scalaxb.toXML[generated2.Calendar_YearObjectType](_, Some("urn:com.workday/bsvc"), Some("Inactive_as-of_Tax_Year_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Legal_Entity_Reference, Some("urn:com.workday/bsvc"), Some("Legal_Entity_Reference"), __scope, false),
        __obj.Related_Companies_Reference flatMap { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Related_Companies_Reference"), __scope, false) },
        __obj.Withholding_Order_Type_Reference flatMap { scalaxb.toXML[generated2.Withholding_Order_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Type_Reference"), __scope, false) },
        __obj.Periodic_Combined_Tax_Filing map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Periodic_Combined_Tax_Filing"), __scope, false) } getOrElse {Nil},
        __obj.Quarterly_Separate_Tax_Filing map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Quarterly_Separate_Tax_Filing"), __scope, false) } getOrElse {Nil},
        __obj.Combined_ACA_Reporting map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Combined_ACA_Reporting"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Single_Legal_Entity_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Single_Legal_Entity_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Single_Legal_Entity_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Single_Legal_Entity_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Single_Legal_Entity_Reference")) ^^
      { case p1 =>
      generated2.Put_Single_Legal_Entity_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Single_Legal_EntityObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Single_Legal_Entity_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Single_Legal_Entity_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Single_Legal_Entity_Reference map { scalaxb.toXML[generated2.Single_Legal_EntityObjectType](_, Some("urn:com.workday/bsvc"), Some("Single_Legal_Entity_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Single_Legal_Entities_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Single_Legal_Entities_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Single_Legal_Entities_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Single_Legal_Entities_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Single_Legal_Entity_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Single_Legal_Entities_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Single_Legal_Entity_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Single_Legal_Entities_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Single_Legal_Entities_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_single_legal_entities_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Single_Legal_Entity_Request_ReferencesType]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Single_Legal_Entity_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Single_Legal_Entity_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Single_Legal_Entity_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Single_Legal_Entity_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Single_Legal_Entity_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Single_Legal_Entity_Reference")) ^^
      { case p1 =>
      generated2.Single_Legal_Entity_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Single_Legal_EntityObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Single_Legal_Entity_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Single_Legal_Entity_Reference flatMap { scalaxb.toXML[generated2.Single_Legal_EntityObjectType](_, Some("urn:com.workday/bsvc"), Some("Single_Legal_Entity_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Single_Legal_Entity_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Single_Legal_Entity_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Single_Legal_Entity_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Single_Legal_Entity_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Single_Legal_Entity_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Single_Legal_Entity_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Single_Legal_Entities_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Single_Legal_Entities_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Single_Legal_Entities_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Single_Legal_Entities_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Single_Legal_Entities_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Single_Legal_Entity_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Single_Legal_Entity_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Single_Legal_Entity_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Single_Legal_Entities_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Single_Legal_Entities_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Single_Legal_Entity_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Single_Legal_Entity_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Single_Legal_Entity_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Single_Legal_Entity_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Single_Legal_Entity_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Single_Legal_Entity_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Single_Legal_Entity_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Single_Legal_Entity")) ^^
      { case p1 =>
      generated2.Single_Legal_Entity_Response_DataType(p1 map { scalaxb.fromXML[generated2.Single_Legal_EntityType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Single_Legal_Entity_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Single_Legal_Entity flatMap { scalaxb.toXML[generated2.Single_Legal_EntityType](_, Some("urn:com.workday/bsvc"), Some("Single_Legal_Entity"), __scope, false) })

  }

  trait DefaultGenerated2_Single_Legal_EntityTypeFormat extends scalaxb.ElemNameParser[generated2.Single_Legal_EntityType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Single_Legal_EntityType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Single_Legal_EntityType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Single_Legal_Entity_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Single_Legal_Entity_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Single_Legal_EntityType(p1.headOption map { scalaxb.fromXML[generated2.Single_Legal_EntityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Single_Legal_Entity_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Single_Legal_EntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Single_Legal_Entity_Reference map { scalaxb.toXML[generated2.Single_Legal_EntityObjectType](_, Some("urn:com.workday/bsvc"), Some("Single_Legal_Entity_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Single_Legal_Entity_Data map { scalaxb.toXML[generated2.Single_Legal_Entity_DataType](_, Some("urn:com.workday/bsvc"), Some("Single_Legal_Entity_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452_Wu452C_Printing_Election_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452_Wu452C_Printing_Election_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2_W-2C_Printing_Election_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452_Wu452C_Printing_Election_Request_CriteriaType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ^^
      { case p1 =>
      generated2.Wu452_Wu452C_Printing_Election_Request_CriteriaType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452_Wu452C_Printing_Election_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452_Wu452C_Printing_Election_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452_Wu452C_Printing_Election_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2_W-2C_Printing_Election_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452_Wu452C_Printing_Election_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Wu452_Wu452C_Printing_Election_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452_Wu452C_Printing_Election_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Wu452_Wu452C_Printing_Election_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Wu452_Wu452C_Printing_Election_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_W-2_W-2C_Printing_Election_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Wu452_Wu452C_Printing_Election_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Get_Wu452_Wu452C_Printing_Election_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Wu452_Wu452C_Printing_Election_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Wu452_Wu452C_Printing_Election_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Wu452_Wu452C_Printing_Election_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Wu452_Wu452C_Printing_Election_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Wu452_Wu452C_Printing_Election_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Wu452_Wu452C_Printing_Election_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Wu452_Wu452C_Printing_Election_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Wu452_Wu452C_Printing_Election_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452_Wu452C_Printing_ElectionTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452_Wu452C_Printing_ElectionType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2_W-2C_Printing_ElectionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452_Wu452C_Printing_ElectionType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "XMLNAME__Worker__Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "W-2_W-2C_Printing_Election_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Wu452_Wu452C_Printing_ElectionType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Wu452_Wu452C_Printing_Election_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452_Wu452C_Printing_ElectionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.XMLNAME__Worker__Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("XMLNAME__Worker__Reference"), __scope, false) } getOrElse {Nil},
        __obj.Wu452_Wu452C_Printing_Election_Data map { scalaxb.toXML[generated2.Wu452_Wu452C_Printing_Election_DataType](_, Some("urn:com.workday/bsvc"), Some("W-2_W-2C_Printing_Election_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452_Wu452C_Printing_Election_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452_Wu452C_Printing_Election_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2_W-2C_Printing_Election_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452_Wu452C_Printing_Election_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "W-2_W-2C_Printing_Election")) ^^
      { case p1 =>
      generated2.Wu452_Wu452C_Printing_Election_Response_DataType(p1 map { scalaxb.fromXML[generated2.Wu452_Wu452C_Printing_ElectionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452_Wu452C_Printing_Election_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Wu452_Wu452C_Printing_Election flatMap { scalaxb.toXML[generated2.Wu452_Wu452C_Printing_ElectionType](_, Some("urn:com.workday/bsvc"), Some("W-2_W-2C_Printing_Election"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Wu452_Wu452C_Printing_Election_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Wu452_Wu452C_Printing_Election_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_W-2_W-2C_Printing_Election_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Wu452_Wu452C_Printing_Election_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Wu452_Wu452C_Printing_Election_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Wu452_Wu452C_Printing_Election_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Wu452_Wu452C_Printing_Election_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Wu452_Wu452C_Printing_Election_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Wu452_Wu452C_Printing_Election_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Wu452_Wu452C_Printing_Election_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Wu452_Wu452C_Printing_Election_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Wu452_Wu452C_Printing_Election_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Wu452_Wu452C_Printing_Election_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Wu452_Wu452C_Printing_Election_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Wu452_Wu452C_Printing_Election_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452_Wu452C_Printing_Election_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452_Wu452C_Printing_Election_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2_W-2C_Printing_Election_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452_Wu452C_Printing_Election_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Document_Delivery_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Last_Updated")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Current_W-2_W-2C_Printing_Election")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Wu452_Wu452C_Printing_Election_DataType(p1.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452_Wu452C_Printing_Election_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Document_Delivery_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Document_Delivery_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Last_Updated map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Last_Updated"), __scope, false) } getOrElse {Nil},
        __obj.Current_Wu452_Wu452C_Printing_Election map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Current_W-2_W-2C_Printing_Election"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452_Wu452C_Printing_Election_Request_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452_Wu452C_Printing_Election_Request_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2_W-2C_Printing_Election_Request_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452_Wu452C_Printing_Election_Request_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Receive_only_electronic_copies_of_W-2_W-2C_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Wu452_Wu452C_Printing_Election_Request_DataType(scalaxb.fromXML[generated2.WorkerObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452_Wu452C_Printing_Election_Request_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        __obj.Company_Reference flatMap { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) },
        __obj.Receive_only_electronic_copies_of_Wu452_Wu452C_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Receive_only_electronic_copies_of_W-2_W-2C_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Wu452_Wu452C_Printing_Election_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Wu452_Wu452C_Printing_Election_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_W-2_W-2C_Printing_Election_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Wu452_Wu452C_Printing_Election_RequestType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "W-2_W-2C_Printing_Election_Request_Data")) ^^
      { case p1 =>
      generated2.Put_Wu452_Wu452C_Printing_Election_RequestType(p1 map { scalaxb.fromXML[generated2.Wu452_Wu452C_Printing_Election_Request_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Wu452_Wu452C_Printing_Election_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Wu452_Wu452C_Printing_Election_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Wu452_Wu452C_Printing_Election_Request_Data flatMap { scalaxb.toXML[generated2.Wu452_Wu452C_Printing_Election_Request_DataType](_, Some("urn:com.workday/bsvc"), Some("W-2_W-2C_Printing_Election_Request_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_W-2_W-2C_Printing_Election_for_Worker_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_with_Updated_W-2_W-2C_Print_Election_Reference")) ^^
      { case p1 =>
      generated2.Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseType(p1 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_with_Updated_Wu452_Wu452C_Print_Election_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_with_Updated_W-2_W-2C_Print_Election_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Wu452_Wu452C_Printing_Election_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452_Wu452C_Printing_Election_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2_W-2C_Printing_Election_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452_Wu452C_Printing_Election_Request_ReferencesType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ^^
      { case p1 =>
      generated2.Wu452_Wu452C_Printing_Election_Request_ReferencesType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Wu452_Wu452C_Printing_Election_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false))

  }

  trait DefaultGenerated2_ROE_Vacation_Pay_DataTypeFormat extends scalaxb.ElemNameParser[generated2.ROE_Vacation_Pay_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("ROE_Vacation_Pay_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.ROE_Vacation_Pay_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Vacation_Pay_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Vacation_Pay_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Vacation_Pay_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Vacation_Pay_Amount")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.ROE_Vacation_Pay_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.ROE_Vacation_Pay_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Vacation_Pay_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Vacation_Pay_Code"), __scope, false) } getOrElse {Nil},
        __obj.Vacation_Pay_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Vacation_Pay_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Vacation_Pay_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Vacation_Pay_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Vacation_Pay_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Vacation_Pay_Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Tax_Levy_Deduction_Restrictions_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Tax_Levy_Deduction_Restrictions_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Tax_Levy_Deduction_Restrictions_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Tax_Levy_Deduction_Restrictions_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restriction_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restriction_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Tax_Levy_Deduction_Restrictions_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restriction_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Tax_Levy_Deduction_Restrictions_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Tax_Levy_Deduction_Restrictions_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_tax_levy_deduction_restrictions_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Tax_Levy_Deduction_Restrictions_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Tax_Levy_Deduction_Restriction_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Tax_Levy_Deduction_Restrictions_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Tax_Levy_Deduction_Restrictions_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Tax_Levy_Deduction_Restrictions_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Tax_Levy_Deduction_Restrictions_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Tax_Levy_Deduction_Restrictions_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restriction_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restriction_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restriction_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restrictions_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Tax_Levy_Deduction_Restrictions_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Tax_Levy_Deduction_Restrictions_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Tax_Levy_Deduction_Restriction_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Tax_Levy_Deduction_Restriction_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Tax_Levy_Deduction_Restriction_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Tax_Levy_Deduction_Restrictions_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Tax_Levy_Deduction_Restriction_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Levy_Deduction_Restriction_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Levy_Deduction_Restriction_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Levy_Deduction_Restriction_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Levy_Reference")) ^^
      { case p1 =>
      generated2.Tax_Levy_Deduction_Restriction_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Tax_LevyObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Levy_Deduction_Restriction_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Tax_Levy_Reference flatMap { scalaxb.toXML[generated2.Tax_LevyObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Levy_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Tax_Levy_Deduction_Restriction_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Levy_Deduction_Restriction_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Levy_Deduction_Restriction_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Levy_Deduction_Restriction_Request_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_As_Of")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Tax_Levy_Deduction_Restriction_Request_CriteriaType(p1 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Levy_Deduction_Restriction_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) },
        __obj.Company_Reference flatMap { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) },
        __obj.Effective_As_Of map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_As_Of"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Tax_Levy_Deduction_Restrictions_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Levy_Deduction_Restrictions_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Levy_Deduction_Restrictions_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Levy_Deduction_Restrictions_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Levy_Deduction_Restriction")) ^^
      { case p1 =>
      generated2.Tax_Levy_Deduction_Restrictions_Response_DataType(p1 map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_RestrictionsType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Levy_Deduction_Restrictions_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Tax_Levy_Deduction_Restriction flatMap { scalaxb.toXML[generated2.Tax_Levy_Deduction_RestrictionsType](_, Some("urn:com.workday/bsvc"), Some("Tax_Levy_Deduction_Restriction"), __scope, false) })

  }

  trait DefaultGenerated2_Tax_Levy_Deduction_Restriction_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Levy_Deduction_Restriction_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Levy_Deduction_Restriction_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Levy_Deduction_Restriction_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Lock_Tax_Elections")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Baseline_Deduction_Restriction_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Override_Deduction_Restriction_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Tax_Levy_Deduction_Restriction_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restriction_Baseline_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restriction_Override_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Levy_Deduction_Restriction_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Withholding_Order_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_ID"), __scope, false) } getOrElse {Nil},
        __obj.Lock_Tax_Elections map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Lock_Tax_Elections"), __scope, false) } getOrElse {Nil},
        __obj.Baseline_Deduction_Restriction_Data map { scalaxb.toXML[generated2.Tax_Levy_Deduction_Restriction_Baseline_DataType](_, Some("urn:com.workday/bsvc"), Some("Baseline_Deduction_Restriction_Data"), __scope, false) } getOrElse {Nil},
        __obj.Override_Deduction_Restriction_Data map { scalaxb.toXML[generated2.Tax_Levy_Deduction_Restriction_Override_DataType](_, Some("urn:com.workday/bsvc"), Some("Override_Deduction_Restriction_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Tax_Levy_Deduction_for_Baseline_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Levy_Deduction_for_Baseline_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Levy_Deduction_for_Baseline_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Levy_Deduction_for_Baseline_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Percent")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Tax_Levy_Deduction_for_Baseline_DataType(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.DeductionObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Levy_Deduction_for_Baseline_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_Date, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false),
        scalaxb.toXML[generated2.DeductionObjectType](__obj.Deduction_Reference, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false),
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Percent map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Percent"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Tax_Levy_Deduction_for_Override_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Levy_Deduction_for_Override_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Levy_Deduction_for_Override_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Levy_Deduction_for_Override_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Percent")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Never_Reduces_DE")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Always_Reduces_DE")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Tax_Levy_Deduction_for_Override_DataType(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.DeductionObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Levy_Deduction_for_Override_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_Date, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false),
        scalaxb.toXML[generated2.DeductionObjectType](__obj.Deduction_Reference, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false),
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Percent map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Percent"), __scope, false) } getOrElse {Nil},
        __obj.Never_Reduces_DE map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Never_Reduces_DE"), __scope, false) } getOrElse {Nil},
        __obj.Always_Reduces_DE map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Always_Reduces_DE"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Tax_Levy_Deduction_Restriction_Baseline_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Levy_Deduction_Restriction_Baseline_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Levy_Deduction_Restriction_Baseline_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Levy_Deduction_Restriction_Baseline_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Baseline_Data")) ^^
      { case p1 =>
      generated2.Tax_Levy_Deduction_Restriction_Baseline_DataType(p1 map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_for_Baseline_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Levy_Deduction_Restriction_Baseline_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Baseline_Data flatMap { scalaxb.toXML[generated2.Tax_Levy_Deduction_for_Baseline_DataType](_, Some("urn:com.workday/bsvc"), Some("Baseline_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Tax_Levy_Deduction_Restriction_Override_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Levy_Deduction_Restriction_Override_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Levy_Deduction_Restriction_Override_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Levy_Deduction_Restriction_Override_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Override_Data")) ^^
      { case p1 =>
      generated2.Tax_Levy_Deduction_Restriction_Override_DataType(p1 map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_for_Override_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Levy_Deduction_Restriction_Override_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Override_Data flatMap { scalaxb.toXML[generated2.Tax_Levy_Deduction_for_Override_DataType](_, Some("urn:com.workday/bsvc"), Some("Override_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Tax_Levy_Deduction_Restriction_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Levy_Deduction_Restriction_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Levy_Deduction_Restriction_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Levy_Deduction_Restriction_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exclude_Baseline_Restrictions")) ^^
      { case p1 =>
      generated2.Tax_Levy_Deduction_Restriction_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Levy_Deduction_Restriction_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Exclude_Baseline_Restrictions map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Exclude_Baseline_Restrictions"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Tax_Levy_Deduction_Restriction_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Tax_Levy_Deduction_Restriction_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Tax_Levy_Deduction_Restriction_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Tax_Levy_Deduction_Restriction_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Levy_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Levy_Deduction_Restriction_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Tax_Levy_Deduction_Restriction_RequestType(scalaxb.fromXML[generated2.Tax_LevyObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restriction_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Tax_Levy_Deduction_Restriction_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Tax_Levy_Deduction_Restriction_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Tax_LevyObjectType](__obj.Tax_Levy_Reference, Some("urn:com.workday/bsvc"), Some("Tax_Levy_Reference"), __scope, false),
        __obj.Tax_Levy_Deduction_Restriction_Data map { scalaxb.toXML[generated2.Tax_Levy_Deduction_Restriction_DataType](_, Some("urn:com.workday/bsvc"), Some("Tax_Levy_Deduction_Restriction_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Tax_Levy_Deduction_Restriction_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Tax_Levy_Deduction_Restriction_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Tax_Levy_Deduction_Restriction_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Tax_Levy_Deduction_Restriction_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Levy_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Levy_Deduction_Restriction_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Tax_Levy_Deduction_Restriction_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Tax_LevyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restriction_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Tax_Levy_Deduction_Restriction_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Tax_Levy_Deduction_Restriction_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Levy_Reference map { scalaxb.toXML[generated2.Tax_LevyObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Levy_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Levy_Deduction_Restriction_Data flatMap { scalaxb.toXML[generated2.Tax_Levy_Deduction_Restriction_DataType](_, Some("urn:com.workday/bsvc"), Some("Tax_Levy_Deduction_Restriction_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Tax_Levy_Deduction_RestrictionsTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Levy_Deduction_RestrictionsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Levy_Deduction_RestrictionsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Levy_Deduction_RestrictionsType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Levy_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Levy_Deduction_Restriction_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Tax_Levy_Deduction_RestrictionsType(p1.headOption map { scalaxb.fromXML[generated2.Tax_LevyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Tax_Levy_Deduction_Restriction_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Levy_Deduction_RestrictionsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Levy_Reference map { scalaxb.toXML[generated2.Tax_LevyObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Levy_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Levy_Deduction_Restriction_Data flatMap { scalaxb.toXML[generated2.Tax_Levy_Deduction_Restriction_DataType](_, Some("urn:com.workday/bsvc"), Some("Tax_Levy_Deduction_Restriction_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_ID_Data_DisplayTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_ID_Data_DisplayType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_ID_Data_DisplayType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_ID_Data_DisplayType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Assignment_Reason")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Automatic_Assignment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Payroll_ID_Data_DisplayType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_ID_Data_DisplayType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil},
        __obj.Assignment_Reason map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Assignment_Reason"), __scope, false) } getOrElse {Nil},
        __obj.Automatic_Assignment map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Automatic_Assignment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Import_Payroll_Input_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Import_Payroll_Input_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Import_Payroll_Input_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Import_Payroll_Input_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Default_Batch_ID")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Input_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Import_Payroll_Input_RequestType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2 map { scalaxb.fromXML[generated2.Submit_Payroll_Input_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Import_Payroll_Input_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Import_Payroll_Input_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Default_Batch_ID, Some("urn:com.workday/bsvc"), Some("Default_Batch_ID"), __scope, false),
        __obj.Payroll_Input_Data flatMap { scalaxb.toXML[generated2.Submit_Payroll_Input_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Input_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_History_Result_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_History_Result_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_History_Result_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_History_Result_Request_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Batch_ID_Reference")) ^^
      { case p1 =>
      generated2.Payroll_History_Result_Request_CriteriaType(p1 map { scalaxb.fromXML[generated2.Application_BatchObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_History_Result_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Batch_ID_Reference flatMap { scalaxb.toXML[generated2.Application_BatchObjectType](_, Some("urn:com.workday/bsvc"), Some("Batch_ID_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Import_Payroll_Offu45cycle_Payment_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Import_Payroll_Offu45cycle_Payment_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Import_Payroll_Off-cycle_Payment_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Import_Payroll_Offu45cycle_Payment_RequestType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Off-cycle_Payment_Data")) ^^
      { case p1 =>
      generated2.Import_Payroll_Offu45cycle_Payment_RequestType(p1 map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Payment_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Import_Payroll_Offu45cycle_Payment_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Import_Payroll_Offu45cycle_Payment_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Offu45cycle_Payment_Data flatMap { scalaxb.toXML[generated2.Payroll_Offu45cycle_Payment_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Off-cycle_Payment_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Tax_Document_Delivery_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Document_Delivery_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Document_Delivery_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Document_Delivery_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Form_Group_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Override_Default_Delivery")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Tax_Document_Delivery_DataType(scalaxb.fromXML[generated2.WorkerObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.CompanyObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectType](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Document_Delivery_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectType](__obj.Form_Group_Reference, Some("urn:com.workday/bsvc"), Some("Form_Group_Reference"), __scope, false),
        __obj.Override_Default_Delivery map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Override_Default_Delivery"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Tax_Document_Delivery_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Tax_Document_Delivery_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Tax_Document_Delivery_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Tax_Document_Delivery_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Document_Delivery_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Document_Delivery_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Tax_Document_Delivery_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Tax_Document_Delivery_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Tax_Document_Delivery_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Tax_Document_Delivery_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Document_Delivery_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Document_Delivery_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Document_Delivery_Data map { scalaxb.toXML[generated2.Tax_Document_Delivery_DataType](_, Some("urn:com.workday/bsvc"), Some("Tax_Document_Delivery_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Tax_Document_Delivery_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Tax_Document_Delivery_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Tax_Document_Delivery_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Tax_Document_Delivery_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Document_Delivery_Reference")) ^^
      { case p1 =>
      generated2.Put_Tax_Document_Delivery_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Tax_Document_Delivery_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Tax_Document_Delivery_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Tax_Document_Delivery_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Document_Delivery_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Tax_Document_Delivery_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Document_Delivery_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Document_Delivery_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Document_Delivery_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Document_Delivery_Reference")) ^^
      { case p1 =>
      generated2.Tax_Document_Delivery_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Document_Delivery_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Tax_Document_Delivery_Reference flatMap { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Document_Delivery_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Tax_Document_Delivery_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Document_Delivery_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Document_Delivery_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Document_Delivery_Request_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Form_Group_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Tax_Document_Delivery_Request_CriteriaType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Document_Delivery_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectType](__obj.Form_Group_Reference, Some("urn:com.workday/bsvc"), Some("Form_Group_Reference"), __scope, false),
        __obj.Worker_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Tax_Document_Delivery_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Document_Delivery_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Document_Delivery_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Document_Delivery_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Reference")) ^^
      { case p1 =>
      generated2.Tax_Document_Delivery_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Document_Delivery_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Include_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Tax_Document_Deliveries_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Tax_Document_Deliveries_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Tax_Document_Deliveries_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Tax_Document_Deliveries_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Tax_Document_Delivery_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Tax_Document_Delivery_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Tax_Document_Deliveries_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Tax_Document_Delivery_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Tax_Document_Deliveries_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Tax_Document_Deliveries_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_tax_document_deliveries_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Tax_Document_Deliveries_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Tax_Document_Delivery_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Tax_Document_DeliveryTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Document_DeliveryType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Document_DeliveryType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Document_DeliveryType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Document_Delivery_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Document_Delivery_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Tax_Document_DeliveryType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Tax_Document_Delivery_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Document_DeliveryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Document_Delivery_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Tax_Document_Delivery_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Document_Delivery_Data flatMap { scalaxb.toXML[generated2.Tax_Document_Delivery_DataType](_, Some("urn:com.workday/bsvc"), Some("Tax_Document_Delivery_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Tax_Document_Delivery_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Document_Delivery_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Document_Delivery_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Document_Delivery_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Document_Delivery")) ^^
      { case p1 =>
      generated2.Tax_Document_Delivery_Response_DataType(p1 map { scalaxb.fromXML[generated2.Tax_Document_DeliveryType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Tax_Document_Delivery_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Tax_Document_Delivery flatMap { scalaxb.toXML[generated2.Tax_Document_DeliveryType](_, Some("urn:com.workday/bsvc"), Some("Tax_Document_Delivery"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Tax_Document_Deliveries_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Tax_Document_Deliveries_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Tax_Document_Deliveries_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Tax_Document_Deliveries_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Tax_Document_Deliveries_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Tax_Document_Delivery_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Tax_Document_Delivery_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Tax_Document_Delivery_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Tax_Document_Delivery_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Tax_Document_Deliveries_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Tax_Document_Deliveries_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Tax_Document_Delivery_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Tax_Document_Delivery_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Tax_Document_Delivery_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Tax_Document_Delivery_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Import_ROE_Prior_Period_History_Results_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Import_ROE_Prior_Period_History_Results_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Import_ROE_Prior_Period_History_Results_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Import_ROE_Prior_Period_History_Results_RequestType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_ROE_Prior_Period_History_Results_Data")) ^^
      { case p1 =>
      generated2.Import_ROE_Prior_Period_History_Results_RequestType(p1 map { scalaxb.fromXML[generated2.Payroll_ROE_Prior_History_Results_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Import_ROE_Prior_Period_History_Results_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Import_ROE_Prior_Period_History_Results_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_ROE_Prior_Period_History_Results_Data flatMap { scalaxb.toXML[generated2.Payroll_ROE_Prior_History_Results_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_ROE_Prior_Period_History_Results_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestType(scalaxb.fromXML[generated2.Periodic_CAN_Tax_Remittance_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Periodic_CAN_Tax_Remittance_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Periodic_CAN_Tax_Remittance_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Periodic_CAN_Tax_Remittance_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Periodic_CAN_Tax_Remittance_Data_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Periodic_CAN_Tax_Remittance_Data_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Periodic_CAN_Tax_Remittance_Data_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Periodic_CAN_Tax_Remittance_Data_Request_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Related_Companies_for_Legal_Entity")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Completed_From")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Completed_To")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_WCB")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.Periodic_CAN_Tax_Remittance_Data_Request_CriteriaType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Pay_GroupObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Periodic_CAN_Tax_Remittance_Data_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        __obj.Include_Related_Companies_for_Legal_Entity map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Related_Companies_for_Legal_Entity"), __scope, false) } getOrElse {Nil},
        __obj.Result_Completed_From map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Result_Completed_From"), __scope, false) } getOrElse {Nil},
        __obj.Result_Completed_To map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Result_Completed_To"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Reference flatMap { scalaxb.toXML[generated2.Pay_GroupObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Reference"), __scope, false) },
        __obj.Period_Reference flatMap { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Reference"), __scope, false) },
        __obj.Include_WCB map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_WCB"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Periodic_CAN_Tax_Remittance_Data_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Periodic_CAN_Tax_Remittance_Data_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Periodic_CAN_Tax_Remittance_Data_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Periodic_CAN_Tax_Remittance_Data_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_MTD_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_QTD_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_YTD_Data")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Periodic_CAN_Tax_Remittance_Data_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Periodic_CAN_Tax_Remittance_Data_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Include_MTD_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_MTD_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_QTD_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_QTD_Data"), __scope, false) } getOrElse {Nil},
        __obj.Include_YTD_Data map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_YTD_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_YTD_Tax_FilterTypeFormat extends scalaxb.ElemNameParser[generated2.YTD_Tax_FilterType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("YTD_Tax_FilterType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.YTD_Tax_FilterType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Authority_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ^^
      { case p1 ~ p2 =>
      generated2.YTD_Tax_FilterType(p1 map { scalaxb.fromXML[generated2.Payroll_Tax_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Deduction__Workday_Owned_ObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.YTD_Tax_FilterType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Tax_Authority_Reference flatMap { scalaxb.toXML[generated2.Payroll_Tax_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Authority_Reference"), __scope, false) },
        __obj.Deduction_Reference flatMap { scalaxb.toXML[generated2.Deduction__Workday_Owned_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseType(scalaxb.fromXML[generated2.Periodic_CAN_Tax_Remittance_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Periodic_CAN_Tax_Remittance_Data_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Periodic_Company_CAN_Tax_Remittance_Data_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.Periodic_CAN_Tax_Remittance_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Periodic_CAN_Tax_Remittance_Data_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Periodic_Company_CAN_Tax_Remittance_Data_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Periodic_Company_CAN_Tax_Remittance_Data_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Periodic_Company_CAN_Tax_Remittance_Data_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Periodic_Company_CAN_Tax_Remittance_Data_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Periodic_Company_CAN_Tax_Remittance_Data_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Periodic_Company_CAN_Tax_Remittance_Data")) ^^
      { case p1 =>
      generated2.Periodic_Company_CAN_Tax_Remittance_Data_Response_DataType(p1 map { scalaxb.fromXML[generated2.Periodic_Company_CAN_Tax_Remittance_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Periodic_Company_CAN_Tax_Remittance_Data_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Periodic_Company_CAN_Tax_Remittance_Data flatMap { scalaxb.toXML[generated2.Periodic_Company_CAN_Tax_Remittance_DataType](_, Some("urn:com.workday/bsvc"), Some("Periodic_Company_CAN_Tax_Remittance_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Periodic_Company_CAN_Tax_Remittance_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Periodic_Company_CAN_Tax_Remittance_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Periodic_Company_CAN_Tax_Remittance_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Periodic_Company_CAN_Tax_Remittance_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Currency_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Account_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Classification_Code_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Payroll_Report_Id")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_E_Banking_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Number_Employees_Paid_Last_Period")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employer_Paid")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deduction_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Filing_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Rate")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Tax_Rate")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Insurable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Gross_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Other_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Excess_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "MTD_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "QTD_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "YTD_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 ~ p23 ~ p24 ~ p25 ~ p26 ~ p27 ~ p28 =>
      generated2.Periodic_Company_CAN_Tax_Remittance_DataType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.CurrencyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Metadata_Payroll_WorktagObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Workers_Compensation_CodeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[generated2.Periodic_Company_Tax_Filing_Pay_Group_DataType](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[generated2.Payroll_CalculationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p23.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p24.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p25.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p26.headOption map { scalaxb.fromXML[generated2.MTD_Tax_Remittance_Data_for_Periodic_CompanyType](_, scalaxb.ElemName(node) :: stack) },
        p27.headOption map { scalaxb.fromXML[generated2.QTD_Tax_Remittance_Data_for_Periodic_CompanyType](_, scalaxb.ElemName(node) :: stack) },
        p28.headOption map { scalaxb.fromXML[generated2.YTD_Tax_Remittance_Data_for_Periodic_CompanyType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Periodic_Company_CAN_Tax_Remittance_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        __obj.Period_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false) } getOrElse {Nil},
        __obj.Currency_Reference map { scalaxb.toXML[generated2.CurrencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Currency_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Tax_Authority_Reference map { scalaxb.toXML[generated2.Metadata_Payroll_WorktagObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Tax_Account_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Account_Number"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Classification_Code_Reference map { scalaxb.toXML[generated2.Workers_Compensation_CodeObjectType](_, Some("urn:com.workday/bsvc"), Some("WCB_Classification_Code_Reference"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Payroll_Report_Id map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("WCB_Payroll_Report_Id"), __scope, false) } getOrElse {Nil},
        __obj.WCB_E_Banking_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("WCB_E_Banking_Number"), __scope, false) } getOrElse {Nil},
        __obj.Number_Employees_Paid_Last_Period map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Number_Employees_Paid_Last_Period"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Data flatMap { scalaxb.toXML[generated2.Periodic_Company_Tax_Filing_Pay_Group_DataType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Data"), __scope, false) },
        __obj.Period_Reference flatMap { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Reference"), __scope, false) },
        __obj.Employer_Paid map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Employer_Paid"), __scope, false) } getOrElse {Nil},
        __obj.Deduction_Reference map { scalaxb.toXML[generated2.Payroll_CalculationObjectType](_, Some("urn:com.workday/bsvc"), Some("Deduction_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Filing_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Tax_Filing_Code"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Rate map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Rate"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Tax_Rate map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Tax_Rate"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Exempt_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Exempt_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Insurable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Insurable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Gross_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Other_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Other_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Excess_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Excess_Wages"), __scope, false) } getOrElse {Nil},
        __obj.MTD_Data map { scalaxb.toXML[generated2.MTD_Tax_Remittance_Data_for_Periodic_CompanyType](_, Some("urn:com.workday/bsvc"), Some("MTD_Data"), __scope, false) } getOrElse {Nil},
        __obj.QTD_Data map { scalaxb.toXML[generated2.QTD_Tax_Remittance_Data_for_Periodic_CompanyType](_, Some("urn:com.workday/bsvc"), Some("QTD_Data"), __scope, false) } getOrElse {Nil},
        __obj.YTD_Data map { scalaxb.toXML[generated2.YTD_Tax_Remittance_Data_for_Periodic_CompanyType](_, Some("urn:com.workday/bsvc"), Some("YTD_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_MTD_Tax_Remittance_Data_for_Periodic_CompanyTypeFormat extends scalaxb.ElemNameParser[generated2.MTD_Tax_Remittance_Data_for_Periodic_CompanyType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("MTD_Tax_Remittance_Data_for_Periodic_CompanyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.MTD_Tax_Remittance_Data_for_Periodic_CompanyType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Insurable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Gross_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Other_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Excess_Wages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.MTD_Tax_Remittance_Data_for_Periodic_CompanyType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.MTD_Tax_Remittance_Data_for_Periodic_CompanyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Exempt_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Exempt_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Insurable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Insurable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Gross_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Other_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Other_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Excess_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Excess_Wages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_QTD_Tax_Remittance_Data_for_Periodic_CompanyTypeFormat extends scalaxb.ElemNameParser[generated2.QTD_Tax_Remittance_Data_for_Periodic_CompanyType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("QTD_Tax_Remittance_Data_for_Periodic_CompanyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.QTD_Tax_Remittance_Data_for_Periodic_CompanyType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Insurable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Gross_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Other_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Excess_Wages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.QTD_Tax_Remittance_Data_for_Periodic_CompanyType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.QTD_Tax_Remittance_Data_for_Periodic_CompanyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Exempt_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Exempt_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Insurable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Insurable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Gross_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Other_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Other_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Excess_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Excess_Wages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_YTD_Tax_Remittance_Data_for_Periodic_CompanyTypeFormat extends scalaxb.ElemNameParser[generated2.YTD_Tax_Remittance_Data_for_Periodic_CompanyType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("YTD_Tax_Remittance_Data_for_Periodic_CompanyType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.YTD_Tax_Remittance_Data_for_Periodic_CompanyType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Subject_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Insurable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Gross_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Other_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "WCB_Excess_Wages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.YTD_Tax_Remittance_Data_for_Periodic_CompanyType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.YTD_Tax_Remittance_Data_for_Periodic_CompanyType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Subject_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Subject_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Exempt_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Exempt_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Insurable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Insurable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Gross_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Gross_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Other_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Other_Wages"), __scope, false) } getOrElse {Nil},
        __obj.WCB_Excess_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("WCB_Excess_Wages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "California_Local_Minimum_Wage_Data")) ^^
      { case p1 =>
      generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestType(p1 map { scalaxb.fromXML[generated2.Put_Withholding_Order_Local_Minimum_Wage_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.California_Local_Minimum_Wage_Data flatMap { scalaxb.toXML[generated2.Put_Withholding_Order_Local_Minimum_Wage_DataType](_, Some("urn:com.workday/bsvc"), Some("California_Local_Minimum_Wage_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Put_Withholding_Order_Local_Minimum_Wage_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Withholding_Order_Local_Minimum_Wage_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Withholding_Order_Local_Minimum_Wage_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Withholding_Order_Local_Minimum_Wage_DataType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Involuntary_Withholding_Order_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Withholding_OrderObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Local_Minimum_Wage_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Unique_IdentifierObjectType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Local_Minimum_Wage")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Put_Withholding_Order_Local_Minimum_Wage_DataType(p1,
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Put_Withholding_Order_Local_Minimum_Wage_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.put_withholding_order_local_minimum_wage_datatypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Put_Withholding_Order_Local_Minimum_Wage_DataTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_Date, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false),
        __obj.Local_Minimum_Wage map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Local_Minimum_Wage"), __scope, false) } getOrElse {Nil},
        __obj.Comment map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Comment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Local_Minimum_Wage_Reference")) ^^
      { case p1 =>
      generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Local_Minimum_Wage_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Local_Minimum_Wage_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ^^
      { case p1 ~ p2 =>
      generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Withholding_Order_Local_Minimum_Wage_Rate_RequestType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_Criteria map { scalaxb.toXML[generated2.Withholding_Order_Local_Minimum_Wage_Rate_RequestType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Withholding_Order_Local_Minimum_Wage_Rate_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Withholding_Order_Local_Minimum_Wage_Rate_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Withholding_Order_Local_Minimum_Wage_Rate_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Withholding_Order_Local_Minimum_Wage_Rate_RequestType] =
      phrase(safeRep(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.CompanyObjectType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.WorkerObjectType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      generated2.Withholding_Order_Local_Minimum_Wage_Rate_RequestType(p1) })
    
    def writesChildNodes(__obj: generated2.Withholding_Order_Local_Minimum_Wage_Rate_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.withholding_order_local_minimum_wage_rate_requesttypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Withholding_Order_Local_Minimum_Wage_Rate_RequestTypeOption]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultGenerated2_Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Withholding_Order_Local_Minimum_Wage_Rate_RequestType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Get_Withholding_Order_Local_Minimum_Wage_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_Criteria map { scalaxb.toXML[generated2.Withholding_Order_Local_Minimum_Wage_Rate_RequestType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Request_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Request_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Get_Withholding_Order_Local_Minimum_Wage_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Withholding_Order_Local_Minimum_Wage_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Withholding_Order_Local_Minimum_Wage_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Withholding_Order_Local_Minimum_Wage_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Withholding_Order_Local_Minimum_Wage_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Local_Minimum_Wage_Data")) ^^
      { case p1 =>
      generated2.Get_Withholding_Order_Local_Minimum_Wage_Response_DataType(p1 map { scalaxb.fromXML[generated2.Get_Withholding_Order_Local_Minimum_Wage_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Get_Withholding_Order_Local_Minimum_Wage_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Withholding_Order_Local_Minimum_Wage_Data flatMap { scalaxb.toXML[generated2.Get_Withholding_Order_Local_Minimum_Wage_DataType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Local_Minimum_Wage_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Withholding_Order_Local_Minimum_Wage_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Withholding_Order_Local_Minimum_Wage_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Withholding_Order_Local_Minimum_Wage_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Withholding_Order_Local_Minimum_Wage_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Local_Minimum_Wage_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Local_Minimum_Wage_Rate")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Comment")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated2.Get_Withholding_Order_Local_Minimum_Wage_DataType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Withholding_OrderObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Get_Withholding_Order_Local_Minimum_Wage_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Local_Minimum_Wage_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Local_Minimum_Wage_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Withholding_Order_Reference map { scalaxb.toXML[generated2.Withholding_OrderObjectType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil},
        __obj.Local_Minimum_Wage_Rate map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Local_Minimum_Wage_Rate"), __scope, false) } getOrElse {Nil},
        __obj.Comment map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Comment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Tax_Mappings_on_Location_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Tax_Mappings_on_Location_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Tax_Mappings_on_Location_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Tax_Mappings_on_Location_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Tax_Mappings_on_Location_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Tax_Mappings_on_Location_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ^^
      { case p1 ~ p2 =>
      generated2.Get_Payroll_Tax_Mappings_on_Location_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Tax_Mappings_on_Location_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Tax_Mappings_on_Location_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_tax_mappings_on_location_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Tax_Mappings_on_Location_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Tax_Mappings_on_Location_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Tax_Mappings_on_Location_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Tax_Mappings_on_Location_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Tax_Mappings_on_Location_ResponseType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      safeRep(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Tax_Mappings_on_Location_Response_DataType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Payroll_Tax_Mappings_on_Location_ResponseType(p1 map { scalaxb.fromXML[generated2.Payroll_Tax_Mappings_on_Location_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Tax_Mappings_on_Location_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5,
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Tax_Mappings_on_Location_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Tax_Mappings_on_Location_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_Reference flatMap { scalaxb.toXML[generated2.Payroll_Tax_Mappings_on_Location_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_Reference"), __scope, false) },
        __obj.Request_Criteria flatMap { scalaxb.toXML[generated2.Payroll_Tax_Mappings_on_Location_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) },
        __obj.Response_Filter flatMap { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) },
        __obj.Response_Results flatMap { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) },
        __obj.get_payroll_tax_mappings_on_location_responsetypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Payroll_Tax_Mappings_on_Location_Response_DataType]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Tax_Mappings_on_Location_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Tax_Mappings_on_Location_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Tax_Mappings_on_Location_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Tax_Mappings_on_Location_Request_CriteriaType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Location_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date_Reference")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Tax_Mappings_on_Location_Request_CriteriaType(p1 map { scalaxb.fromXML[generated2.LocationObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Tax_Mappings_on_Location_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Location_Reference flatMap { scalaxb.toXML[generated2.LocationObjectType](_, Some("urn:com.workday/bsvc"), Some("Location_Reference"), __scope, false) },
        __obj.Effective_Date_Reference map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Tax_Location_Mapping_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Tax_Location_Mapping_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Tax_Location_Mapping_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Tax_Location_Mapping_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Location_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactive")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_State_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_County_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Local_City_Authority_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Other_Authority_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated2.Payroll_Tax_Location_Mapping_DataType(scalaxb.fromXML[generated2.LocationObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_Local_County_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Payroll_Local_City_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Payroll_Other_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Tax_Location_Mapping_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.LocationObjectType](__obj.Location_Reference, Some("urn:com.workday/bsvc"), Some("Location_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_Date, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false),
        __obj.Inactive map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactive"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_State_Authority_Reference map { scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_State_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Local_County_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Local_County_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_County_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Local_City_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Local_City_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Local_City_Authority_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Other_Authority_Reference map { scalaxb.toXML[generated2.Payroll_Other_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Other_Authority_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Tax_Mappings_on_Location_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Tax_Mappings_on_Location_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Tax_Mappings_on_Location_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Tax_Mappings_on_Location_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Location_Mapping")) ^^
      { case p1 =>
      generated2.Payroll_Tax_Mappings_on_Location_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Tax_Location_MappingType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Tax_Mappings_on_Location_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Tax_Location_Mapping flatMap { scalaxb.toXML[generated2.Payroll_Tax_Location_MappingType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Location_Mapping"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Tax_Mappings_on_Location_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Tax_Mappings_on_Location_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Tax_Mappings_on_Location_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Tax_Mappings_on_Location_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Location_Mapping_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Tax_Mappings_on_Location_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_Tax_Location_MappingObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Tax_Mappings_on_Location_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Tax_Location_Mapping_Reference flatMap { scalaxb.toXML[generated2.Payroll_Tax_Location_MappingObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Location_Mapping_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Tax_Location_MappingTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Tax_Location_MappingType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Tax_Location_MappingType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Tax_Location_MappingType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Location_Mapping_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Location_Mapping_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Tax_Location_MappingType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Tax_Location_MappingObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Tax_Location_Mapping_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Tax_Location_MappingType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Tax_Location_Mapping_Reference map { scalaxb.toXML[generated2.Payroll_Tax_Location_MappingObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Location_Mapping_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Tax_Location_Mapping_Data map { scalaxb.toXML[generated2.Payroll_Tax_Location_Mapping_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Location_Mapping_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Tax_Mapping_on_Location_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Tax_Mapping_on_Location_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Tax_Mapping_on_Location_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Tax_Mapping_on_Location_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Tax_Location_Mapping_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_Tax_Mapping_on_Location_RequestType(scalaxb.fromXML[generated2.Payroll_Tax_Location_Mapping_DataType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Tax_Mapping_on_Location_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Tax_Mapping_on_Location_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.Payroll_Tax_Location_Mapping_DataType](__obj.Payroll_Tax_Location_Mapping_Data, Some("urn:com.workday/bsvc"), Some("Payroll_Tax_Location_Mapping_Data"), __scope, false))

  }

  trait DefaultGenerated2_Put_Payroll_Tax_Mapping_on_Location_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Tax_Mapping_on_Location_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Tax_Mapping_on_Location_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Tax_Mapping_on_Location_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Put_Payroll_Tax_Location_Mapping_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Put_Payroll_Tax_Location_Mapping_Response_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Payroll_Tax_Mapping_on_Location_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Tax_Location_MappingObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Put_Payroll_Tax_Location_Mapping_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Tax_Mapping_on_Location_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Tax_Mapping_on_Location_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Put_Payroll_Tax_Location_Mapping_Reference map { scalaxb.toXML[generated2.Payroll_Tax_Location_MappingObjectType](_, Some("urn:com.workday/bsvc"), Some("Put_Payroll_Tax_Location_Mapping_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Put_Payroll_Tax_Location_Mapping_Response_Data map { scalaxb.toXML[generated2.Put_Payroll_Tax_Location_Mapping_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Put_Payroll_Tax_Location_Mapping_Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Payroll_Tax_Location_Mapping_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Tax_Location_Mapping_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Tax_Location_Mapping_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Tax_Location_Mapping_Response_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactive")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_State_Authority_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Put_Payroll_Tax_Location_Mapping_Response_DataType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Put_Payroll_Tax_Location_Mapping_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil},
        __obj.Inactive map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactive"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_State_Authority_Reference map { scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_State_Authority_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Run_Pay_Calculation_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_or_Pay_Run_Group_Selection_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Smart_Calculation_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Based_on_Events_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Requires_ReCalculation")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Error")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Not_Yet_Started")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_In_Progress")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Accounting_Only_for_Calculation_Criteria")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      generated2.Run_Pay_Calculation_DataType(p1.headOption map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Pay_Group_Pay_Run_Group_SelectionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Run_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Payroll_Event_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Period_Reference map { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_or_Pay_Run_Group_Selection_Reference flatMap { scalaxb.toXML[generated2.Pay_Group_Pay_Run_Group_SelectionObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_or_Pay_Run_Group_Selection_Reference"), __scope, false) },
        __obj.Run_Category_Reference map { scalaxb.toXML[generated2.Run_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Smart_Calculation_Reference map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Smart_Calculation_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Based_on_Events_Reference flatMap { scalaxb.toXML[generated2.Payroll_Event_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Based_on_Events_Reference"), __scope, false) },
        __obj.Include_Requires_ReCalculation map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Requires_ReCalculation"), __scope, false) } getOrElse {Nil},
        __obj.Include_Error map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Error"), __scope, false) } getOrElse {Nil},
        __obj.Include_Not_Yet_Started map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Not_Yet_Started"), __scope, false) } getOrElse {Nil},
        __obj.Include_In_Progress map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_In_Progress"), __scope, false) } getOrElse {Nil},
        __obj.Accounting_Only_for_Calculation_Criteria map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Accounting_Only_for_Calculation_Criteria"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Put_Run_Pay_Calculation_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Run_Pay_Calculation_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Run_Pay_Calculation_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Run_Pay_Calculation_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation_Data")) ^^
      { case p1 =>
      generated2.Put_Run_Pay_Calculation_RequestType(scalaxb.fromXML[generated2.Run_Pay_Calculation_DataType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Run_Pay_Calculation_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Run_Pay_Calculation_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.Run_Pay_Calculation_DataType](__obj.Run_Pay_Calculation_Data, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation_Data"), __scope, false))

  }

  trait DefaultGenerated2_Put_Run_Pay_Calculation_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Run_Pay_Calculation_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Run_Pay_Calculation_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Run_Pay_Calculation_ResponseType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Application_Instance_Related_Exceptions_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Background_Process_Runtime_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Run_Pay_Calculation_ResponseType(p1 map { scalaxb.fromXML[generated2.Application_Instance_Related_Exceptions_DataType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Background_Process_Runtime_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Run_Pay_Calculation_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Run_Pay_Calculation_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Application_Instance_Related_Exceptions_Data flatMap { scalaxb.toXML[generated2.Application_Instance_Related_Exceptions_DataType](_, Some("urn:com.workday/bsvc"), Some("Application_Instance_Related_Exceptions_Data"), __scope, false) },
        __obj.Background_Process_Runtime_Data flatMap { scalaxb.toXML[generated2.Background_Process_Runtime_DataType](_, Some("urn:com.workday/bsvc"), Some("Background_Process_Runtime_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Background_Process_Runtime_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Background_Process_Runtime_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Background_Process_Runtime_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Background_Process_Runtime_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Background_Process_Message_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Background_Process_Runtime_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Background_Process_Message_Data_WSType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Background_Process_Runtime_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) } getOrElse {Nil},
        __obj.Background_Process_Message_Data flatMap { scalaxb.toXML[generated2.Background_Process_Message_Data_WSType](_, Some("urn:com.workday/bsvc"), Some("Background_Process_Message_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Get_EFW2_Year_End_Worker_Filing_Data_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_EFW2_Year_End_Worker_Filing_Data_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_EFW2_Year_End_Worker_Filing_Data_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_EFW2_Year_End_Worker_Filing_Data_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ^^
      { case p1 ~ p2 =>
      generated2.Get_EFW2_Year_End_Worker_Filing_Data_RequestType(scalaxb.fromXML[generated2.EFW2_Year_End_Worker_Filing_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_EFW2_Year_End_Worker_Filing_Data_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_EFW2_Year_End_Worker_Filing_Data_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.EFW2_Year_End_Worker_Filing_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_EFW2_Year_End_Worker_Filing_Data_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Worker_Filing_Data_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Worker_Filing_Data_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Worker_Filing_Data_Request_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calendar_Year_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_All_Workers")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.EFW2_Year_End_Worker_Filing_Data_Request_CriteriaType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Calendar_YearObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Worker_Filing_Data_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.Calendar_YearObjectType](__obj.Calendar_Year_Reference, Some("urn:com.workday/bsvc"), Some("Calendar_Year_Reference"), __scope, false),
        __obj.Include_All_Workers map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_All_Workers"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_EFW2_Year_End_Worker_Filing_Data_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_EFW2_Year_End_Worker_Filing_Data_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_EFW2_Year_End_Worker_Filing_Data_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_EFW2_Year_End_Worker_Filing_Data_ResponseType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Get_EFW2_Year_End_Worker_Filing_Data_ResponseType(scalaxb.fromXML[generated2.EFW2_Year_End_Worker_Filing_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.EFW2_Year_End_Worker_Filing_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_EFW2_Year_End_Worker_Filing_Data_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_EFW2_Year_End_Worker_Filing_Data_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.EFW2_Year_End_Worker_Filing_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.EFW2_Year_End_Worker_Filing_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_EFW2_Year_End_Worker_Filing_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Worker_Filing_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Worker_Filing_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Worker_Filing_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Year_End_Worker_Filing")) ^^
      { case p1 =>
      generated2.EFW2_Year_End_Worker_Filing_Response_DataType(p1 map { scalaxb.fromXML[generated2.EFW2_Year_End_Worker_FilingType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Worker_Filing_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.EFW2_Year_End_Worker_Filing flatMap { scalaxb.toXML[generated2.EFW2_Year_End_Worker_FilingType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Year_End_Worker_Filing"), __scope, false) })

  }

  trait DefaultGenerated2_EFW2_Year_End_Worker_FilingTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Worker_FilingType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Worker_FilingType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Worker_FilingType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "W-2_Instance_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Completed_Moment")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Year_End_Worker_Filing_Data")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.EFW2_Year_End_Worker_FilingType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.EFW2_Year_End_Worker_Filing_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Worker_FilingType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Wu452_Instance_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("W-2_Instance_ID"), __scope, false) } getOrElse {Nil},
        __obj.Completed_Moment map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Completed_Moment"), __scope, false) } getOrElse {Nil},
        __obj.EFW2_Year_End_Worker_Filing_Data map { scalaxb.toXML[generated2.EFW2_Year_End_Worker_Filing_DataType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Year_End_Worker_Filing_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_EFW2_Year_End_Worker_Filing_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Worker_Filing_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Worker_Filing_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Worker_Filing_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SSN")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_First_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Middle_Initial")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Last_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Suffix")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Address_Line_1")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Address_Line_2")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "City")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Postal_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Country_Name")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Year_End_Worker_Box_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Deferred_and_Other_Compensation_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Additional_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Other_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Year_End_Worker_State_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 =>
      generated2.EFW2_Year_End_Worker_Filing_DataType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[generated2.EFW2_Year_End_Worker_Box_DataType](_, scalaxb.ElemName(node) :: stack) },
        p14 map { scalaxb.fromXML[generated2.EFW2_Deferred_and_Other_Compensation_DataType](_, scalaxb.ElemName(node) :: stack) },
        p15 map { scalaxb.fromXML[generated2.EFW2_Additional_DataType](_, scalaxb.ElemName(node) :: stack) },
        p16 map { scalaxb.fromXML[generated2.EFW2_Other_DataType](_, scalaxb.ElemName(node) :: stack) },
        p17 map { scalaxb.fromXML[generated2.EFW2_Year_End_Worker_State_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Worker_Filing_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.SSN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("SSN"), __scope, false) } getOrElse {Nil},
        __obj.Employee_First_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Employee_First_Name"), __scope, false) } getOrElse {Nil},
        __obj.Employee_Middle_Initial map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Employee_Middle_Initial"), __scope, false) } getOrElse {Nil},
        __obj.Employee_Last_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Employee_Last_Name"), __scope, false) } getOrElse {Nil},
        __obj.Suffix map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Suffix"), __scope, false) } getOrElse {Nil},
        __obj.Address_Line_1 map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Address_Line_1"), __scope, false) } getOrElse {Nil},
        __obj.Address_Line_2 map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Address_Line_2"), __scope, false) } getOrElse {Nil},
        __obj.City map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("City"), __scope, false) } getOrElse {Nil},
        __obj.State map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("State"), __scope, false) } getOrElse {Nil},
        __obj.Postal_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Postal_Code"), __scope, false) } getOrElse {Nil},
        __obj.Country_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Country_Name"), __scope, false) } getOrElse {Nil},
        __obj.EFW2_Year_End_Worker_Box_Data flatMap { scalaxb.toXML[generated2.EFW2_Year_End_Worker_Box_DataType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Year_End_Worker_Box_Data"), __scope, false) },
        __obj.EFW2_Deferred_and_Other_Compensation_Data flatMap { scalaxb.toXML[generated2.EFW2_Deferred_and_Other_Compensation_DataType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Deferred_and_Other_Compensation_Data"), __scope, false) },
        __obj.EFW2_Additional_Data flatMap { scalaxb.toXML[generated2.EFW2_Additional_DataType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Additional_Data"), __scope, false) },
        __obj.EFW2_Other_Data flatMap { scalaxb.toXML[generated2.EFW2_Other_DataType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Other_Data"), __scope, false) },
        __obj.EFW2_Year_End_Worker_State_Data flatMap { scalaxb.toXML[generated2.EFW2_Year_End_Worker_State_DataType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Year_End_Worker_State_Data"), __scope, false) })

  }

  trait DefaultGenerated2_EFW2_Year_End_Worker_Box_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Worker_Box_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Worker_Box_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Worker_Box_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Box_Description")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ^^
      { case p1 ~ p2 =>
      generated2.EFW2_Year_End_Worker_Box_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Worker_Box_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Box_Description map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Box_Description"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_ID_Balance_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_ID_Balance_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_ID_Balance_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_ID_Balance_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_ID_Detail_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Balance_Amount")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_ID_Balance_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_ID_Data_DisplayType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_ID_Balance_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_ID_Detail_Data flatMap { scalaxb.toXML[generated2.Payroll_ID_Data_DisplayType](_, Some("urn:com.workday/bsvc"), Some("Payroll_ID_Detail_Data"), __scope, false) },
        __obj.Balance_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Balance_Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_EFW2_Deferred_and_Other_Compensation_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Deferred_and_Other_Compensation_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Deferred_and_Other_Compensation_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Deferred_and_Other_Compensation_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Year")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.EFW2_Deferred_and_Other_Compensation_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Deferred_and_Other_Compensation_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil},
        __obj.Year map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Year"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Puerto_Rico_Annual_Tax_Data_WrapperTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Puerto_Rico_Annual_Tax_Data_WrapperType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Puerto_Rico_Annual_Tax_Data_WrapperType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Puerto_Rico_Annual_Tax_Data_WrapperType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Puerto_Rico_Annual_Tax_Data")) ^^
      { case p1 =>
      generated2.Worker_Puerto_Rico_Annual_Tax_Data_WrapperType(p1 map { scalaxb.fromXML[generated2.Worker_Puerto_Rico_Annual_Tax_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Puerto_Rico_Annual_Tax_Data_WrapperType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_Puerto_Rico_Annual_Tax_Data flatMap { scalaxb.toXML[generated2.Worker_Puerto_Rico_Annual_Tax_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_Puerto_Rico_Annual_Tax_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Worker_Puerto_Rico_Annual_Tax_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Puerto_Rico_Annual_Tax_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Puerto_Rico_Annual_Tax_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Puerto_Rico_Annual_Tax_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_W-2PR_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employer_Sponsored_Health_Care")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Charitable_Contributions")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Commissions")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Allowances")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Reimbursed_Expenses")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Governmental_Retirement_Fund")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Contributions_to_CODA_Plans")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Exempt_Salaries_and_Codes")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Contributions_to_SADYM_Program")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Uncollected_Social_Security_Tax_on_Tips")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Uncollected_Medicare_Tax_on_Tips")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Control_Number")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      generated2.Worker_Puerto_Rico_Annual_Tax_DataType(p1 map { scalaxb.fromXML[generated2.Worker_Wu452PR_DataType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9 map { scalaxb.fromXML[generated2.Box_16_Data_WrapperType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Puerto_Rico_Annual_Tax_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Wu452PR_Data flatMap { scalaxb.toXML[generated2.Worker_Wu452PR_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_W-2PR_Data"), __scope, false) },
        __obj.Employer_Sponsored_Health_Care map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Employer_Sponsored_Health_Care"), __scope, false) } getOrElse {Nil},
        __obj.Charitable_Contributions map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Charitable_Contributions"), __scope, false) } getOrElse {Nil},
        __obj.Commissions map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Commissions"), __scope, false) } getOrElse {Nil},
        __obj.Allowances map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Allowances"), __scope, false) } getOrElse {Nil},
        __obj.Reimbursed_Expenses map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Reimbursed_Expenses"), __scope, false) } getOrElse {Nil},
        __obj.Governmental_Retirement_Fund map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Governmental_Retirement_Fund"), __scope, false) } getOrElse {Nil},
        __obj.Contributions_to_CODA_Plans map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Contributions_to_CODA_Plans"), __scope, false) } getOrElse {Nil},
        __obj.Exempt_Salaries_and_Codes flatMap { scalaxb.toXML[generated2.Box_16_Data_WrapperType](_, Some("urn:com.workday/bsvc"), Some("Exempt_Salaries_and_Codes"), __scope, false) },
        __obj.Contributions_to_SADYM_Program map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Contributions_to_SADYM_Program"), __scope, false) } getOrElse {Nil},
        __obj.Uncollected_Social_Security_Tax_on_Tips map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Uncollected_Social_Security_Tax_on_Tips"), __scope, false) } getOrElse {Nil},
        __obj.Uncollected_Medicare_Tax_on_Tips map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Uncollected_Medicare_Tax_on_Tips"), __scope, false) } getOrElse {Nil},
        __obj.Control_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Control_Number"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Box_16_Au45A_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Box_16_Au45A_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Box_16_A-A_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Box_16_Au45A_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ^^
      { case p1 ~ p2 =>
      generated2.Box_16_Au45A_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Box_16_Au45A_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Box_16_Au45B_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Box_16_Au45B_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Box_16_A-B_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Box_16_Au45B_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ^^
      { case p1 ~ p2 =>
      generated2.Box_16_Au45B_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Box_16_Au45B_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Box_16_Data_WrapperTypeFormat extends scalaxb.ElemNameParser[generated2.Box_16_Data_WrapperType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Box_16_Data_WrapperType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Box_16_Data_WrapperType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Overtime_During_Emergency")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Overtime_By_Police_Member")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Stipends")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Compensation_for_Researcher_or_Scientist")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Salary_Not_Over_40K")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Vacation_and_Sick_Pay_Public_Employees")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Disaster_Assistance")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      generated2.Box_16_Data_WrapperType(p1 map { scalaxb.fromXML[generated2.Box_16_Au45A_DataType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Box_16_Au45B_DataType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Box_16_Au45C_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Box_16_Au45D_DataType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Box_16_Au45E_DataType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Box_16_Au45F_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[generated2.Box_16_Au45G_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Box_16_Data_WrapperType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Overtime_During_Emergency flatMap { scalaxb.toXML[generated2.Box_16_Au45A_DataType](_, Some("urn:com.workday/bsvc"), Some("Overtime_During_Emergency"), __scope, false) },
        __obj.Overtime_By_Police_Member flatMap { scalaxb.toXML[generated2.Box_16_Au45B_DataType](_, Some("urn:com.workday/bsvc"), Some("Overtime_By_Police_Member"), __scope, false) },
        __obj.Stipends flatMap { scalaxb.toXML[generated2.Box_16_Au45C_DataType](_, Some("urn:com.workday/bsvc"), Some("Stipends"), __scope, false) },
        __obj.Compensation_for_Researcher_or_Scientist flatMap { scalaxb.toXML[generated2.Box_16_Au45D_DataType](_, Some("urn:com.workday/bsvc"), Some("Compensation_for_Researcher_or_Scientist"), __scope, false) },
        __obj.Salary_Not_Over_40K flatMap { scalaxb.toXML[generated2.Box_16_Au45E_DataType](_, Some("urn:com.workday/bsvc"), Some("Salary_Not_Over_40K"), __scope, false) },
        __obj.Vacation_and_Sick_Pay_Public_Employees flatMap { scalaxb.toXML[generated2.Box_16_Au45F_DataType](_, Some("urn:com.workday/bsvc"), Some("Vacation_and_Sick_Pay_Public_Employees"), __scope, false) },
        __obj.Disaster_Assistance flatMap { scalaxb.toXML[generated2.Box_16_Au45G_DataType](_, Some("urn:com.workday/bsvc"), Some("Disaster_Assistance"), __scope, false) })

  }

  trait DefaultGenerated2_Box_16_Au45C_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Box_16_Au45C_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Box_16_A-C_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Box_16_Au45C_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ^^
      { case p1 ~ p2 =>
      generated2.Box_16_Au45C_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Box_16_Au45C_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Box_16_Au45D_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Box_16_Au45D_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Box_16_A-D_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Box_16_Au45D_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ^^
      { case p1 ~ p2 =>
      generated2.Box_16_Au45D_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Box_16_Au45D_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Box_16_Au45E_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Box_16_Au45E_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Box_16_A-E_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Box_16_Au45E_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ^^
      { case p1 ~ p2 =>
      generated2.Box_16_Au45E_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Box_16_Au45E_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Wu452PR_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Wu452PR_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_W-2PR_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Wu452PR_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "W-2PR_Instance_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Completed_Moment")) ^^
      { case p1 ~ p2 =>
      generated2.Worker_Wu452PR_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Wu452PR_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Wu452PR_Instance_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("W-2PR_Instance_ID"), __scope, false) } getOrElse {Nil},
        __obj.Completed_Moment map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Completed_Moment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Withholding_Order_Withholding_Frequency_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Withholding_Order_Withholding_Frequency_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Withholding_Order_Withholding_Frequency_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Withholding_Order_Withholding_Frequency_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Withholding_Order_Withholding_Frequency_Reference")) ^^
      { case p1 =>
      generated2.Withholding_Order_Withholding_Frequency_DataType(p1 map { scalaxb.fromXML[generated2.Withholding_Order_Withholding_FrequencyObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Withholding_Order_Withholding_Frequency_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Withholding_Order_Withholding_Frequency_Reference flatMap { scalaxb.toXML[generated2.Withholding_Order_Withholding_FrequencyObjectType](_, Some("urn:com.workday/bsvc"), Some("Withholding_Order_Withholding_Frequency_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_EFW2_Other_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Other_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Other_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Other_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Label")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Plan_Number")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.EFW2_Other_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Other_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Label map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Label"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Plan_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Plan_Number"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_EFW2_Additional_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Additional_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Additional_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Additional_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Statutory_Employee")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Retirement_Plan")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.EFW2_Additional_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Additional_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Statutory_Employee map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Statutory_Employee"), __scope, false) } getOrElse {Nil},
        __obj.Retirement_Plan map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Retirement_Plan"), __scope, false) } getOrElse {Nil},
        __obj.Third_Party_Sick_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_EFW2_Year_End_Worker_State_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Worker_State_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Worker_State_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Worker_State_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_EIN")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_FIPS_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State_Tax_Withheld")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Year_End_Worker_Local_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.EFW2_Year_End_Worker_State_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.EFW2_Year_End_Worker_Local_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Worker_State_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.State_EIN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("State_EIN"), __scope, false) } getOrElse {Nil},
        __obj.State map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("State"), __scope, false) } getOrElse {Nil},
        __obj.State_FIPS_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("State_FIPS_Code"), __scope, false) } getOrElse {Nil},
        __obj.State_Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("State_Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.State_Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("State_Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.EFW2_Year_End_Worker_Local_Data flatMap { scalaxb.toXML[generated2.EFW2_Year_End_Worker_Local_DataType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Year_End_Worker_Local_Data"), __scope, false) })

  }

  trait DefaultGenerated2_EFW2_Year_End_Worker_Local_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Worker_Local_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Worker_Local_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Worker_Local_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Locality")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Tax_Type_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Local_Taxable_Wages")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Local_Tax_Withheld")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Other_Information")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.EFW2_Year_End_Worker_Local_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Worker_Local_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Locality map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Locality"), __scope, false) } getOrElse {Nil},
        __obj.Tax_Type_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Tax_Type_Code"), __scope, false) } getOrElse {Nil},
        __obj.Local_Taxable_Wages map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Local_Taxable_Wages"), __scope, false) } getOrElse {Nil},
        __obj.Local_Tax_Withheld map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Local_Tax_Withheld"), __scope, false) } getOrElse {Nil},
        __obj.Other_Information map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Other_Information"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Preu45Printed_Payslips_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Preu45Printed_Payslips_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Pre-Printed_Payslips_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Preu45Printed_Payslips_RequestType] =
      phrase((((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Preu45Printed_Payslips_Request_ReferenceType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Preu45Printed_Payslips_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Payroll_Preu45Printed_Payslips_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Payroll_Preu45Printed_Payslips_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Preu45Printed_Payslips_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Preu45Printed_Payslips_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat((Some(__obj.get_payroll_preu45printed_payslips_requesttypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Preu45Printed_Payslips_RequestTypeOption]](x, x.namespace, x.key, __scope, false)}).get,
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Payroll_Preu45Printed_Payslips_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Preu45Printed_Payslips_Request_ReferenceTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Preu45Printed_Payslips_Request_ReferenceType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Pre-Printed_Payslips_Request_ReferenceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Preu45Printed_Payslips_Request_ReferenceType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Pre-Printed_Payslips_Request_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Preu45Printed_Payslips_Request_ReferenceType(p1 map { scalaxb.fromXML[generated2.Repository_DocumentObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Preu45Printed_Payslips_Request_ReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Preu45Printed_Payslips_Request_Reference flatMap { scalaxb.toXML[generated2.Repository_DocumentObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Pre-Printed_Payslips_Request_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Preu45Printed_Payslips_Response_GroupTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Preu45Printed_Payslips_Response_GroupType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Preu45Printed_Payslips_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Preu45Printed_Payslips_Response_GroupType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Preu45Printed_Payslips_Response_GroupType())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: generated2.Payroll_Preu45Printed_Payslips_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultGenerated2_Payroll_Preu45Printed_Payslips_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Preu45Printed_Payslips_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Pre-Printed_Payslips_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Preu45Printed_Payslips_Request_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pre-Printed_Payslip_Creation_From_Moment")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pre-Printed_Payslip_Creation_To_Moment")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Run_Group_Selection_Reference")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Preu45Printed_Payslips_Request_CriteriaType(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack),
        p3 map { scalaxb.fromXML[generated2.Pay_Run_Group_SelectionObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Preu45Printed_Payslips_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Preu45Printed_Payslip_Creation_From_Moment, Some("urn:com.workday/bsvc"), Some("Pre-Printed_Payslip_Creation_From_Moment"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Preu45Printed_Payslip_Creation_To_Moment, Some("urn:com.workday/bsvc"), Some("Pre-Printed_Payslip_Creation_To_Moment"), __scope, false),
        __obj.Pay_Run_Group_Selection_Reference flatMap { scalaxb.toXML[generated2.Pay_Run_Group_SelectionObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Run_Group_Selection_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Preu45Printed_Payslips_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Preu45Printed_Payslips_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Pre-Printed_Payslips_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Preu45Printed_Payslips_ResponseType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Filter")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Payroll_Preu45Printed_Payslips_ResponseType(p1 map { scalaxb.fromXML[generated2.Payroll_Preu45Printed_Payslips_Request_ReferenceType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Preu45Printed_Payslips_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Payroll_Preu45Printed_Payslips_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p5 map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Get_Payroll_Preu45Printed_Payslips_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Preu45Printed_Payslips_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Preu45Printed_Payslips_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References flatMap { scalaxb.toXML[generated2.Payroll_Preu45Printed_Payslips_Request_ReferenceType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) },
        __obj.Request_Criteria flatMap { scalaxb.toXML[generated2.Payroll_Preu45Printed_Payslips_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) },
        __obj.Response_Group flatMap { scalaxb.toXML[generated2.Payroll_Preu45Printed_Payslips_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) },
        __obj.Request_Filter flatMap { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Request_Filter"), __scope, false) },
        __obj.Response_Results flatMap { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) },
        __obj.Response_Data flatMap { scalaxb.toXML[generated2.Get_Payroll_Preu45Printed_Payslips_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Preu45Printed_Payslips_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Preu45Printed_Payslips_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Pre-Printed_Payslips_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Preu45Printed_Payslips_Response_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Name_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Detail_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Result_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Start_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_End_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payment_Date")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Gross_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Net_Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Pre-Printed_Payslip_Document_ID")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Pre-Printed_Payslip_Document_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "File_Content")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      generated2.Get_Payroll_Preu45Printed_Payslips_Response_DataType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Pay_Group_DetailObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11 map { scalaxb.fromXML[generated2.Repository_Document_MetadataType](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[scalaxb.Base64Binary](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Get_Payroll_Preu45Printed_Payslips_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Employee_Name_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Employee_Name_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Group_Detail_Reference map { scalaxb.toXML[generated2.Pay_Group_DetailObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Detail_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Result_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Result_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Period_Start_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_Start_Date"), __scope, false) } getOrElse {Nil},
        __obj.Period_End_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Period_End_Date"), __scope, false) } getOrElse {Nil},
        __obj.Payment_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Payment_Date"), __scope, false) } getOrElse {Nil},
        __obj.Gross_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Gross_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Net_Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Net_Amount"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Preu45Printed_Payslip_Document_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Pre-Printed_Payslip_Document_ID"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Preu45Printed_Payslip_Document_Reference flatMap { scalaxb.toXML[generated2.Repository_Document_MetadataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Pre-Printed_Payslip_Document_Reference"), __scope, false) },
        __obj.File_Content map { scalaxb.toXML[scalaxb.Base64Binary](_, Some("urn:com.workday/bsvc"), Some("File_Content"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_EFW2_Year_End_Employer_Filing_Data_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_EFW2_Year_End_Employer_Filing_Data_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_EFW2_Year_End_Employer_Filing_Data_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_EFW2_Year_End_Employer_Filing_Data_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^
      { case p1 =>
      generated2.Get_EFW2_Year_End_Employer_Filing_Data_RequestType(scalaxb.fromXML[generated2.EFW2_Year_End_Employer_Filing_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_EFW2_Year_End_Employer_Filing_Data_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_EFW2_Year_End_Employer_Filing_Data_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.EFW2_Year_End_Employer_Filing_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false))

  }

  trait DefaultGenerated2_EFW2_Year_End_Employer_Filing_Data_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Employer_Filing_Data_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Employer_Filing_Data_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Employer_Filing_Data_Request_CriteriaType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calendar_Year_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_All_Workers")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.EFW2_Year_End_Employer_Filing_Data_Request_CriteriaType(scalaxb.fromXML[generated2.CompanyObjectType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.Calendar_YearObjectType](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Employer_Filing_Data_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        scalaxb.toXML[generated2.Calendar_YearObjectType](__obj.Calendar_Year_Reference, Some("urn:com.workday/bsvc"), Some("Calendar_Year_Reference"), __scope, false),
        __obj.Include_All_Workers map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_All_Workers"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_EFW2_Year_End_Employer_Filing_Data_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_EFW2_Year_End_Employer_Filing_Data_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_EFW2_Year_End_Employer_Filing_Data_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_EFW2_Year_End_Employer_Filing_Data_ResponseType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Get_EFW2_Year_End_Employer_Filing_Data_ResponseType(scalaxb.fromXML[generated2.EFW2_Year_End_Employer_Filing_Data_Request_CriteriaType](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[generated2.EFW2_Year_End_Employer_Filing_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_EFW2_Year_End_Employer_Filing_Data_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_EFW2_Year_End_Employer_Filing_Data_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[generated2.EFW2_Year_End_Employer_Filing_Data_Request_CriteriaType](__obj.Request_Criteria, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false),
        __obj.Response_Data map { scalaxb.toXML[generated2.EFW2_Year_End_Employer_Filing_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_EFW2_Year_End_Employer_Filing_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Employer_Filing_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Employer_Filing_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Employer_Filing_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Year_End_Employer_Filing")) ^^
      { case p1 =>
      generated2.EFW2_Year_End_Employer_Filing_Response_DataType(p1 map { scalaxb.fromXML[generated2.EFW2_Year_End_Employer_FilingType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Employer_Filing_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.EFW2_Year_End_Employer_Filing flatMap { scalaxb.toXML[generated2.EFW2_Year_End_Employer_FilingType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Year_End_Employer_Filing"), __scope, false) })

  }

  trait DefaultGenerated2_EFW2_Year_End_Employer_FilingTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Employer_FilingType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Employer_FilingType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Employer_FilingType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Year_End_Employer_Filing_Data")) ^^
      { case p1 ~ p2 =>
      generated2.EFW2_Year_End_Employer_FilingType(p1.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.EFW2_Year_End_Employer_Filing_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Employer_FilingType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.EFW2_Year_End_Employer_Filing_Data map { scalaxb.toXML[generated2.EFW2_Year_End_Employer_Filing_DataType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Year_End_Employer_Filing_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_EFW2_Year_End_Employer_Filing_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Employer_Filing_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Employer_Filing_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Employer_Filing_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calendar_Year_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EIN")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Kind_of_Employer_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay_Indicator")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Year_End_Submitter_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Year_End_Employer_Box_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EFW2_Deferred_and_Other_Compensation_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      generated2.EFW2_Year_End_Employer_Filing_DataType(p1.headOption map { scalaxb.fromXML[generated2.Calendar_YearObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.EFW2_Year_End_Submitter_DataType](_, scalaxb.ElemName(node) :: stack) },
        p7 map { scalaxb.fromXML[generated2.EFW2_Year_End_Employer_Box_DataType](_, scalaxb.ElemName(node) :: stack) },
        p8 map { scalaxb.fromXML[generated2.EFW2_Employer_Deferred_and_Other_Compensation_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Employer_Filing_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Calendar_Year_Reference map { scalaxb.toXML[generated2.Calendar_YearObjectType](_, Some("urn:com.workday/bsvc"), Some("Calendar_Year_Reference"), __scope, false) } getOrElse {Nil},
        __obj.EIN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("EIN"), __scope, false) } getOrElse {Nil},
        __obj.Company_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Company_Name"), __scope, false) } getOrElse {Nil},
        __obj.Kind_of_Employer_Reference map { scalaxb.toXML[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectType](_, Some("urn:com.workday/bsvc"), Some("Kind_of_Employer_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Third_Party_Sick_Pay_Indicator map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay_Indicator"), __scope, false) } getOrElse {Nil},
        __obj.EFW2_Year_End_Submitter_Data flatMap { scalaxb.toXML[generated2.EFW2_Year_End_Submitter_DataType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Year_End_Submitter_Data"), __scope, false) },
        __obj.EFW2_Year_End_Employer_Box_Data flatMap { scalaxb.toXML[generated2.EFW2_Year_End_Employer_Box_DataType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Year_End_Employer_Box_Data"), __scope, false) },
        __obj.EFW2_Deferred_and_Other_Compensation_Data flatMap { scalaxb.toXML[generated2.EFW2_Employer_Deferred_and_Other_Compensation_DataType](_, Some("urn:com.workday/bsvc"), Some("EFW2_Deferred_and_Other_Compensation_Data"), __scope, false) })

  }

  trait DefaultGenerated2_EFW2_Year_End_Employer_Box_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Employer_Box_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Employer_Box_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Employer_Box_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Box_Description")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ^^
      { case p1 ~ p2 =>
      generated2.EFW2_Year_End_Employer_Box_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Employer_Box_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Box_Description map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Box_Description"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_EFW2_Employer_Deferred_and_Other_Compensation_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Employer_Deferred_and_Other_Compensation_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Employer_Deferred_and_Other_Compensation_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Employer_Deferred_and_Other_Compensation_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Year")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.EFW2_Employer_Deferred_and_Other_Compensation_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Employer_Deferred_and_Other_Compensation_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil},
        __obj.Year map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Year"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_EFW2_Year_End_Submitter_DataTypeFormat extends scalaxb.ElemNameParser[generated2.EFW2_Year_End_Submitter_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EFW2_Year_End_Submitter_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EFW2_Year_End_Submitter_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "EIN")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Address_Line_1")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Address_Line_2")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "City")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "State")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Postal_Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Contact_Name")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Contact_Phone_Number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Contact_Email_Address")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      generated2.EFW2_Year_End_Submitter_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.EFW2_Year_End_Submitter_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.EIN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("EIN"), __scope, false) } getOrElse {Nil},
        __obj.Company_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Company_Name"), __scope, false) } getOrElse {Nil},
        __obj.Address_Line_1 map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Address_Line_1"), __scope, false) } getOrElse {Nil},
        __obj.Address_Line_2 map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Address_Line_2"), __scope, false) } getOrElse {Nil},
        __obj.City map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("City"), __scope, false) } getOrElse {Nil},
        __obj.State map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("State"), __scope, false) } getOrElse {Nil},
        __obj.Postal_Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Postal_Code"), __scope, false) } getOrElse {Nil},
        __obj.Contact_Name map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Contact_Name"), __scope, false) } getOrElse {Nil},
        __obj.Contact_Phone_Number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Contact_Phone_Number"), __scope, false) } getOrElse {Nil},
        __obj.Contact_Email_Address map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Contact_Email_Address"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Salary_Over_the_Cap_Costing_Allocation_Detail_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Salary_Over_the_Cap_Costing_Allocation_Detail_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Salary_Over_the_Cap_Costing_Allocation_Detail_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Salary_Over_the_Cap_Costing_Allocation_Detail_DataType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SOC_Order")) ~ 
      safeRep(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SOC_Default_from_Organization_Assignment")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[Boolean](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SOC_Override_Worktag_Reference")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Tenanted_Payroll_WorktagObjectType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "SOC_Distribution_Percent")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Salary_Over_the_Cap_Costing_Allocation_Detail_DataType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2,
        scalaxb.fromXML[BigDecimal](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: generated2.Salary_Over_the_Cap_Costing_Allocation_Detail_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.SOC_Order, Some("urn:com.workday/bsvc"), Some("SOC_Order"), __scope, false),
        __obj.salary_over_the_cap_costing_allocation_detail_datatypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) },
        scalaxb.toXML[BigDecimal](__obj.SOC_Distribution_Percent, Some("urn:com.workday/bsvc"), Some("SOC_Distribution_Percent"), __scope, false))

  }

  trait DefaultGenerated2_Run_Pay_Calculation_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation_Reference")) ^^
      { case p1 =>
      generated2.Run_Pay_Calculation_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Background_Process_RuntimeObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Run_Pay_Calculation_Reference flatMap { scalaxb.toXML[generated2.Background_Process_RuntimeObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Run_Pay_Calculation_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_Request_CriteriaType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Groups_or_Pay_Run_Groups_Selection_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Requires_Recalculation")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Error")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Not_Yet_Started")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_In_Progress")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Accounting_Only_for_Calculation_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Queued_Proesses")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      generated2.Run_Pay_Calculation_Request_CriteriaType(p1.headOption map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Pay_Group_Pay_Run_Group_SelectionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Run_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Period_Reference map { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Groups_or_Pay_Run_Groups_Selection_Reference flatMap { scalaxb.toXML[generated2.Pay_Group_Pay_Run_Group_SelectionObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Groups_or_Pay_Run_Groups_Selection_Reference"), __scope, false) },
        __obj.Run_Category_Reference map { scalaxb.toXML[generated2.Run_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Include_Requires_Recalculation map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Requires_Recalculation"), __scope, false) } getOrElse {Nil},
        __obj.Include_Error map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Error"), __scope, false) } getOrElse {Nil},
        __obj.Include_Not_Yet_Started map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Not_Yet_Started"), __scope, false) } getOrElse {Nil},
        __obj.Include_In_Progress map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_In_Progress"), __scope, false) } getOrElse {Nil},
        __obj.Accounting_Only_for_Calculation_Criteria map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Accounting_Only_for_Calculation_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Include_Queued_Proesses map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Queued_Proesses"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Run_Pay_Calculation_Response_GroupTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_Response_GroupType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_Response_GroupType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_Response_GroupType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Process_Calculation_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Pay_Groups_Being_Calculated")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Process_Information")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Process_History")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Include_Messages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Run_Pay_Calculation_Response_GroupType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_Response_GroupType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Include_Process_Calculation_Criteria map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Process_Calculation_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Include_Pay_Groups_Being_Calculated map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Pay_Groups_Being_Calculated"), __scope, false) } getOrElse {Nil},
        __obj.Include_Process_Information map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Process_Information"), __scope, false) } getOrElse {Nil},
        __obj.Include_Process_History map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Process_History"), __scope, false) } getOrElse {Nil},
        __obj.Include_Messages map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Include_Messages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Run_Pay_Calculation_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Run_Pay_Calculation_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Run_Pay_Calculation_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Run_Pay_Calculation_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Run_Pay_Calculation_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Run_Pay_Calculation_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Get_Run_Pay_Calculation_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Run_Pay_Calculation_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Run_Pay_Calculation_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Run_Pay_Calculation_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_run_pay_calculation_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Run_Pay_Calculation_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Run_Pay_Calculation_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Run_Pay_CalculationTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_CalculationType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_CalculationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_CalculationType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Process_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Status_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Current_Processing_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Average_Processing_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation_Process_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Groups_Being_Calculated")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation_Process_Information")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation_Process_History")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation_Messages")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 =>
      generated2.Run_Pay_CalculationType(p1.headOption map { scalaxb.fromXML[generated2.Background_Process_RuntimeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Background_ProcessObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Background_Process_Runtime_StatusObjectType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Run_Pay_Calculation_Process_Calculation_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Pay_Groups_Being_CalculatedType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[generated2.Run_Pay_Calculation_Process_InformationType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[generated2.Run_Pay_Calculation_Process_HistoryType](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[generated2.Run_Pay_Calculation_MessagesType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_CalculationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Run_Pay_Calculation_Reference map { scalaxb.toXML[generated2.Background_Process_RuntimeObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Process_Reference map { scalaxb.toXML[generated2.Background_ProcessObjectType](_, Some("urn:com.workday/bsvc"), Some("Process_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Status_Reference map { scalaxb.toXML[generated2.Background_Process_Runtime_StatusObjectType](_, Some("urn:com.workday/bsvc"), Some("Status_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Current_Processing_Time map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Current_Processing_Time"), __scope, false) } getOrElse {Nil},
        __obj.Average_Processing_Time map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Average_Processing_Time"), __scope, false) } getOrElse {Nil},
        __obj.Run_Pay_Calculation_Process_Criteria map { scalaxb.toXML[generated2.Run_Pay_Calculation_Process_Calculation_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation_Process_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Groups_Being_Calculated map { scalaxb.toXML[generated2.Pay_Groups_Being_CalculatedType](_, Some("urn:com.workday/bsvc"), Some("Pay_Groups_Being_Calculated"), __scope, false) } getOrElse {Nil},
        __obj.Run_Pay_Calculation_Process_Information map { scalaxb.toXML[generated2.Run_Pay_Calculation_Process_InformationType](_, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation_Process_Information"), __scope, false) } getOrElse {Nil},
        __obj.Run_Pay_Calculation_Process_History map { scalaxb.toXML[generated2.Run_Pay_Calculation_Process_HistoryType](_, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation_Process_History"), __scope, false) } getOrElse {Nil},
        __obj.Run_Pay_Calculation_Messages map { scalaxb.toXML[generated2.Run_Pay_Calculation_MessagesType](_, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation_Messages"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Run_Pay_Calculation_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation")) ^^
      { case p1 =>
      generated2.Run_Pay_Calculation_Response_DataType(p1 map { scalaxb.fromXML[generated2.Run_Pay_CalculationType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Run_Pay_Calculation flatMap { scalaxb.toXML[generated2.Run_Pay_CalculationType](_, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Run_Pay_Calculation_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Run_Pay_Calculation_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Run_Pay_Calculation_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Run_Pay_Calculation_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Group")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Get_Run_Pay_Calculation_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Run_Pay_Calculation_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Run_Pay_Calculation_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Run_Pay_Calculation_Response_GroupType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[generated2.Run_Pay_Calculation_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Run_Pay_Calculation_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Run_Pay_Calculation_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Run_Pay_Calculation_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Run_Pay_Calculation_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Group map { scalaxb.toXML[generated2.Run_Pay_Calculation_Response_GroupType](_, Some("urn:com.workday/bsvc"), Some("Response_Group"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Run_Pay_Calculation_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Run_Pay_Calculation_Process_Calculation_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_Process_Calculation_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_Process_Calculation_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_Process_Calculation_CriteriaType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Period_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Run_Group_Selection_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calculation_Options")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Limit_Accounting_Population_Based_on_Calculation_Criteria")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Run_Pay_Calculation_Process_Calculation_CriteriaType(p1.headOption map { scalaxb.fromXML[generated2.PeriodObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Pay_Run_Group_SelectionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Run_Pay_Calculation_StatusesType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_Process_Calculation_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Period_Reference map { scalaxb.toXML[generated2.PeriodObjectType](_, Some("urn:com.workday/bsvc"), Some("Period_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Pay_Run_Group_Selection_Reference flatMap { scalaxb.toXML[generated2.Pay_Run_Group_SelectionObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Run_Group_Selection_Reference"), __scope, false) },
        __obj.Calculation_Options flatMap { scalaxb.toXML[generated2.Run_Pay_Calculation_StatusesType](_, Some("urn:com.workday/bsvc"), Some("Calculation_Options"), __scope, false) },
        __obj.Limit_Accounting_Population_Based_on_Calculation_Criteria map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Limit_Accounting_Population_Based_on_Calculation_Criteria"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Run_Pay_Calculation_Process_InformationTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_Process_InformationType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_Process_InformationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_Process_InformationType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Process_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Scheduled_Start_Date_and_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Actual_Start_Date_and_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Completed_Date_and_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Submitted_By_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Processing_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Job_Definition_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Job_Mode_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Job_Size")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Job_Parameters")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Application_Keys")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation_Technical_Details")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation_Step_Details")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      generated2.Run_Pay_Calculation_Process_InformationType(p1.headOption map { scalaxb.fromXML[generated2.Background_Process_TypeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.InstanceObjectType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p12 map { scalaxb.fromXML[generated2.Run_Pay_Calculation_Technical_DetailsType](_, scalaxb.ElemName(node) :: stack) },
        p13 map { scalaxb.fromXML[generated2.Run_Pay_Calculation_Step_DetailsType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_Process_InformationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Process_Type_Reference map { scalaxb.toXML[generated2.Background_Process_TypeObjectType](_, Some("urn:com.workday/bsvc"), Some("Process_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Scheduled_Start_Date_and_Time map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Scheduled_Start_Date_and_Time"), __scope, false) } getOrElse {Nil},
        __obj.Actual_Start_Date_and_Time map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Actual_Start_Date_and_Time"), __scope, false) } getOrElse {Nil},
        __obj.Completed_Date_and_Time map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Completed_Date_and_Time"), __scope, false) } getOrElse {Nil},
        __obj.Submitted_By_Reference map { scalaxb.toXML[generated2.InstanceObjectType](_, Some("urn:com.workday/bsvc"), Some("Submitted_By_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Total_Processing_Time map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Total_Processing_Time"), __scope, false) } getOrElse {Nil},
        __obj.Job_Definition_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Job_Definition_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Job_Mode_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Job_Mode_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Job_Size map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Job_Size"), __scope, false) } getOrElse {Nil},
        __obj.Job_Parameters map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Job_Parameters"), __scope, false) } getOrElse {Nil},
        __obj.Application_Keys map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Application_Keys"), __scope, false) } getOrElse {Nil},
        __obj.Run_Pay_Calculation_Technical_Details flatMap { scalaxb.toXML[generated2.Run_Pay_Calculation_Technical_DetailsType](_, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation_Technical_Details"), __scope, false) },
        __obj.Run_Pay_Calculation_Step_Details flatMap { scalaxb.toXML[generated2.Run_Pay_Calculation_Step_DetailsType](_, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation_Step_Details"), __scope, false) })

  }

  trait DefaultGenerated2_Run_Pay_Calculation_Process_HistoryTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_Process_HistoryType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_Process_HistoryType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_Process_HistoryType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Actual_Start_Date_and_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Completed_Date_and_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Processing_Time__hour_min_sec_")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Run_Pay_Calculation_Process_HistoryType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_Process_HistoryType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Actual_Start_Date_and_Time map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Actual_Start_Date_and_Time"), __scope, false) } getOrElse {Nil},
        __obj.Completed_Date_and_Time map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Completed_Date_and_Time"), __scope, false) } getOrElse {Nil},
        __obj.Total_Processing_Time__hour_min_secu93 map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Total_Processing_Time__hour_min_sec_"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Pay_Groups_Being_CalculatedTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Groups_Being_CalculatedType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Groups_Being_CalculatedType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Groups_Being_CalculatedType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Run_Detail_Pay_Calc_Status")) ^^
      { case p1 =>
      generated2.Pay_Groups_Being_CalculatedType(p1 map { scalaxb.fromXML[generated2.Payroll_Run_Detail_Pay_Calc_StatusType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Pay_Groups_Being_CalculatedType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Run_Detail_Pay_Calc_Status flatMap { scalaxb.toXML[generated2.Payroll_Run_Detail_Pay_Calc_StatusType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Run_Detail_Pay_Calc_Status"), __scope, false) })

  }

  trait DefaultGenerated2_Run_Pay_Calculation_MessagesTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_MessagesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_MessagesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_MessagesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation_Message")) ^^
      { case p1 =>
      generated2.Run_Pay_Calculation_MessagesType(p1 map { scalaxb.fromXML[generated2.Run_Pay_Calculation_MessageType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_MessagesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Run_Pay_Calculation_Message flatMap { scalaxb.toXML[generated2.Run_Pay_Calculation_MessageType](_, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation_Message"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Location_Mapping_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Location_Mapping_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Location_Mapping_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Location_Mapping_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Location_Mapping_Reference")) ^^
      { case p1 =>
      generated2.Payroll_Payee_Tax_Location_Mapping_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_MappingObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Location_Mapping_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_Tax_Location_Mapping_Reference flatMap { scalaxb.toXML[generated2.Payroll_Payee_Tax_Location_MappingObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Location_Mapping_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Location_Mapping_Request_CriteriaTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Location_Mapping_Request_CriteriaType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Location_Mapping_Request_CriteriaType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Location_Mapping_Request_CriteriaType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_as_Of")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Payee_Tax_Location_Mapping_Request_CriteriaType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Location_Mapping_Request_CriteriaType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Effective_as_Of map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_as_Of"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Payee_Tax_Location_Mappings_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_Tax_Location_Mappings_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_Tax_Location_Mappings_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_Tax_Location_Mappings_RequestType] =
      phrase(opt(((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_Mapping_Request_ReferencesType](x, scalaxb.ElemName(node) :: stack)))) | 
      ((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_Mapping_Request_CriteriaType](x, scalaxb.ElemName(node) :: stack))))) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ^^
      { case p1 ~ p2 =>
      generated2.Get_Payroll_Payee_Tax_Location_Mappings_RequestType(p1,
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_Tax_Location_Mappings_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_Tax_Location_Mappings_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.get_payroll_payee_tax_location_mappings_requesttypeoption map { x => scalaxb.toXML[scalaxb.DataRecord[generated2.Get_Payroll_Payee_Tax_Location_Mappings_RequestTypeOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Location_Mapping_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Location_Mapping_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Location_Mapping_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Location_Mapping_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Location_Mapping")) ^^
      { case p1 =>
      generated2.Payroll_Payee_Tax_Location_Mapping_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_Mapping_Get_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Location_Mapping_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Payee_Tax_Location_Mapping flatMap { scalaxb.toXML[generated2.Payroll_Payee_Tax_Location_Mapping_Get_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Location_Mapping"), __scope, false) })

  }

  trait DefaultGenerated2_Get_Payroll_Payee_Tax_Location_Mappings_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Payee_Tax_Location_Mappings_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Payee_Tax_Location_Mappings_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Payee_Tax_Location_Mappings_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_Criteria")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      generated2.Get_Payroll_Payee_Tax_Location_Mappings_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_Mapping_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_Mapping_Request_CriteriaType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_Mapping_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Payee_Tax_Location_Mappings_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Payee_Tax_Location_Mappings_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Location_Mapping_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Request_Criteria map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Location_Mapping_Request_CriteriaType](_, Some("urn:com.workday/bsvc"), Some("Request_Criteria"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil},
        __obj.Response_Results map { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) } getOrElse {Nil},
        __obj.Response_Data map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Location_Mapping_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Location_Mapping_Get_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Location_Mapping_Get_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Location_Mapping_Get_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Location_Mapping_Get_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Location_Mapping_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Location_Mapping_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Payee_Tax_Location_Mapping_Get_DataType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_MappingObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_Mapping_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Location_Mapping_Get_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_Tax_Location_Mapping_Reference map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Location_MappingObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Location_Mapping_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Payee_Tax_Location_Mapping_Data map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Location_Mapping_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Location_Mapping_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Location_Mapping_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Location_Mapping_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Location_Mapping_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Location_Mapping_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Location_Mapping_ID")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactive_Tax_Location_Mapping")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Inactivate_State_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Payroll_Payee_Tax_Location_Mapping_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[generated2.WorkerObjectType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[generated2.CompanyObjectType](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Location_Mapping_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_Tax_Location_Mapping_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Location_Mapping_ID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[generated2.WorkerObjectType](__obj.Worker_Reference, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_Date, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false),
        scalaxb.toXML[generated2.CompanyObjectType](__obj.Company_Reference, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false),
        __obj.Inactive_Tax_Location_Mapping map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Inactive_Tax_Location_Mapping"), __scope, false) } getOrElse {Nil},
        __obj.Inactivate_State_Reference flatMap { scalaxb.toXML[generated2.Payroll_State_AuthorityObjectType](_, Some("urn:com.workday/bsvc"), Some("Inactivate_State_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Put_Payroll_Payee_Tax_Location_Mapping_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_Tax_Location_Mapping_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_Tax_Location_Mapping_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_Tax_Location_Mapping_RequestType] =
      phrase((scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Location_Mapping_Data")) ^^
      { case p1 =>
      generated2.Put_Payroll_Payee_Tax_Location_Mapping_RequestType(scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_Mapping_DataType](p1, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_Tax_Location_Mapping_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_Tax_Location_Mapping_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[generated2.Payroll_Payee_Tax_Location_Mapping_DataType](__obj.Payroll_Payee_Tax_Location_Mapping_Data, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Location_Mapping_Data"), __scope, false))

  }

  trait DefaultGenerated2_Put_Payroll_Payee_Tax_Location_Mapping_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Put_Payroll_Payee_Tax_Location_Mapping_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Put_Payroll_Payee_Tax_Location_Mapping_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Put_Payroll_Payee_Tax_Location_Mapping_ResponseType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Location_Mapping_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Payee_Tax_Location_Mapping_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Put_Payroll_Payee_Tax_Location_Mapping_ResponseType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_MappingObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Application_Instance_Related_Exceptions_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Put_Payroll_Payee_Tax_Location_Mapping_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Put_Payroll_Payee_Tax_Location_Mapping_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Payroll_Payee_Tax_Location_Mapping_Reference map { scalaxb.toXML[generated2.Payroll_Payee_Tax_Location_MappingObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Location_Mapping_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Payee_Tax_Location_Mapping_Data map { scalaxb.toXML[generated2.Application_Instance_Related_Exceptions_DataType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Payee_Tax_Location_Mapping_Data"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Run_Pay_Calculation_StatusesTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_StatusesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_StatusesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_StatusesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Calculation_Status_Reference")) ^^
      { case p1 =>
      generated2.Run_Pay_Calculation_StatusesType(p1 map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_StatusesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Pay_Calculation_Status_Reference flatMap { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Calculation_Status_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_Run_Pay_Calculation_MessageTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_MessageType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_MessageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_MessageType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Date_and_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Severity")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Message")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Background_Process_Reference")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Run_Pay_Calculation_MessageType(p1.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[generated2.Background_Process_RuntimeObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_MessageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Date_and_Time map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Date_and_Time"), __scope, false) } getOrElse {Nil},
        __obj.Severity map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Severity"), __scope, false) } getOrElse {Nil},
        __obj.Message map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Message"), __scope, false) } getOrElse {Nil},
        __obj.Background_Process_Reference map { scalaxb.toXML[generated2.Background_Process_RuntimeObjectType](_, Some("urn:com.workday/bsvc"), Some("Background_Process_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Run_Pay_Calculation_Step_DetailTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_Step_DetailType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_Step_DetailType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_Step_DetailType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Job_Step_Runtime_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Status_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Start_Date_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "End_Date_Time")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Cumulative_Step_Time__min_")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Result_Count")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Partitions_Completed")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total_Partitions")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Runtime_Parameters")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      generated2.Run_Pay_Calculation_Step_DetailType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_Step_DetailType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Job_Step_Runtime_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Job_Step_Runtime_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Status_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Status_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Start_Date_Time map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Start_Date_Time"), __scope, false) } getOrElse {Nil},
        __obj.End_Date_Time map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("End_Date_Time"), __scope, false) } getOrElse {Nil},
        __obj.Cumulative_Step_Time__minu93 map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Cumulative_Step_Time__min_"), __scope, false) } getOrElse {Nil},
        __obj.Result_Count map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Result_Count"), __scope, false) } getOrElse {Nil},
        __obj.Partitions_Completed map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Partitions_Completed"), __scope, false) } getOrElse {Nil},
        __obj.Total_Partitions map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Total_Partitions"), __scope, false) } getOrElse {Nil},
        __obj.Runtime_Parameters map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Runtime_Parameters"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Run_Pay_Calculation_Technical_DetailsTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_Technical_DetailsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_Technical_DetailsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_Technical_DetailsType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Workday_Integration_Cloud_Platform__ESB__Process_ID")) ^^
      { case p1 =>
      generated2.Run_Pay_Calculation_Technical_DetailsType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_Technical_DetailsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Workday_Integration_Cloud_Platform__ESB__Process_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Workday_Integration_Cloud_Platform__ESB__Process_ID"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Run_Pay_Calculation_Step_DetailsTypeFormat extends scalaxb.ElemNameParser[generated2.Run_Pay_Calculation_Step_DetailsType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_Pay_Calculation_Step_DetailsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_Pay_Calculation_Step_DetailsType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Pay_Calculation_Step_Detail")) ^^
      { case p1 =>
      generated2.Run_Pay_Calculation_Step_DetailsType(p1 map { scalaxb.fromXML[generated2.Run_Pay_Calculation_Step_DetailType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Run_Pay_Calculation_Step_DetailsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Run_Pay_Calculation_Step_Detail flatMap { scalaxb.toXML[generated2.Run_Pay_Calculation_Step_DetailType](_, Some("urn:com.workday/bsvc"), Some("Run_Pay_Calculation_Step_Detail"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Run_Detail_Pay_Calc_StatusTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Run_Detail_Pay_Calc_StatusType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Run_Detail_Pay_Calc_StatusType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Run_Detail_Pay_Calc_StatusType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Run_Category_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Calc_Status")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Run_Detail_Pay_Calc_StatusType(p1.headOption map { scalaxb.fromXML[generated2.Pay_GroupObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Run_CategoryObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Calc_StatusType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Run_Detail_Pay_Calc_StatusType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Pay_Group_Reference map { scalaxb.toXML[generated2.Pay_GroupObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Run_Category_Reference map { scalaxb.toXML[generated2.Run_CategoryObjectType](_, Some("urn:com.workday/bsvc"), Some("Run_Category_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Calc_Status flatMap { scalaxb.toXML[generated2.Calc_StatusType](_, Some("urn:com.workday/bsvc"), Some("Calc_Status"), __scope, false) })

  }

  trait DefaultGenerated2_Calc_StatusTypeFormat extends scalaxb.ElemNameParser[generated2.Calc_StatusType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Calc_StatusType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Calc_StatusType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Group_Period_Pay_Calculation_Status_As_Of_Now")) ^^
      { case p1 =>
      generated2.Calc_StatusType(p1 map { scalaxb.fromXML[generated2.Pay_Group_Period_Pay_Calculation_Status_As_Of_NowType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Calc_StatusType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Pay_Group_Period_Pay_Calculation_Status_As_Of_Now flatMap { scalaxb.toXML[generated2.Pay_Group_Period_Pay_Calculation_Status_As_Of_NowType](_, Some("urn:com.workday/bsvc"), Some("Pay_Group_Period_Pay_Calculation_Status_As_Of_Now"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_Group_Period_Pay_Calculation_Status_As_Of_NowTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Group_Period_Pay_Calculation_Status_As_Of_NowType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Group_Period_Pay_Calculation_Status_As_Of_NowType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Group_Period_Pay_Calculation_Status_As_Of_NowType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pay_Cycle_Type_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Action_Reason")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "In_Progress")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Requires_Recalculation")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Pending_Completion")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "In_Error")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "On_Hold")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Completed")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Total")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      generated2.Pay_Group_Period_Pay_Calculation_Status_As_Of_NowType(p1.headOption map { scalaxb.fromXML[generated2.Unique_IdentifierObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Pay_Group_Period_Pay_Calculation_Status_As_Of_NowType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Pay_Cycle_Type_Reference map { scalaxb.toXML[generated2.Unique_IdentifierObjectType](_, Some("urn:com.workday/bsvc"), Some("Pay_Cycle_Type_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Action_Reason map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Action_Reason"), __scope, false) } getOrElse {Nil},
        __obj.In_Progress map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("In_Progress"), __scope, false) } getOrElse {Nil},
        __obj.Requires_Recalculation map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Requires_Recalculation"), __scope, false) } getOrElse {Nil},
        __obj.Pending_Completion map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Pending_Completion"), __scope, false) } getOrElse {Nil},
        __obj.In_Error map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("In_Error"), __scope, false) } getOrElse {Nil},
        __obj.On_Hold map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("On_Hold"), __scope, false) } getOrElse {Nil},
        __obj.Completed map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Completed"), __scope, false) } getOrElse {Nil},
        __obj.Total map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Total"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Email_Address_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Email_Address_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Email_Address_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Email_Address_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Email_Address")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Email_Comment")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Usage_Data")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Email_Address_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Communication_Method_Usage_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Email_Address_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Email_Address map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Email_Address"), __scope, false) } getOrElse {Nil},
        __obj.Email_Comment map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Email_Comment"), __scope, false) } getOrElse {Nil},
        __obj.Usage_Data flatMap { scalaxb.toXML[generated2.Communication_Method_Usage_DataType](_, Some("urn:com.workday/bsvc"), Some("Usage_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Wu452VI_Deferred_and_Other_Compensation_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452VI_Deferred_and_Other_Compensation_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2VI_Deferred_and_Other_Compensation_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452VI_Deferred_and_Other_Compensation_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Year")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Wu452VI_Deferred_and_Other_Compensation_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452VI_Deferred_and_Other_Compensation_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil},
        __obj.Year map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Year"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Guam_Annual_Tax_Data_WrapperTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Guam_Annual_Tax_Data_WrapperType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Guam_Annual_Tax_Data_WrapperType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Guam_Annual_Tax_Data_WrapperType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Guam_Annual_Tax_Data")) ^^
      { case p1 =>
      generated2.Worker_Guam_Annual_Tax_Data_WrapperType(p1 map { scalaxb.fromXML[generated2.Worker_Guam_Annual_Tax_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Guam_Annual_Tax_Data_WrapperType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_Guam_Annual_Tax_Data flatMap { scalaxb.toXML[generated2.Worker_Guam_Annual_Tax_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_Guam_Annual_Tax_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Wu452GU_Deferred_and_Other_Compensation_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452GU_Deferred_and_Other_Compensation_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2GU_Deferred_and_Other_Compensation_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452GU_Deferred_and_Other_Compensation_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Year")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Wu452GU_Deferred_and_Other_Compensation_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452GU_Deferred_and_Other_Compensation_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil},
        __obj.Year map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Year"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452VI_Nonu45Qualified_Pension_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452VI_Nonu45Qualified_Pension_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2VI_Non-Qualified_Pension_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452VI_Nonu45Qualified_Pension_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-Qualified_Pension-Section_457_Dist_YTD")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-Qualified_Pension-Non-section_457_Dist_YTD")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-Qualified_Pension-Section_457_Contrib_YTD")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-Qualified_Pension-Non-section_457_Contrib_YTD")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Wu452VI_Nonu45Qualified_Pension_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452VI_Nonu45Qualified_Pension_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nonu45Qualified_Pensionu45Section_457_Dist_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Non-Qualified_Pension-Section_457_Dist_YTD"), __scope, false) } getOrElse {Nil},
        __obj.Nonu45Qualified_Pensionu45Nonu45section_457_Dist_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Non-Qualified_Pension-Non-section_457_Dist_YTD"), __scope, false) } getOrElse {Nil},
        __obj.Nonu45Qualified_Pensionu45Section_457_Contrib_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Non-Qualified_Pension-Section_457_Contrib_YTD"), __scope, false) } getOrElse {Nil},
        __obj.Nonu45Qualified_Pensionu45Nonu45section_457_Contrib_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Non-Qualified_Pension-Non-section_457_Contrib_YTD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Virgin_Islands_Annual_Tax_Data_WrapperTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Virgin_Islands_Annual_Tax_Data_WrapperType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Virgin_Islands_Annual_Tax_Data_WrapperType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Virgin_Islands_Annual_Tax_Data_WrapperType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Virgin_Islands_Annual_Tax_Data")) ^^
      { case p1 =>
      generated2.Worker_Virgin_Islands_Annual_Tax_Data_WrapperType(p1 map { scalaxb.fromXML[generated2.Worker_Virgin_Islands_Annual_Tax_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Virgin_Islands_Annual_Tax_Data_WrapperType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_Virgin_Islands_Annual_Tax_Data flatMap { scalaxb.toXML[generated2.Worker_Virgin_Islands_Annual_Tax_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_Virgin_Islands_Annual_Tax_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Worker_Virgin_Islands_Annual_Tax_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Virgin_Islands_Annual_Tax_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Virgin_Islands_Annual_Tax_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Virgin_Islands_Annual_Tax_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_W-2VI_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Control_number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-Qualified_Pension_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deferred_and_Other_Compensation_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Other_Data_Wrapper")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Worker_Virgin_Islands_Annual_Tax_DataType(p1 map { scalaxb.fromXML[generated2.Worker_Wu452VI_DataType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Wu452VI_Nonu45Qualified_Pension_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Wu452VI_Deferred_and_Other_Compensation_DataType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Wu452VI_Additional_DataType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Wu452VI_Other_Data_WrapperType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Virgin_Islands_Annual_Tax_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Wu452VI_Data flatMap { scalaxb.toXML[generated2.Worker_Wu452VI_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_W-2VI_Data"), __scope, false) },
        __obj.Control_number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Control_number"), __scope, false) } getOrElse {Nil},
        __obj.Nonu45Qualified_Pension_Data map { scalaxb.toXML[generated2.Wu452VI_Nonu45Qualified_Pension_DataType](_, Some("urn:com.workday/bsvc"), Some("Non-Qualified_Pension_Data"), __scope, false) } getOrElse {Nil},
        __obj.Deferred_and_Other_Compensation_Data flatMap { scalaxb.toXML[generated2.Wu452VI_Deferred_and_Other_Compensation_DataType](_, Some("urn:com.workday/bsvc"), Some("Deferred_and_Other_Compensation_Data"), __scope, false) },
        __obj.Additional_Data map { scalaxb.toXML[generated2.Wu452VI_Additional_DataType](_, Some("urn:com.workday/bsvc"), Some("Additional_Data"), __scope, false) } getOrElse {Nil},
        __obj.Other_Data_Wrapper flatMap { scalaxb.toXML[generated2.Wu452VI_Other_Data_WrapperType](_, Some("urn:com.workday/bsvc"), Some("Other_Data_Wrapper"), __scope, false) })

  }

  trait DefaultGenerated2_Worker_Wu452VI_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Wu452VI_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_W-2VI_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Wu452VI_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "W-2VI_Instance_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Completed_Moment")) ^^
      { case p1 ~ p2 =>
      generated2.Worker_Wu452VI_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Wu452VI_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Wu452VI_Instance_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("W-2VI_Instance_ID"), __scope, false) } getOrElse {Nil},
        __obj.Completed_Moment map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Completed_Moment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452VI_Additional_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452VI_Additional_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2VI_Additional_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452VI_Additional_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Statutory_Employee")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Retirement_Plan")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Wu452VI_Additional_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452VI_Additional_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Statutory_Employee map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Statutory_Employee"), __scope, false) } getOrElse {Nil},
        __obj.Retirement_Plan map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Retirement_Plan"), __scope, false) } getOrElse {Nil},
        __obj.Third_Party_Sick_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452GU_Other_Data_WrapperTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452GU_Other_Data_WrapperType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2GU_Other_Data_WrapperType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452GU_Other_Data_WrapperType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Other_Data")) ^^
      { case p1 =>
      generated2.Wu452GU_Other_Data_WrapperType(p1 map { scalaxb.fromXML[generated2.Wu452GU_Other_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452GU_Other_Data_WrapperType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Other_Data flatMap { scalaxb.toXML[generated2.Wu452GU_Other_DataType](_, Some("urn:com.workday/bsvc"), Some("Other_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Wu452GU_Nonu45Qualified_Pension_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452GU_Nonu45Qualified_Pension_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2GU_Non-Qualified_Pension_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452GU_Nonu45Qualified_Pension_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-Qualified_Pension-Section_457_Dist_YTD")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-Qualified_Pension-Non-section_457_Dist_YTD")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-Qualified_Pension-Section_457_Contrib_YTD")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-Qualified_Pension-Non-section_457_Contrib_YTD")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Wu452GU_Nonu45Qualified_Pension_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452GU_Nonu45Qualified_Pension_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Nonu45Qualified_Pensionu45Section_457_Dist_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Non-Qualified_Pension-Section_457_Dist_YTD"), __scope, false) } getOrElse {Nil},
        __obj.Nonu45Qualified_Pensionu45Nonu45section_457_Dist_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Non-Qualified_Pension-Non-section_457_Dist_YTD"), __scope, false) } getOrElse {Nil},
        __obj.Nonu45Qualified_Pensionu45Section_457_Contrib_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Non-Qualified_Pension-Section_457_Contrib_YTD"), __scope, false) } getOrElse {Nil},
        __obj.Nonu45Qualified_Pensionu45Nonu45section_457_Contrib_YTD map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Non-Qualified_Pension-Non-section_457_Contrib_YTD"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452GU_Other_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452GU_Other_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2GU_Other_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452GU_Other_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Label")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Other_Information_-_FEIN_or_EIN")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Wu452GU_Other_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452GU_Other_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Label map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Label"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Other_Information_u45_FEIN_or_EIN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Other_Information_-_FEIN_or_EIN"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452VI_Other_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452VI_Other_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2VI_Other_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452VI_Other_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Label")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Other_Information_-_FEIN_or_EIN")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Wu452VI_Other_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452VI_Other_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Label map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Label"), __scope, false) } getOrElse {Nil},
        __obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Other_Information_u45_FEIN_or_EIN map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Other_Information_-_FEIN_or_EIN"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Wu452VI_Other_Data_WrapperTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452VI_Other_Data_WrapperType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2VI_Other_Data_WrapperType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452VI_Other_Data_WrapperType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Other_Data")) ^^
      { case p1 =>
      generated2.Wu452VI_Other_Data_WrapperType(p1 map { scalaxb.fromXML[generated2.Wu452VI_Other_DataType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452VI_Other_Data_WrapperType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Other_Data flatMap { scalaxb.toXML[generated2.Wu452VI_Other_DataType](_, Some("urn:com.workday/bsvc"), Some("Other_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Wu452GU_Additional_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Wu452GU_Additional_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("W-2GU_Additional_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Wu452GU_Additional_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Statutory_Employee")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Retirement_Plan")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Third_Party_Sick_Pay")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Wu452GU_Additional_DataType(p1.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Wu452GU_Additional_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Statutory_Employee map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Statutory_Employee"), __scope, false) } getOrElse {Nil},
        __obj.Retirement_Plan map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Retirement_Plan"), __scope, false) } getOrElse {Nil},
        __obj.Third_Party_Sick_Pay map { scalaxb.toXML[Boolean](_, Some("urn:com.workday/bsvc"), Some("Third_Party_Sick_Pay"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Wu452GU_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Wu452GU_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_W-2GU_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Wu452GU_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "W-2GU_Instance_ID")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Completed_Moment")) ^^
      { case p1 ~ p2 =>
      generated2.Worker_Wu452GU_DataType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Wu452GU_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Wu452GU_Instance_ID map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("W-2GU_Instance_ID"), __scope, false) } getOrElse {Nil},
        __obj.Completed_Moment map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Completed_Moment"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Worker_Guam_Annual_Tax_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Worker_Guam_Annual_Tax_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Worker_Guam_Annual_Tax_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Worker_Guam_Annual_Tax_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_W-2GU_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Control_number")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Non-Qualified_Pension_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Deferred_and_Other_Compensation_Data")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Additional_Data")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Other_Data_Wrapper")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      generated2.Worker_Guam_Annual_Tax_DataType(p1 map { scalaxb.fromXML[generated2.Worker_Wu452GU_DataType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[generated2.Wu452GU_Nonu45Qualified_Pension_DataType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Wu452GU_Deferred_and_Other_Compensation_DataType](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[generated2.Wu452GU_Additional_DataType](_, scalaxb.ElemName(node) :: stack) },
        p6 map { scalaxb.fromXML[generated2.Wu452GU_Other_Data_WrapperType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Worker_Guam_Annual_Tax_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Wu452GU_Data flatMap { scalaxb.toXML[generated2.Worker_Wu452GU_DataType](_, Some("urn:com.workday/bsvc"), Some("Worker_W-2GU_Data"), __scope, false) },
        __obj.Control_number map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Control_number"), __scope, false) } getOrElse {Nil},
        __obj.Nonu45Qualified_Pension_Data map { scalaxb.toXML[generated2.Wu452GU_Nonu45Qualified_Pension_DataType](_, Some("urn:com.workday/bsvc"), Some("Non-Qualified_Pension_Data"), __scope, false) } getOrElse {Nil},
        __obj.Deferred_and_Other_Compensation_Data flatMap { scalaxb.toXML[generated2.Wu452GU_Deferred_and_Other_Compensation_DataType](_, Some("urn:com.workday/bsvc"), Some("Deferred_and_Other_Compensation_Data"), __scope, false) },
        __obj.Additional_Data map { scalaxb.toXML[generated2.Wu452GU_Additional_DataType](_, Some("urn:com.workday/bsvc"), Some("Additional_Data"), __scope, false) } getOrElse {Nil},
        __obj.Other_Data_Wrapper flatMap { scalaxb.toXML[generated2.Wu452GU_Other_Data_WrapperType](_, Some("urn:com.workday/bsvc"), Some("Other_Data_Wrapper"), __scope, false) })

  }

  trait DefaultGenerated2_Maintain_Worker_Payroll_Reporting_Codes_Data__HV_TypeFormat extends scalaxb.ElemNameParser[generated2.Maintain_Worker_Payroll_Reporting_Codes_Data__HV_Type] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Maintain_Worker_Payroll_Reporting_Codes_Data__HV_Type")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Maintain_Worker_Payroll_Reporting_Codes_Data__HV_Type] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Employee_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Reference")) ~ 
      (scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Reporting_Code_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Maintain_Worker_Payroll_Reporting_Codes_Data__HV_Type(p1.headOption map { scalaxb.fromXML[generated2.EmployeeObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Position_ElementObjectType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p3, scalaxb.ElemName(node) :: stack),
        p4 map { scalaxb.fromXML[generated2.Maintain_Worker_Payroll_Reporting_Codes_Event_Data__HV_Type](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Maintain_Worker_Payroll_Reporting_Codes_Data__HV_Type, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Employee_Reference map { scalaxb.toXML[generated2.EmployeeObjectType](_, Some("urn:com.workday/bsvc"), Some("Employee_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Position_Reference map { scalaxb.toXML[generated2.Position_ElementObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.Effective_Date, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false),
        __obj.Payroll_Reporting_Code_Data flatMap { scalaxb.toXML[generated2.Maintain_Worker_Payroll_Reporting_Codes_Event_Data__HV_Type](_, Some("urn:com.workday/bsvc"), Some("Payroll_Reporting_Code_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Maintain_Worker_Payroll_Reporting_Codes_Event_Data__HV_TypeFormat extends scalaxb.ElemNameParser[generated2.Maintain_Worker_Payroll_Reporting_Codes_Event_Data__HV_Type] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Maintain_Worker_Payroll_Reporting_Codes_Event_Data__HV_Type")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Maintain_Worker_Payroll_Reporting_Codes_Event_Data__HV_Type] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Reporting_Code_Reference")) ^^
      { case p1 =>
      generated2.Maintain_Worker_Payroll_Reporting_Codes_Event_Data__HV_Type(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Reporting_Code__All_ObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Maintain_Worker_Payroll_Reporting_Codes_Event_Data__HV_Type, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Payroll_Reporting_Code_Reference map { scalaxb.toXML[generated2.Payroll_Reporting_Code__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Reporting_Code_Reference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Payroll_Reporting_Code_Data")) ^^
      { case p1 =>
      generated2.Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestType(p1 map { scalaxb.fromXML[generated2.Maintain_Worker_Payroll_Reporting_Codes_Data__HV_Type](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_Payroll_Reporting_Code_Data flatMap { scalaxb.toXML[generated2.Maintain_Worker_Payroll_Reporting_Codes_Data__HV_Type](_, Some("urn:com.workday/bsvc"), Some("Worker_Payroll_Reporting_Code_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Box_16_Au45F_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Box_16_Au45F_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Box_16_A-F_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Box_16_Au45F_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ^^
      { case p1 ~ p2 =>
      generated2.Box_16_Au45F_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Box_16_Au45F_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Box_16_Au45G_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Box_16_Au45G_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Box_16_A-G_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Box_16_Au45G_DataType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Amount")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Code")) ^^
      { case p1 ~ p2 =>
      generated2.Box_16_Au45G_DataType(p1.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Box_16_Au45G_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Amount map { scalaxb.toXML[BigDecimal](_, Some("urn:com.workday/bsvc"), Some("Amount"), __scope, false) } getOrElse {Nil},
        __obj.Code map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Code"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Reporting_Codes_for_Workers_RequestTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Reporting_Codes_for_Workers_RequestType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Reporting_Codes_for_Workers_RequestType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Reporting_Codes_for_Workers_RequestType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ^^
      { case p1 ~ p2 =>
      generated2.Get_Payroll_Reporting_Codes_for_Workers_RequestType(p1.headOption map { scalaxb.fromXML[generated2.Payroll_Reporting_Code_For_Workers_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Reporting_Codes_for_Workers_RequestType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Reporting_Codes_for_Workers_RequestType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References map { scalaxb.toXML[generated2.Payroll_Reporting_Code_For_Workers_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) } getOrElse {Nil},
        __obj.Response_Filter map { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Payroll_Reporting_Codes_for_WorkerTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Reporting_Codes_for_WorkerType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Reporting_Codes_for_WorkerType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Reporting_Codes_for_WorkerType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_and_Payroll_Reporting_Codes_Data")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Reporting_Codes_for_WorkerType(p1.headOption map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Reporting_Codes_for_PositionType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Reporting_Codes_for_WorkerType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Worker_Reference map { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Worker_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Position_and_Payroll_Reporting_Codes_Data flatMap { scalaxb.toXML[generated2.Payroll_Reporting_Codes_for_PositionType](_, Some("urn:com.workday/bsvc"), Some("Position_and_Payroll_Reporting_Codes_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Reporting_Codes_for_Workers_Response_DataTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Reporting_Codes_for_Workers_Response_DataType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Reporting_Codes_for_Workers_Response_DataType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Reporting_Codes_for_Workers_Response_DataType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Worker_Payroll_Codes_Data")) ^^
      { case p1 =>
      generated2.Payroll_Reporting_Codes_for_Workers_Response_DataType(p1 map { scalaxb.fromXML[generated2.Payroll_Reporting_Codes_for_WorkerType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Reporting_Codes_for_Workers_Response_DataType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Worker_Payroll_Codes_Data flatMap { scalaxb.toXML[generated2.Payroll_Reporting_Codes_for_WorkerType](_, Some("urn:com.workday/bsvc"), Some("Worker_Payroll_Codes_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Reporting_Code_For_Workers_Request_ReferencesTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Reporting_Code_For_Workers_Request_ReferencesType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Reporting_Code_For_Workers_Request_ReferencesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Reporting_Code_For_Workers_Request_ReferencesType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Workers_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Company_Reference")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Effective_Date")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Payroll_Reporting_Code_For_Workers_Request_ReferencesType(p1 map { scalaxb.fromXML[generated2.WorkerObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[generated2.CompanyObjectType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Reporting_Code_For_Workers_Request_ReferencesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Workers_Reference flatMap { scalaxb.toXML[generated2.WorkerObjectType](_, Some("urn:com.workday/bsvc"), Some("Workers_Reference"), __scope, false) },
        __obj.Company_Reference map { scalaxb.toXML[generated2.CompanyObjectType](_, Some("urn:com.workday/bsvc"), Some("Company_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Effective_Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("urn:com.workday/bsvc"), Some("Effective_Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Get_Payroll_Reporting_Codes_for_Workers_ResponseTypeFormat extends scalaxb.ElemNameParser[generated2.Get_Payroll_Reporting_Codes_for_Workers_ResponseType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Get_Payroll_Reporting_Codes_for_Workers_ResponseType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Get_Payroll_Reporting_Codes_for_Workers_ResponseType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Request_References")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Filter")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Results")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Response_Data")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      generated2.Get_Payroll_Reporting_Codes_for_Workers_ResponseType(p1 map { scalaxb.fromXML[generated2.Payroll_Reporting_Code_For_Workers_Request_ReferencesType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Response_FilterType](_, scalaxb.ElemName(node) :: stack) },
        p3 map { scalaxb.fromXML[generated2.Response_ResultsType](_, scalaxb.ElemName(node) :: stack) },
        p4 map { scalaxb.fromXML[generated2.Payroll_Reporting_Codes_for_Workers_Response_DataType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@{urn:com.workday/bsvc}version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Get_Payroll_Reporting_Codes_for_Workers_ResponseType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@{urn:com.workday/bsvc}version", _) => __obj.wdversion foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "version", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Get_Payroll_Reporting_Codes_for_Workers_ResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Request_References flatMap { scalaxb.toXML[generated2.Payroll_Reporting_Code_For_Workers_Request_ReferencesType](_, Some("urn:com.workday/bsvc"), Some("Request_References"), __scope, false) },
        __obj.Response_Filter flatMap { scalaxb.toXML[generated2.Response_FilterType](_, Some("urn:com.workday/bsvc"), Some("Response_Filter"), __scope, false) },
        __obj.Response_Results flatMap { scalaxb.toXML[generated2.Response_ResultsType](_, Some("urn:com.workday/bsvc"), Some("Response_Results"), __scope, false) },
        __obj.Response_Data flatMap { scalaxb.toXML[generated2.Payroll_Reporting_Codes_for_Workers_Response_DataType](_, Some("urn:com.workday/bsvc"), Some("Response_Data"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Reporting_Codes_for_PositionTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Reporting_Codes_for_PositionType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Reporting_Codes_for_PositionType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Reporting_Codes_for_PositionType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Position_Reference")) ~ 
      safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Payroll_Reporting_Codes_Reference")) ^^
      { case p1 ~ p2 =>
      generated2.Payroll_Reporting_Codes_for_PositionType(p1.headOption map { scalaxb.fromXML[generated2.PositionObjectType](_, scalaxb.ElemName(node) :: stack) },
        p2 map { scalaxb.fromXML[generated2.Payroll_Reporting_Code__All_ObjectType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Payroll_Reporting_Codes_for_PositionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Position_Reference map { scalaxb.toXML[generated2.PositionObjectType](_, Some("urn:com.workday/bsvc"), Some("Position_Reference"), __scope, false) } getOrElse {Nil},
        __obj.Payroll_Reporting_Codes_Reference flatMap { scalaxb.toXML[generated2.Payroll_Reporting_Code__All_ObjectType](_, Some("urn:com.workday/bsvc"), Some("Payroll_Reporting_Codes_Reference"), __scope, false) })

  }

  trait DefaultGenerated2_LocationObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.LocationObjectIDType] with scalaxb.CanWriteChildNodes[generated2.LocationObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.LocationObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.LocationObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.LocationObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.LocationObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Job_ProfileObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Job_ProfileObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Job_ProfileObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Job_ProfileObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Job_ProfileObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Job_ProfileObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Job_ProfileObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Organization_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Organization_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Organization_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Organization_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Organization_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Organization_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Organization_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_EmployeeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.EmployeeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.EmployeeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.EmployeeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.EmployeeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.EmployeeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.EmployeeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Instant_Messenger_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Instant_Messenger_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Instant_Messenger_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Instant_Messenger_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Instant_Messenger_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Instant_Messenger_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Instant_Messenger_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_WorkerObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.WorkerObjectIDType] with scalaxb.CanWriteChildNodes[generated2.WorkerObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.WorkerObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.WorkerObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.WorkerObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.WorkerObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_FrequencyObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.FrequencyObjectIDType] with scalaxb.CanWriteChildNodes[generated2.FrequencyObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.FrequencyObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.FrequencyObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.FrequencyObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.FrequencyObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Pay_Rate_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Pay_Rate_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Pay_Rate_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Pay_Rate_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Pay_Rate_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Pay_Rate_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_Rate_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Integration_System__Audited_ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Integration_System__Audited_ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Integration_System__Audited_ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Integration_System__Audited_ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Integration_System__Audited_ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Integration_System__Audited_ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Integration_System__Audited_ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Background_Process_Runtime_StatusObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Background_Process_Runtime_StatusObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Background_Process_Runtime_StatusObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Background_Process_Runtime_StatusObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Background_Process_Runtime_StatusObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Background_Process_Runtime_StatusObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Background_Process_Runtime_StatusObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Bank_AccountObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Bank_AccountObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Bank_AccountObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Bank_AccountObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Bank_AccountObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Bank_AccountObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Bank_AccountObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payment_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payment_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payment_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payment_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payment_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payment_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payment_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Phone_Device_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Phone_Device_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Phone_Device_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Phone_Device_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Phone_Device_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Phone_Device_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Phone_Device_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Pay_Group_DetailObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Pay_Group_DetailObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Pay_Group_DetailObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Pay_Group_DetailObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Pay_Group_DetailObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Pay_Group_DetailObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_Group_DetailObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Period_ScheduleObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Period_ScheduleObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Period_ScheduleObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Period_ScheduleObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Period_ScheduleObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Period_ScheduleObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Period_ScheduleObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_PeriodObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.PeriodObjectIDType] with scalaxb.CanWriteChildNodes[generated2.PeriodObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.PeriodObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.PeriodObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.PeriodObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.PeriodObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Run_CategoryObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Run_CategoryObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Run_CategoryObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Run_CategoryObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Run_CategoryObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Run_CategoryObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Run_CategoryObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Earning__All_ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Earning__All_ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Earning__All_ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Earning__All_ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Earning__All_ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Earning__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Earning__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Deduction__All_ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Deduction__All_ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Deduction__All_ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Deduction__All_ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Deduction__All_ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Deduction__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Deduction__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Pay_Accumulation__All_ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Pay_Accumulation__All_ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Pay_Accumulation__All_ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Pay_Accumulation__All_ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Pay_Accumulation__All_ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Pay_Accumulation__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_Accumulation__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_CalculationObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_CalculationObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_CalculationObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_CalculationObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_CalculationObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_CalculationObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_CalculationObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Balance_Period__All_ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Balance_Period__All_ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Balance_Period__All_ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Balance_Period__All_ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Balance_Period__All_ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Balance_Period__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Balance_Period__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_01ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_01ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_01ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_01ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_01ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_01ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_01ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_02ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_02ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_02ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_02ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_02ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_02ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_02ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_03ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_03ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_03ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_03ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_03ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_03ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_03ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_04ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_04ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_04ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_04ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_04ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_04ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_04ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_05ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_05ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_05ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_05ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_05ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_05ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_05ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Financial_InstitutionObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Financial_InstitutionObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Financial_InstitutionObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Financial_InstitutionObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Financial_InstitutionObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Financial_InstitutionObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Financial_InstitutionObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Pay_ComponentObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Pay_ComponentObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Pay_ComponentObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Pay_ComponentObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Pay_ComponentObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Pay_ComponentObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_ComponentObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Related_Calculation__All_ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Related_Calculation__All_ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Related_Calculation__All_ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Related_Calculation__All_ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Related_Calculation__All_ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Related_Calculation__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Related_Calculation__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_InputObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_InputObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_InputObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_InputObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_InputObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_InputObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_InputObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Withholding_StatusObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Withholding_StatusObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Withholding_StatusObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Withholding_StatusObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Withholding_StatusObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Withholding_StatusObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Withholding_StatusObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Communication_Usage_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Communication_Usage_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Communication_Usage_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Communication_Usage_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Communication_Usage_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Communication_Usage_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Communication_Usage_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Communication_Usage_BehaviorObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Communication_Usage_BehaviorObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Communication_Usage_BehaviorObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Communication_Usage_BehaviorObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Communication_Usage_BehaviorObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Communication_Usage_BehaviorObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Communication_Usage_BehaviorObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Period_Date_IndicatorObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Period_Date_IndicatorObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Period_Date_IndicatorObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Period_Date_IndicatorObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Period_Date_IndicatorObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Period_Date_IndicatorObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Period_Date_IndicatorObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_CountryObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.CountryObjectIDType] with scalaxb.CanWriteChildNodes[generated2.CountryObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.CountryObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.CountryObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.CountryObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.CountryObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Country_RegionObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Country_RegionObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Country_RegionObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Country_RegionObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Country_RegionObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Country_RegionObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Country_RegionObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_CurrencyObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.CurrencyObjectIDType] with scalaxb.CanWriteChildNodes[generated2.CurrencyObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.CurrencyObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.CurrencyObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.CurrencyObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.CurrencyObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Payee_Tax_DataObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_DataObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Payee_Tax_DataObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Payee_Tax_DataObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Payee_Tax_DataObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_Tax_DataObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_DataObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Payee_FUTAObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Payee_FUTAObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Payee_FUTAObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Payee_FUTAObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Payee_FUTAObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_FUTAObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_FUTAObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Tax_AuthorityObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Tax_AuthorityObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Tax_AuthorityObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Tax_AuthorityObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Tax_AuthorityObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Tax_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Tax_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_State_AuthorityObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_State_AuthorityObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_State_AuthorityObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_State_AuthorityObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_State_AuthorityObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_State_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_State_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Local_AuthorityObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Local_AuthorityObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Local_AuthorityObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Local_AuthorityObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Local_AuthorityObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Local_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Local_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Local_County_AuthorityObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Local_County_AuthorityObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Local_County_AuthorityObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Local_County_AuthorityObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Local_County_AuthorityObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Local_County_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Local_County_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Local_City_AuthorityObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Local_City_AuthorityObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Local_City_AuthorityObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Local_City_AuthorityObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Local_City_AuthorityObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Local_City_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Local_City_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Local_School_District_AuthorityObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Local_School_District_AuthorityObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Local_School_District_AuthorityObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Local_School_District_AuthorityObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Local_School_District_AuthorityObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Local_School_District_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Local_School_District_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Other_AuthorityObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Other_AuthorityObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Other_AuthorityObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Other_AuthorityObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Other_AuthorityObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Other_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Other_AuthorityObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Project_Plan_TaskObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Project_Plan_TaskObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Project_Plan_TaskObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Project_Plan_TaskObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Project_Plan_TaskObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Project_Plan_TaskObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Project_Plan_TaskObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_ProjectObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.ProjectObjectIDType] with scalaxb.CanWriteChildNodes[generated2.ProjectObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.ProjectObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.ProjectObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.ProjectObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.ProjectObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Frequency_BehaviorObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Frequency_BehaviorObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Frequency_BehaviorObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Frequency_BehaviorObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Frequency_BehaviorObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Frequency_BehaviorObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Frequency_BehaviorObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Settlement_InstructionObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Settlement_InstructionObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Settlement_InstructionObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Settlement_InstructionObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Settlement_InstructionObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_id" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Settlement_InstructionObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case ("@parent_id", _) => __obj.parent_id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_id", x.toString, attr) }
        case ("@parent_type", _) => __obj.parent_type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Settlement_InstructionObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Pay_GroupObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Pay_GroupObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Pay_GroupObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Pay_GroupObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Pay_GroupObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Pay_GroupObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_GroupObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Limit_OverrideObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Limit_OverrideObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Limit_OverrideObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Limit_OverrideObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Limit_OverrideObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Limit_OverrideObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Limit_OverrideObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Bank_Account_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Bank_Account_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Bank_Account_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Bank_Account_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Bank_Account_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Bank_Account_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Bank_Account_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payment_MethodObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payment_MethodObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payment_MethodObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payment_MethodObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payment_MethodObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payment_MethodObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payment_MethodObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Pay_Run_Group_SelectionObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Pay_Run_Group_SelectionObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Pay_Run_Group_SelectionObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Pay_Run_Group_SelectionObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Pay_Run_Group_SelectionObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Pay_Run_Group_SelectionObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_Run_Group_SelectionObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Deduction__Workday_Owned_ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Deduction__Workday_Owned_ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Deduction__Workday_Owned_ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Deduction__Workday_Owned_ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Deduction__Workday_Owned_ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Deduction__Workday_Owned_ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Deduction__Workday_Owned_ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_DeductionObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.DeductionObjectIDType] with scalaxb.CanWriteChildNodes[generated2.DeductionObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.DeductionObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.DeductionObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.DeductionObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.DeductionObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Payee_T1ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Payee_T1ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Payee_T1ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Payee_T1ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Payee_T1ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_T1ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_T1ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Limit_InterfaceObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Limit_InterfaceObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Limit_InterfaceObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Limit_InterfaceObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Limit_InterfaceObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Limit_InterfaceObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Limit_InterfaceObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_MonthObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.MonthObjectIDType] with scalaxb.CanWriteChildNodes[generated2.MonthObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.MonthObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.MonthObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.MonthObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.MonthObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Support_OrderObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Support_OrderObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Support_OrderObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Support_OrderObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Support_OrderObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Support_OrderObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Support_OrderObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Support_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Support_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Support_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Support_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Support_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Support_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Support_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Withholding_OrderObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Withholding_OrderObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Withholding_OrderObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Withholding_OrderObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Withholding_OrderObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Withholding_OrderObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_OrderObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Background_Process_RuntimeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Background_Process_RuntimeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Background_Process_RuntimeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Background_Process_RuntimeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Background_Process_RuntimeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Background_Process_RuntimeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Background_Process_RuntimeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Withholding_Order_CaseObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Withholding_Order_CaseObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Withholding_Order_CaseObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Withholding_Order_CaseObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Withholding_Order_CaseObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Withholding_Order_CaseObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_CaseObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Metadata_Payroll_WorktagObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Metadata_Payroll_WorktagObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Metadata_Payroll_WorktagObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Metadata_Payroll_WorktagObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Metadata_Payroll_WorktagObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Metadata_Payroll_WorktagObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Metadata_Payroll_WorktagObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Tenanted_Payroll_WorktagObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Tenanted_Payroll_WorktagObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Tenanted_Payroll_WorktagObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Tenanted_Payroll_WorktagObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Tenanted_Payroll_WorktagObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_id" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Tenanted_Payroll_WorktagObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case ("@parent_id", _) => __obj.parent_id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_id", x.toString, attr) }
        case ("@parent_type", _) => __obj.parent_type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Tenanted_Payroll_WorktagObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Deduction_RecipientObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Deduction_RecipientObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Deduction_RecipientObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Deduction_RecipientObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Deduction_RecipientObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Deduction_RecipientObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Deduction_RecipientObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Constant_TextObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Constant_TextObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Constant_TextObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Constant_TextObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Constant_TextObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Constant_TextObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Constant_TextObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payment_CategoryObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payment_CategoryObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payment_CategoryObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payment_CategoryObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payment_CategoryObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payment_CategoryObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payment_CategoryObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_WorktagObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_WorktagObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_WorktagObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_WorktagObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_WorktagObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_id" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_WorktagObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case ("@parent_id", _) => __obj.parent_id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_id", x.toString, attr) }
        case ("@parent_type", _) => __obj.parent_type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_WorktagObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Supervisory_OrganizationObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Supervisory_OrganizationObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Supervisory_OrganizationObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Supervisory_OrganizationObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Supervisory_OrganizationObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Supervisory_OrganizationObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Supervisory_OrganizationObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_CompanyObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.CompanyObjectIDType] with scalaxb.CanWriteChildNodes[generated2.CompanyObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.CompanyObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.CompanyObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.CompanyObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.CompanyObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Cost_CenterObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Cost_CenterObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Cost_CenterObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Cost_CenterObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Cost_CenterObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Cost_CenterObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Cost_CenterObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_RegionObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.RegionObjectIDType] with scalaxb.CanWriteChildNodes[generated2.RegionObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.RegionObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.RegionObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.RegionObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.RegionObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_OrganizationObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_OrganizationObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_OrganizationObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_OrganizationObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_OrganizationObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_OrganizationObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_OrganizationObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_PayeeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.PayeeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.PayeeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.PayeeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.PayeeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.PayeeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.PayeeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Background_Process_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Background_Process_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Background_Process_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Background_Process_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Background_Process_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Background_Process_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Background_Process_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Constant_PercentObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Constant_PercentObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Constant_PercentObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Constant_PercentObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Constant_PercentObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Constant_PercentObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Constant_PercentObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Settlement_Bank_AccountObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Settlement_Bank_AccountObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Settlement_Bank_AccountObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Settlement_Bank_AccountObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Settlement_Bank_AccountObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_id" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Settlement_Bank_AccountObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case ("@parent_id", _) => __obj.parent_id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_id", x.toString, attr) }
        case ("@parent_type", _) => __obj.parent_type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Settlement_Bank_AccountObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Withholding_Order_Fee_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Withholding_Order_Fee_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Withholding_Order_Fee_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Withholding_Order_Fee_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Withholding_Order_Fee_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Withholding_Order_Fee_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_Fee_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Constant_NumberObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Constant_NumberObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Constant_NumberObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Constant_NumberObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Constant_NumberObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Constant_NumberObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Constant_NumberObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Withholding_Order_Amount_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Withholding_Order_Amount_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Withholding_Order_Amount_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Withholding_Order_Amount_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Withholding_Order_Amount_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Withholding_Order_Amount_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_Amount_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Offu45cycle_Result_OverrideObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_Result_OverrideObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Offu45cycle_Result_OverrideObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Offu45cycle_Result_OverrideObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Offu45cycle_Result_OverrideObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Offu45cycle_Result_OverrideObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Offu45cycle_Result_OverrideObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Offu45cycle_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Offu45cycle_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Offu45cycle_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Offu45cycle_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Offu45cycle_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Offu45cycle_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Offu45cycle_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Calendar_QuarterObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Calendar_QuarterObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Calendar_QuarterObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Calendar_QuarterObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Calendar_QuarterObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Calendar_QuarterObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Calendar_QuarterObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Action_ReasonObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Action_ReasonObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Action_ReasonObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Action_ReasonObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Action_ReasonObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Action_ReasonObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Action_ReasonObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Background_ProcessObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Background_ProcessObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Background_ProcessObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Background_ProcessObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Background_ProcessObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_id" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Background_ProcessObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case ("@parent_id", _) => __obj.parent_id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_id", x.toString, attr) }
        case ("@parent_type", _) => __obj.parent_type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Background_ProcessObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Paycheck_Delivery_MethodObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Paycheck_Delivery_MethodObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Paycheck_Delivery_MethodObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Paycheck_Delivery_MethodObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Paycheck_Delivery_MethodObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Paycheck_Delivery_MethodObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Paycheck_Delivery_MethodObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Repository_DocumentObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Repository_DocumentObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Repository_DocumentObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Repository_DocumentObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Repository_DocumentObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Repository_DocumentObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Repository_DocumentObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_National_ID_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.National_ID_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.National_ID_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.National_ID_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.National_ID_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.National_ID_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.National_ID_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payslip_Printing_OverrideObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payslip_Printing_OverrideObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payslip_Printing_OverrideObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payslip_Printing_OverrideObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payslip_Printing_OverrideObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payslip_Printing_OverrideObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payslip_Printing_OverrideObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Paycheck_DeliveryObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Paycheck_DeliveryObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Paycheck_DeliveryObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Paycheck_DeliveryObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Paycheck_DeliveryObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Paycheck_DeliveryObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Paycheck_DeliveryObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Withholding_Order_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Withholding_Order_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Withholding_Order_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Withholding_Order_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Withholding_Order_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Withholding_Order_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Application_BatchObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Application_BatchObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Application_BatchObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Application_BatchObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Application_BatchObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Application_BatchObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Application_BatchObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Unique_IdentifierObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Unique_IdentifierObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Unique_IdentifierObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Unique_IdentifierObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Unique_IdentifierObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Unique_IdentifierObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Unique_IdentifierObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Alternate_Name_UsageObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Alternate_Name_UsageObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Alternate_Name_UsageObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Alternate_Name_UsageObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Alternate_Name_UsageObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Alternate_Name_UsageObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Alternate_Name_UsageObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Workers_Compensation_CodeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Workers_Compensation_CodeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Workers_Compensation_CodeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Workers_Compensation_CodeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Workers_Compensation_CodeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Workers_Compensation_CodeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Workers_Compensation_CodeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Calendar_YearObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Calendar_YearObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Calendar_YearObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Calendar_YearObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Calendar_YearObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Calendar_YearObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Calendar_YearObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Project_Plan_PhaseObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Project_Plan_PhaseObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Project_Plan_PhaseObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Project_Plan_PhaseObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Project_Plan_PhaseObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Project_Plan_PhaseObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Project_Plan_PhaseObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_External_Field_and_Parameter_Initialization_ProviderObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.External_Field_and_Parameter_Initialization_ProviderObjectIDType] with scalaxb.CanWriteChildNodes[generated2.External_Field_and_Parameter_Initialization_ProviderObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.External_Field_and_Parameter_Initialization_ProviderObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.External_Field_and_Parameter_Initialization_ProviderObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.External_Field_and_Parameter_Initialization_ProviderObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.External_Field_and_Parameter_Initialization_ProviderObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Position_ElementObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Position_ElementObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Position_ElementObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Position_ElementObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Position_ElementObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Position_ElementObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Position_ElementObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_FundObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.FundObjectIDType] with scalaxb.CanWriteChildNodes[generated2.FundObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.FundObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.FundObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.FundObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.FundObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Reporting_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Reporting_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Reporting_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Reporting_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Reporting_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Reporting_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Reporting_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Tax_LevyObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Tax_LevyObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Tax_LevyObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Tax_LevyObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Tax_LevyObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Tax_LevyObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Tax_LevyObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Integration_Document_FieldObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Integration_Document_FieldObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Integration_Document_FieldObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Integration_Document_FieldObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Integration_Document_FieldObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_id" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Integration_Document_FieldObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case ("@parent_id", _) => __obj.parent_id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_id", x.toString, attr) }
        case ("@parent_type", _) => __obj.parent_type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Integration_Document_FieldObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Reference_NumberObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Reference_NumberObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Reference_NumberObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Reference_NumberObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Reference_NumberObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Reference_NumberObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Reference_NumberObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Payee_PT1ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Payee_PT1ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Payee_PT1ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Payee_PT1ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Payee_PT1ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_PT1ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_PT1ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_PositionObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.PositionObjectIDType] with scalaxb.CanWriteChildNodes[generated2.PositionObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.PositionObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.PositionObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.PositionObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.PositionObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Period_Schedule_UsageObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Period_Schedule_UsageObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Period_Schedule_UsageObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Period_Schedule_UsageObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Period_Schedule_UsageObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Period_Schedule_UsageObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Period_Schedule_UsageObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Outsourced_Payment_GroupObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Outsourced_Payment_GroupObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Outsourced_Payment_GroupObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Outsourced_Payment_GroupObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Outsourced_Payment_GroupObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Outsourced_Payment_GroupObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Outsourced_Payment_GroupObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Position_RestrictionsObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Position_RestrictionsObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Position_RestrictionsObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Position_RestrictionsObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Position_RestrictionsObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Position_RestrictionsObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Position_RestrictionsObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Reporting_Code__All_ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Reporting_Code__All_ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Reporting_Code__All_ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Reporting_Code__All_ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Reporting_Code__All_ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_id" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Reporting_Code__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case ("@parent_id", _) => __obj.parent_id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_id", x.toString, attr) }
        case ("@parent_type", _) => __obj.parent_type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Reporting_Code__All_ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Time_Tracking_Eligibility_RuleObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Time_Tracking_Eligibility_RuleObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Time_Tracking_Eligibility_RuleObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Time_Tracking_Eligibility_RuleObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Time_Tracking_Eligibility_RuleObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Time_Tracking_Eligibility_RuleObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Time_Tracking_Eligibility_RuleObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Payee_FICA_Exempt_ReasonObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Payee_FICA_Exempt_ReasonObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Payee_FICA_Exempt_ReasonObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_FICA_Exempt_ReasonObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_FICA_Exempt_ReasonObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_ProgramObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.ProgramObjectIDType] with scalaxb.CanWriteChildNodes[generated2.ProgramObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.ProgramObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.ProgramObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.ProgramObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.ProgramObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_GrantObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.GrantObjectIDType] with scalaxb.CanWriteChildNodes[generated2.GrantObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.GrantObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.GrantObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.GrantObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.GrantObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Business_UnitObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Business_UnitObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Business_UnitObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Business_UnitObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Business_UnitObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Business_UnitObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Business_UnitObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Object_ClassObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Object_ClassObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Object_ClassObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Object_ClassObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Object_ClassObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Object_ClassObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Object_ClassObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Income_CodeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Income_CodeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Income_CodeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Income_CodeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Income_CodeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Income_CodeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Income_CodeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_IRS_CountryObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_IRS_CountryObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_IRS_CountryObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_IRS_CountryObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_IRS_CountryObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_IRS_CountryObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_IRS_CountryObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Treaty_USAObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Treaty_USAObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Payee_Tax_Treaty_USAObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Payee_Tax_Treaty_USAObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Payee_Tax_Treaty_USAObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_Tax_Treaty_USAObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Treaty_USAObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Kind_of_Employer_for_Payroll_Tax_FilingObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Income_Code_SubtypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Income_Code_SubtypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Income_Code_SubtypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Income_Code_SubtypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Income_Code_SubtypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Income_Code_SubtypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Income_Code_SubtypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Tax_Address_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Tax_Address_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Tax_Address_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Tax_Address_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Tax_Address_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Tax_Address_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Tax_Address_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_06ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_06ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_06ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_06ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_06ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_06ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_06ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_07ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_07ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_07ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_07ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_07ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_07ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_07ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_08ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_08ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_08ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_08ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_08ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_08ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_08ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_09ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_09ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_09ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_09ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_09ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_09ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_09ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_10ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_10ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_10ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_10ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_10ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_10ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_10ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_11ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_11ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_11ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_11ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_11ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_11ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_11ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_12ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_12ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_12ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_12ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_12ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_12ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_12ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_13ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_13ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_13ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_13ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_13ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_13ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_13ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_14ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_14ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_14ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_14ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_14ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_14ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_14ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Custom_Worktag_15ObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Custom_Worktag_15ObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Custom_Worktag_15ObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Custom_Worktag_15ObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Custom_Worktag_15ObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_15ObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_15ObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_GiftObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.GiftObjectIDType] with scalaxb.CanWriteChildNodes[generated2.GiftObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.GiftObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.GiftObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.GiftObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.GiftObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Address_ReferenceObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Address_ReferenceObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Address_ReferenceObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Address_ReferenceObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Address_ReferenceObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Address_ReferenceObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Address_ReferenceObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Web_Service_Background_Process_RuntimeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Web_Service_Background_Process_RuntimeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Web_Service_Background_Process_RuntimeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Web_Service_Background_Process_RuntimeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Web_Service_Background_Process_RuntimeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Web_Service_Background_Process_RuntimeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Web_Service_Background_Process_RuntimeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Report_Output_TagObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Report_Output_TagObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Report_Output_TagObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Report_Output_TagObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Report_Output_TagObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Report_Output_TagObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Report_Output_TagObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Successor_EmployerObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Successor_EmployerObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Successor_EmployerObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Successor_EmployerObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Successor_EmployerObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Successor_EmployerObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Successor_EmployerObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Company_Relationship_TypeObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Company_Relationship_TypeObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Company_Relationship_TypeObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Company_Relationship_TypeObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Company_Relationship_TypeObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Company_Relationship_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Company_Relationship_TypeObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Communication_Usage_Behavior_TenantedObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Communication_Usage_Behavior_TenantedObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Communication_Usage_Behavior_TenantedObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Communication_Usage_Behavior_TenantedObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Communication_Usage_Behavior_TenantedObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Communication_Usage_Behavior_TenantedObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Communication_Usage_Behavior_TenantedObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Time_Unit_for_AnnualizationObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Time_Unit_for_AnnualizationObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Time_Unit_for_AnnualizationObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Time_Unit_for_AnnualizationObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Time_Unit_for_AnnualizationObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Time_Unit_for_AnnualizationObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Time_Unit_for_AnnualizationObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Single_Legal_EntityObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Single_Legal_EntityObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Single_Legal_EntityObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Single_Legal_EntityObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Single_Legal_EntityObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Single_Legal_EntityObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Single_Legal_EntityObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_ARRCOu45AGIRC_Rubric_ValueObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.ARRCOu45AGIRC_Rubric_ValueObjectIDType] with scalaxb.CanWriteChildNodes[generated2.ARRCOu45AGIRC_Rubric_ValueObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.ARRCOu45AGIRC_Rubric_ValueObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.ARRCOu45AGIRC_Rubric_ValueObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.ARRCOu45AGIRC_Rubric_ValueObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.ARRCOu45AGIRC_Rubric_ValueObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_NI_CategoryObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.NI_CategoryObjectIDType] with scalaxb.CanWriteChildNodes[generated2.NI_CategoryObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.NI_CategoryObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.NI_CategoryObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.NI_CategoryObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.NI_CategoryObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_EstablishmentObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.EstablishmentObjectIDType] with scalaxb.CanWriteChildNodes[generated2.EstablishmentObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.EstablishmentObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.EstablishmentObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.EstablishmentObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.EstablishmentObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Event_Attachment_CategoryObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Event_Attachment_CategoryObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Event_Attachment_CategoryObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Event_Attachment_CategoryObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Event_Attachment_CategoryObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Event_Attachment_CategoryObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Event_Attachment_CategoryObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_IDObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_IDObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_IDObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_IDObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_IDObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_IDObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_IDObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Country_CityObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Country_CityObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Country_CityObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Country_CityObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Country_CityObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_id").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_id" -> _ },
        (node \ "@{urn:com.workday/bsvc}parent_type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@parent_type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Country_CityObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case ("@parent_id", _) => __obj.parent_id foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_id", x.toString, attr) }
        case ("@parent_type", _) => __obj.parent_type foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "parent_type", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Country_CityObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Withholding_Order_Override_Completion_CriteriaObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Withholding_Order_Override_Completion_CriteriaObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Withholding_Order_Override_Completion_CriteriaObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Withholding_Order_Override_Completion_CriteriaObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Withholding_Order_Override_Completion_CriteriaObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Withholding_Order_Override_Completion_CriteriaObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_Override_Completion_CriteriaObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Tax_Location_MappingObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Tax_Location_MappingObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Tax_Location_MappingObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Tax_Location_MappingObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Tax_Location_MappingObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Tax_Location_MappingObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Tax_Location_MappingObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Withholding_Order_Withholding_FrequencyObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Withholding_Order_Withholding_FrequencyObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Withholding_Order_Withholding_FrequencyObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Withholding_Order_Withholding_FrequencyObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Withholding_Order_Withholding_FrequencyObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Withholding_Order_Withholding_FrequencyObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_Withholding_FrequencyObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Location_MappingObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Payee_Tax_Location_MappingObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Payee_Tax_Location_MappingObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Payee_Tax_Location_MappingObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Payee_Tax_Location_MappingObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_Tax_Location_MappingObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Location_MappingObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Pay_Group_Pay_Run_Group_SelectionObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Pay_Group_Pay_Run_Group_SelectionObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Pay_Group_Pay_Run_Group_SelectionObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Pay_Group_Pay_Run_Group_SelectionObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Pay_Group_Pay_Run_Group_SelectionObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Pay_Group_Pay_Run_Group_SelectionObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_Group_Pay_Run_Group_SelectionObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Email_ReferenceObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Email_ReferenceObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Email_ReferenceObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Email_ReferenceObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Email_ReferenceObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Email_ReferenceObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Email_ReferenceObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payslip_Printing_OptionObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payslip_Printing_OptionObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payslip_Printing_OptionObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payslip_Printing_OptionObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payslip_Printing_OptionObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payslip_Printing_OptionObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payslip_Printing_OptionObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Payroll_Event_CategoryObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Payroll_Event_CategoryObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Payroll_Event_CategoryObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Payroll_Event_CategoryObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Payroll_Event_CategoryObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Payroll_Event_CategoryObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Event_CategoryObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Phone_ReferenceObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Phone_ReferenceObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Phone_ReferenceObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Phone_ReferenceObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Phone_ReferenceObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Phone_ReferenceObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Phone_ReferenceObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Web_Address_ReferenceObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Web_Address_ReferenceObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Web_Address_ReferenceObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Web_Address_ReferenceObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Web_Address_ReferenceObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Web_Address_ReferenceObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Web_Address_ReferenceObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_Instant_Messenger_ReferenceObjectIDTypeFormat extends scalaxb.XMLFormat[generated2.Instant_Messenger_ReferenceObjectIDType] with scalaxb.CanWriteChildNodes[generated2.Instant_Messenger_ReferenceObjectIDType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, generated2.Instant_Messenger_ReferenceObjectIDType] = seq match {
      case node: scala.xml.Node => Right(generated2.Instant_Messenger_ReferenceObjectIDType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: generated2.Instant_Messenger_ReferenceObjectIDType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@type", _) => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "type", __obj.typeValue.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Instant_Messenger_ReferenceObjectIDType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultGenerated2_LocationObjectTypeFormat extends scalaxb.ElemNameParser[generated2.LocationObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("LocationObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.LocationObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.LocationObjectType(p1 map { scalaxb.fromXML[generated2.LocationObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.LocationObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.LocationObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.LocationObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Job_ProfileObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Job_ProfileObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Job_ProfileObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Job_ProfileObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Job_ProfileObjectType(p1 map { scalaxb.fromXML[generated2.Job_ProfileObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Job_ProfileObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Job_ProfileObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Job_ProfileObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Organization_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Organization_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Organization_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Organization_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Organization_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Organization_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Organization_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Organization_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Organization_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_EmployeeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.EmployeeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EmployeeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EmployeeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.EmployeeObjectType(p1 map { scalaxb.fromXML[generated2.EmployeeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.EmployeeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.EmployeeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.EmployeeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Instant_Messenger_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Instant_Messenger_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Instant_Messenger_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Instant_Messenger_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Instant_Messenger_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Instant_Messenger_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Instant_Messenger_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Instant_Messenger_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Instant_Messenger_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_WorkerObjectTypeFormat extends scalaxb.ElemNameParser[generated2.WorkerObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("WorkerObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.WorkerObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.WorkerObjectType(p1 map { scalaxb.fromXML[generated2.WorkerObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.WorkerObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.WorkerObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.WorkerObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_FrequencyObjectTypeFormat extends scalaxb.ElemNameParser[generated2.FrequencyObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("FrequencyObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.FrequencyObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.FrequencyObjectType(p1 map { scalaxb.fromXML[generated2.FrequencyObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.FrequencyObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.FrequencyObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.FrequencyObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_Rate_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Rate_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Rate_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Rate_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Pay_Rate_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Pay_Rate_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Pay_Rate_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_Rate_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Pay_Rate_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Integration_System__Audited_ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Integration_System__Audited_ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Integration_System__Audited_ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Integration_System__Audited_ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Integration_System__Audited_ObjectType(p1 map { scalaxb.fromXML[generated2.Integration_System__Audited_ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Integration_System__Audited_ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Integration_System__Audited_ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Integration_System__Audited_ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Background_Process_Runtime_StatusObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Background_Process_Runtime_StatusObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Background_Process_Runtime_StatusObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Background_Process_Runtime_StatusObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Background_Process_Runtime_StatusObjectType(p1 map { scalaxb.fromXML[generated2.Background_Process_Runtime_StatusObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Background_Process_Runtime_StatusObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Background_Process_Runtime_StatusObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Background_Process_Runtime_StatusObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Bank_AccountObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Bank_AccountObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Bank_AccountObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Bank_AccountObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Bank_AccountObjectType(p1 map { scalaxb.fromXML[generated2.Bank_AccountObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Bank_AccountObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Bank_AccountObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Bank_AccountObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payment_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payment_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payment_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payment_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payment_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Payment_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payment_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payment_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payment_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Phone_Device_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Phone_Device_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Phone_Device_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Phone_Device_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Phone_Device_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Phone_Device_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Phone_Device_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Phone_Device_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Phone_Device_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_Group_DetailObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Group_DetailObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Group_DetailObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Group_DetailObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Pay_Group_DetailObjectType(p1 map { scalaxb.fromXML[generated2.Pay_Group_DetailObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Pay_Group_DetailObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_Group_DetailObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Pay_Group_DetailObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Period_ScheduleObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Period_ScheduleObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Period_ScheduleObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Period_ScheduleObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Period_ScheduleObjectType(p1 map { scalaxb.fromXML[generated2.Period_ScheduleObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Period_ScheduleObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Period_ScheduleObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Period_ScheduleObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_PeriodObjectTypeFormat extends scalaxb.ElemNameParser[generated2.PeriodObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("PeriodObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.PeriodObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.PeriodObjectType(p1 map { scalaxb.fromXML[generated2.PeriodObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.PeriodObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.PeriodObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.PeriodObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Run_CategoryObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Run_CategoryObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Run_CategoryObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Run_CategoryObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Run_CategoryObjectType(p1 map { scalaxb.fromXML[generated2.Run_CategoryObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Run_CategoryObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Run_CategoryObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Run_CategoryObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Earning__All_ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Earning__All_ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Earning__All_ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Earning__All_ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Earning__All_ObjectType(p1 map { scalaxb.fromXML[generated2.Earning__All_ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Earning__All_ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Earning__All_ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Earning__All_ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Deduction__All_ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Deduction__All_ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Deduction__All_ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Deduction__All_ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Deduction__All_ObjectType(p1 map { scalaxb.fromXML[generated2.Deduction__All_ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Deduction__All_ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Deduction__All_ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Deduction__All_ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_Accumulation__All_ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Accumulation__All_ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Accumulation__All_ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Accumulation__All_ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Pay_Accumulation__All_ObjectType(p1 map { scalaxb.fromXML[generated2.Pay_Accumulation__All_ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Pay_Accumulation__All_ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_Accumulation__All_ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Pay_Accumulation__All_ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_CalculationObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_CalculationObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_CalculationObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_CalculationObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_CalculationObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_CalculationObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_CalculationObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_CalculationObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_CalculationObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Balance_Period__All_ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Balance_Period__All_ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Balance_Period__All_ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Balance_Period__All_ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Balance_Period__All_ObjectType(p1 map { scalaxb.fromXML[generated2.Balance_Period__All_ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Balance_Period__All_ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Balance_Period__All_ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Balance_Period__All_ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_01ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_01ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_01ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_01ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_01ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_01ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_01ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_01ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_01ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_02ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_02ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_02ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_02ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_02ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_02ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_02ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_02ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_02ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_03ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_03ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_03ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_03ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_03ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_03ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_03ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_03ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_03ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_04ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_04ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_04ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_04ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_04ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_04ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_04ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_04ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_04ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_05ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_05ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_05ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_05ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_05ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_05ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_05ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_05ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_05ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Financial_InstitutionObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Financial_InstitutionObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Financial_InstitutionObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Financial_InstitutionObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Financial_InstitutionObjectType(p1 map { scalaxb.fromXML[generated2.Financial_InstitutionObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Financial_InstitutionObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Financial_InstitutionObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Financial_InstitutionObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_ComponentObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_ComponentObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_ComponentObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_ComponentObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Pay_ComponentObjectType(p1 map { scalaxb.fromXML[generated2.Pay_ComponentObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Pay_ComponentObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_ComponentObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Pay_ComponentObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Related_Calculation__All_ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Related_Calculation__All_ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Related_Calculation__All_ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Related_Calculation__All_ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Related_Calculation__All_ObjectType(p1 map { scalaxb.fromXML[generated2.Related_Calculation__All_ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Related_Calculation__All_ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Related_Calculation__All_ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Related_Calculation__All_ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_InputObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_InputObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_InputObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_InputObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_InputObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_InputObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_InputObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_InputObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_InputObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Withholding_StatusObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Withholding_StatusObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Withholding_StatusObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Withholding_StatusObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Withholding_StatusObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Withholding_StatusObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Withholding_StatusObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Withholding_StatusObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Withholding_StatusObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Communication_Usage_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Communication_Usage_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Communication_Usage_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Communication_Usage_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Communication_Usage_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Communication_Usage_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Communication_Usage_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Communication_Usage_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Communication_Usage_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Communication_Usage_BehaviorObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Communication_Usage_BehaviorObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Communication_Usage_BehaviorObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Communication_Usage_BehaviorObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Communication_Usage_BehaviorObjectType(p1 map { scalaxb.fromXML[generated2.Communication_Usage_BehaviorObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Communication_Usage_BehaviorObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Communication_Usage_BehaviorObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Communication_Usage_BehaviorObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Period_Date_IndicatorObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Period_Date_IndicatorObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Period_Date_IndicatorObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Period_Date_IndicatorObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Period_Date_IndicatorObjectType(p1 map { scalaxb.fromXML[generated2.Period_Date_IndicatorObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Period_Date_IndicatorObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Period_Date_IndicatorObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Period_Date_IndicatorObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_CountryObjectTypeFormat extends scalaxb.ElemNameParser[generated2.CountryObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("CountryObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.CountryObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.CountryObjectType(p1 map { scalaxb.fromXML[generated2.CountryObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.CountryObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.CountryObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.CountryObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Country_RegionObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Country_RegionObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Country_RegionObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Country_RegionObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Country_RegionObjectType(p1 map { scalaxb.fromXML[generated2.Country_RegionObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Country_RegionObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Country_RegionObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Country_RegionObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_CurrencyObjectTypeFormat extends scalaxb.ElemNameParser[generated2.CurrencyObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("CurrencyObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.CurrencyObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.CurrencyObjectType(p1 map { scalaxb.fromXML[generated2.CurrencyObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.CurrencyObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.CurrencyObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.CurrencyObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_DataObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_DataObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_DataObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_DataObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Payee_Tax_DataObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_DataObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_Tax_DataObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_DataObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Payee_Tax_DataObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_FUTAObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_FUTAObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_FUTAObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_FUTAObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Payee_FUTAObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_FUTAObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_FUTAObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_FUTAObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Payee_FUTAObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Tax_AuthorityObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Tax_AuthorityObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Tax_AuthorityObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Tax_AuthorityObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Tax_AuthorityObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Tax_AuthorityObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Tax_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Tax_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Tax_AuthorityObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_State_AuthorityObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_State_AuthorityObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_State_AuthorityObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_State_AuthorityObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_State_AuthorityObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_State_AuthorityObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_State_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_State_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_State_AuthorityObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Local_AuthorityObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Local_AuthorityObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Local_AuthorityObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Local_AuthorityObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Local_AuthorityObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Local_AuthorityObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Local_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Local_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Local_AuthorityObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Local_County_AuthorityObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Local_County_AuthorityObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Local_County_AuthorityObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Local_County_AuthorityObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Local_County_AuthorityObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Local_County_AuthorityObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Local_County_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Local_County_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Local_County_AuthorityObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Local_City_AuthorityObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Local_City_AuthorityObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Local_City_AuthorityObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Local_City_AuthorityObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Local_City_AuthorityObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Local_City_AuthorityObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Local_City_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Local_City_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Local_City_AuthorityObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Local_School_District_AuthorityObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Local_School_District_AuthorityObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Local_School_District_AuthorityObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Local_School_District_AuthorityObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Local_School_District_AuthorityObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Local_School_District_AuthorityObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Local_School_District_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Local_School_District_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Local_School_District_AuthorityObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Other_AuthorityObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Other_AuthorityObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Other_AuthorityObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Other_AuthorityObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Other_AuthorityObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Other_AuthorityObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Other_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Other_AuthorityObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Other_AuthorityObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Project_Plan_TaskObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Project_Plan_TaskObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Project_Plan_TaskObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Project_Plan_TaskObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Project_Plan_TaskObjectType(p1 map { scalaxb.fromXML[generated2.Project_Plan_TaskObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Project_Plan_TaskObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Project_Plan_TaskObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Project_Plan_TaskObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_ProjectObjectTypeFormat extends scalaxb.ElemNameParser[generated2.ProjectObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("ProjectObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.ProjectObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.ProjectObjectType(p1 map { scalaxb.fromXML[generated2.ProjectObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.ProjectObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.ProjectObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.ProjectObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Frequency_BehaviorObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Frequency_BehaviorObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Frequency_BehaviorObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Frequency_BehaviorObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Frequency_BehaviorObjectType(p1 map { scalaxb.fromXML[generated2.Frequency_BehaviorObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Frequency_BehaviorObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Frequency_BehaviorObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Frequency_BehaviorObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Settlement_InstructionObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Settlement_InstructionObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Settlement_InstructionObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Settlement_InstructionObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Settlement_InstructionObjectType(p1 map { scalaxb.fromXML[generated2.Settlement_InstructionObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Settlement_InstructionObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Settlement_InstructionObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Settlement_InstructionObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_GroupObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_GroupObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_GroupObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_GroupObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Pay_GroupObjectType(p1 map { scalaxb.fromXML[generated2.Pay_GroupObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Pay_GroupObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_GroupObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Pay_GroupObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Limit_OverrideObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Limit_OverrideObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Limit_OverrideObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Limit_OverrideObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Limit_OverrideObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Limit_OverrideObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Limit_OverrideObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Limit_OverrideObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Limit_OverrideObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Bank_Account_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Bank_Account_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Bank_Account_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Bank_Account_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Bank_Account_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Bank_Account_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Bank_Account_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Bank_Account_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Bank_Account_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payment_MethodObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payment_MethodObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payment_MethodObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payment_MethodObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payment_MethodObjectType(p1 map { scalaxb.fromXML[generated2.Payment_MethodObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payment_MethodObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payment_MethodObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payment_MethodObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_Run_Group_SelectionObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Run_Group_SelectionObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Run_Group_SelectionObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Run_Group_SelectionObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Pay_Run_Group_SelectionObjectType(p1 map { scalaxb.fromXML[generated2.Pay_Run_Group_SelectionObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Pay_Run_Group_SelectionObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_Run_Group_SelectionObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Pay_Run_Group_SelectionObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Deduction__Workday_Owned_ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Deduction__Workday_Owned_ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Deduction__Workday_Owned_ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Deduction__Workday_Owned_ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Deduction__Workday_Owned_ObjectType(p1 map { scalaxb.fromXML[generated2.Deduction__Workday_Owned_ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Deduction__Workday_Owned_ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Deduction__Workday_Owned_ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Deduction__Workday_Owned_ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_DeductionObjectTypeFormat extends scalaxb.ElemNameParser[generated2.DeductionObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("DeductionObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.DeductionObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.DeductionObjectType(p1 map { scalaxb.fromXML[generated2.DeductionObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.DeductionObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.DeductionObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.DeductionObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_T1ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_T1ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_T1ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_T1ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Payee_T1ObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_T1ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_T1ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_T1ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Payee_T1ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Limit_InterfaceObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Limit_InterfaceObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Limit_InterfaceObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Limit_InterfaceObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Limit_InterfaceObjectType(p1 map { scalaxb.fromXML[generated2.Limit_InterfaceObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Limit_InterfaceObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Limit_InterfaceObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Limit_InterfaceObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_MonthObjectTypeFormat extends scalaxb.ElemNameParser[generated2.MonthObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("MonthObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.MonthObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.MonthObjectType(p1 map { scalaxb.fromXML[generated2.MonthObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.MonthObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.MonthObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.MonthObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Support_OrderObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Support_OrderObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Support_OrderObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Support_OrderObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Support_OrderObjectType(p1 map { scalaxb.fromXML[generated2.Support_OrderObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Support_OrderObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Support_OrderObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Support_OrderObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Support_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Support_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Support_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Support_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Support_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Support_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Support_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Support_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Support_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Withholding_OrderObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Withholding_OrderObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Withholding_OrderObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Withholding_OrderObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Withholding_OrderObjectType(p1 map { scalaxb.fromXML[generated2.Withholding_OrderObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Withholding_OrderObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_OrderObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Withholding_OrderObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Background_Process_RuntimeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Background_Process_RuntimeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Background_Process_RuntimeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Background_Process_RuntimeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Background_Process_RuntimeObjectType(p1 map { scalaxb.fromXML[generated2.Background_Process_RuntimeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Background_Process_RuntimeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Background_Process_RuntimeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Background_Process_RuntimeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Withholding_Order_CaseObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Withholding_Order_CaseObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Withholding_Order_CaseObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Withholding_Order_CaseObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Withholding_Order_CaseObjectType(p1 map { scalaxb.fromXML[generated2.Withholding_Order_CaseObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Withholding_Order_CaseObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_CaseObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Withholding_Order_CaseObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Metadata_Payroll_WorktagObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Metadata_Payroll_WorktagObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Metadata_Payroll_WorktagObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Metadata_Payroll_WorktagObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Metadata_Payroll_WorktagObjectType(p1 map { scalaxb.fromXML[generated2.Metadata_Payroll_WorktagObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Metadata_Payroll_WorktagObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Metadata_Payroll_WorktagObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Metadata_Payroll_WorktagObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Tenanted_Payroll_WorktagObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Tenanted_Payroll_WorktagObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tenanted_Payroll_WorktagObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tenanted_Payroll_WorktagObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Tenanted_Payroll_WorktagObjectType(p1 map { scalaxb.fromXML[generated2.Tenanted_Payroll_WorktagObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Tenanted_Payroll_WorktagObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Tenanted_Payroll_WorktagObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Tenanted_Payroll_WorktagObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Deduction_RecipientObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Deduction_RecipientObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Deduction_RecipientObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Deduction_RecipientObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Deduction_RecipientObjectType(p1 map { scalaxb.fromXML[generated2.Deduction_RecipientObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Deduction_RecipientObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Deduction_RecipientObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Deduction_RecipientObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Constant_TextObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Constant_TextObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Constant_TextObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Constant_TextObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Constant_TextObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Constant_TextObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Constant_TextObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Constant_TextObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Constant_TextObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payment_CategoryObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payment_CategoryObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payment_CategoryObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payment_CategoryObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payment_CategoryObjectType(p1 map { scalaxb.fromXML[generated2.Payment_CategoryObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payment_CategoryObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payment_CategoryObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payment_CategoryObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_WorktagObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_WorktagObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_WorktagObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_WorktagObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_WorktagObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_WorktagObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_WorktagObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_WorktagObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_WorktagObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Supervisory_OrganizationObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Supervisory_OrganizationObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Supervisory_OrganizationObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Supervisory_OrganizationObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Supervisory_OrganizationObjectType(p1 map { scalaxb.fromXML[generated2.Supervisory_OrganizationObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Supervisory_OrganizationObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Supervisory_OrganizationObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Supervisory_OrganizationObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_CompanyObjectTypeFormat extends scalaxb.ElemNameParser[generated2.CompanyObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("CompanyObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.CompanyObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.CompanyObjectType(p1 map { scalaxb.fromXML[generated2.CompanyObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.CompanyObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.CompanyObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.CompanyObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Cost_CenterObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Cost_CenterObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Cost_CenterObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Cost_CenterObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Cost_CenterObjectType(p1 map { scalaxb.fromXML[generated2.Cost_CenterObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Cost_CenterObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Cost_CenterObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Cost_CenterObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_RegionObjectTypeFormat extends scalaxb.ElemNameParser[generated2.RegionObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("RegionObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.RegionObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.RegionObjectType(p1 map { scalaxb.fromXML[generated2.RegionObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.RegionObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.RegionObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.RegionObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_OrganizationObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_OrganizationObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_OrganizationObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_OrganizationObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_OrganizationObjectType(p1 map { scalaxb.fromXML[generated2.Custom_OrganizationObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_OrganizationObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_OrganizationObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_OrganizationObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_PayeeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.PayeeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("PayeeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.PayeeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.PayeeObjectType(p1 map { scalaxb.fromXML[generated2.PayeeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.PayeeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.PayeeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.PayeeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Background_Process_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Background_Process_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Background_Process_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Background_Process_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Background_Process_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Background_Process_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Background_Process_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Background_Process_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Background_Process_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Constant_PercentObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Constant_PercentObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Constant_PercentObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Constant_PercentObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Constant_PercentObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Constant_PercentObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Constant_PercentObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Constant_PercentObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Constant_PercentObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Settlement_Bank_AccountObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Settlement_Bank_AccountObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Settlement_Bank_AccountObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Settlement_Bank_AccountObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Settlement_Bank_AccountObjectType(p1 map { scalaxb.fromXML[generated2.Settlement_Bank_AccountObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Settlement_Bank_AccountObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Settlement_Bank_AccountObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Settlement_Bank_AccountObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Withholding_Order_Fee_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Withholding_Order_Fee_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Withholding_Order_Fee_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Withholding_Order_Fee_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Withholding_Order_Fee_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Withholding_Order_Fee_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Withholding_Order_Fee_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_Fee_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Withholding_Order_Fee_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Constant_NumberObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Constant_NumberObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Constant_NumberObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Constant_NumberObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Constant_NumberObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Constant_NumberObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Constant_NumberObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Constant_NumberObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Constant_NumberObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Withholding_Order_Amount_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Withholding_Order_Amount_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Withholding_Order_Amount_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Withholding_Order_Amount_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Withholding_Order_Amount_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Withholding_Order_Amount_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Withholding_Order_Amount_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_Amount_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Withholding_Order_Amount_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Offu45cycle_Result_OverrideObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Offu45cycle_Result_OverrideObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Off-cycle_Result_OverrideObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Offu45cycle_Result_OverrideObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Offu45cycle_Result_OverrideObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Offu45cycle_Result_OverrideObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Offu45cycle_Result_OverrideObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Offu45cycle_Result_OverrideObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Offu45cycle_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Offu45cycle_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Off-cycle_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Offu45cycle_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Offu45cycle_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Offu45cycle_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Offu45cycle_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Offu45cycle_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Offu45cycle_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Calendar_QuarterObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Calendar_QuarterObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Calendar_QuarterObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Calendar_QuarterObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Calendar_QuarterObjectType(p1 map { scalaxb.fromXML[generated2.Calendar_QuarterObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Calendar_QuarterObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Calendar_QuarterObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Calendar_QuarterObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Action_ReasonObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Action_ReasonObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Action_ReasonObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Action_ReasonObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Action_ReasonObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Action_ReasonObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Action_ReasonObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Action_ReasonObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Action_ReasonObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Background_ProcessObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Background_ProcessObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Background_ProcessObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Background_ProcessObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Background_ProcessObjectType(p1 map { scalaxb.fromXML[generated2.Background_ProcessObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Background_ProcessObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Background_ProcessObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Background_ProcessObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Paycheck_Delivery_MethodObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Paycheck_Delivery_MethodObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Paycheck_Delivery_MethodObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Paycheck_Delivery_MethodObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Paycheck_Delivery_MethodObjectType(p1 map { scalaxb.fromXML[generated2.Paycheck_Delivery_MethodObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Paycheck_Delivery_MethodObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Paycheck_Delivery_MethodObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Paycheck_Delivery_MethodObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Repository_DocumentObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Repository_DocumentObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Repository_DocumentObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Repository_DocumentObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Repository_DocumentObjectType(p1 map { scalaxb.fromXML[generated2.Repository_DocumentObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Repository_DocumentObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Repository_DocumentObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Repository_DocumentObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_National_ID_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.National_ID_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("National_ID_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.National_ID_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.National_ID_TypeObjectType(p1 map { scalaxb.fromXML[generated2.National_ID_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.National_ID_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.National_ID_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.National_ID_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payslip_Printing_OverrideObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payslip_Printing_OverrideObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payslip_Printing_OverrideObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payslip_Printing_OverrideObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payslip_Printing_OverrideObjectType(p1 map { scalaxb.fromXML[generated2.Payslip_Printing_OverrideObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payslip_Printing_OverrideObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payslip_Printing_OverrideObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payslip_Printing_OverrideObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Paycheck_DeliveryObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Paycheck_DeliveryObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Paycheck_DeliveryObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Paycheck_DeliveryObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Paycheck_DeliveryObjectType(p1 map { scalaxb.fromXML[generated2.Paycheck_DeliveryObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Paycheck_DeliveryObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Paycheck_DeliveryObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Paycheck_DeliveryObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Withholding_Order_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Withholding_Order_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Withholding_Order_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Withholding_Order_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Withholding_Order_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Withholding_Order_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Withholding_Order_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Withholding_Order_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Application_BatchObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Application_BatchObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Application_BatchObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Application_BatchObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Application_BatchObjectType(p1 map { scalaxb.fromXML[generated2.Application_BatchObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Application_BatchObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Application_BatchObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Application_BatchObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Unique_IdentifierObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Unique_IdentifierObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Unique_IdentifierObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Unique_IdentifierObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Unique_IdentifierObjectType(p1 map { scalaxb.fromXML[generated2.Unique_IdentifierObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Unique_IdentifierObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Unique_IdentifierObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Unique_IdentifierObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Alternate_Name_UsageObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Alternate_Name_UsageObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Alternate_Name_UsageObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Alternate_Name_UsageObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Alternate_Name_UsageObjectType(p1 map { scalaxb.fromXML[generated2.Alternate_Name_UsageObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Alternate_Name_UsageObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Alternate_Name_UsageObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Alternate_Name_UsageObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Workers_Compensation_CodeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Workers_Compensation_CodeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Workers_Compensation_CodeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Workers_Compensation_CodeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Workers_Compensation_CodeObjectType(p1 map { scalaxb.fromXML[generated2.Workers_Compensation_CodeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Workers_Compensation_CodeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Workers_Compensation_CodeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Workers_Compensation_CodeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Calendar_YearObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Calendar_YearObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Calendar_YearObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Calendar_YearObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Calendar_YearObjectType(p1 map { scalaxb.fromXML[generated2.Calendar_YearObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Calendar_YearObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Calendar_YearObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Calendar_YearObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Project_Plan_PhaseObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Project_Plan_PhaseObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Project_Plan_PhaseObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Project_Plan_PhaseObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Project_Plan_PhaseObjectType(p1 map { scalaxb.fromXML[generated2.Project_Plan_PhaseObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Project_Plan_PhaseObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Project_Plan_PhaseObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Project_Plan_PhaseObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_External_Field_and_Parameter_Initialization_ProviderObjectTypeFormat extends scalaxb.ElemNameParser[generated2.External_Field_and_Parameter_Initialization_ProviderObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("External_Field_and_Parameter_Initialization_ProviderObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.External_Field_and_Parameter_Initialization_ProviderObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.External_Field_and_Parameter_Initialization_ProviderObjectType(p1 map { scalaxb.fromXML[generated2.External_Field_and_Parameter_Initialization_ProviderObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.External_Field_and_Parameter_Initialization_ProviderObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.External_Field_and_Parameter_Initialization_ProviderObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.External_Field_and_Parameter_Initialization_ProviderObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Position_ElementObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Position_ElementObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Position_ElementObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Position_ElementObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Position_ElementObjectType(p1 map { scalaxb.fromXML[generated2.Position_ElementObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Position_ElementObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Position_ElementObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Position_ElementObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_FundObjectTypeFormat extends scalaxb.ElemNameParser[generated2.FundObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("FundObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.FundObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.FundObjectType(p1 map { scalaxb.fromXML[generated2.FundObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.FundObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.FundObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.FundObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Reporting_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Reporting_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Reporting_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Reporting_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Reporting_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Reporting_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Reporting_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Reporting_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Reporting_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Tax_LevyObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_LevyObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_LevyObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_LevyObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Tax_LevyObjectType(p1 map { scalaxb.fromXML[generated2.Tax_LevyObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Tax_LevyObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Tax_LevyObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Tax_LevyObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Integration_Document_FieldObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Integration_Document_FieldObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Integration_Document_FieldObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Integration_Document_FieldObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Integration_Document_FieldObjectType(p1 map { scalaxb.fromXML[generated2.Integration_Document_FieldObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Integration_Document_FieldObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Integration_Document_FieldObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Integration_Document_FieldObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Reference_NumberObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Reference_NumberObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Reference_NumberObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Reference_NumberObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Reference_NumberObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Reference_NumberObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Reference_NumberObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Reference_NumberObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Reference_NumberObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_PT1ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_PT1ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_PT1ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_PT1ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Payee_PT1ObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_PT1ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_PT1ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_PT1ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Payee_PT1ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_PositionObjectTypeFormat extends scalaxb.ElemNameParser[generated2.PositionObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("PositionObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.PositionObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.PositionObjectType(p1 map { scalaxb.fromXML[generated2.PositionObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.PositionObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.PositionObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.PositionObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Period_Schedule_UsageObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Period_Schedule_UsageObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Period_Schedule_UsageObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Period_Schedule_UsageObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Period_Schedule_UsageObjectType(p1 map { scalaxb.fromXML[generated2.Period_Schedule_UsageObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Period_Schedule_UsageObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Period_Schedule_UsageObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Period_Schedule_UsageObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Outsourced_Payment_GroupObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Outsourced_Payment_GroupObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Outsourced_Payment_GroupObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Outsourced_Payment_GroupObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Outsourced_Payment_GroupObjectType(p1 map { scalaxb.fromXML[generated2.Outsourced_Payment_GroupObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Outsourced_Payment_GroupObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Outsourced_Payment_GroupObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Outsourced_Payment_GroupObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Position_RestrictionsObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Position_RestrictionsObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Position_RestrictionsObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Position_RestrictionsObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Position_RestrictionsObjectType(p1 map { scalaxb.fromXML[generated2.Position_RestrictionsObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Position_RestrictionsObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Position_RestrictionsObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Position_RestrictionsObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Reporting_Code__All_ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Reporting_Code__All_ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Reporting_Code__All_ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Reporting_Code__All_ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Reporting_Code__All_ObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Reporting_Code__All_ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Reporting_Code__All_ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Reporting_Code__All_ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Reporting_Code__All_ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Time_Tracking_Eligibility_RuleObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Time_Tracking_Eligibility_RuleObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Time_Tracking_Eligibility_RuleObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Time_Tracking_Eligibility_RuleObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Time_Tracking_Eligibility_RuleObjectType(p1 map { scalaxb.fromXML[generated2.Time_Tracking_Eligibility_RuleObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Time_Tracking_Eligibility_RuleObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Time_Tracking_Eligibility_RuleObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Time_Tracking_Eligibility_RuleObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_FICA_Exempt_ReasonObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_FICA_Exempt_ReasonObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Payee_FICA_Exempt_ReasonObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_FICA_Exempt_ReasonObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_FICA_Exempt_ReasonObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Payee_FICA_Exempt_ReasonObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_ProgramObjectTypeFormat extends scalaxb.ElemNameParser[generated2.ProgramObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("ProgramObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.ProgramObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.ProgramObjectType(p1 map { scalaxb.fromXML[generated2.ProgramObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.ProgramObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.ProgramObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.ProgramObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_GrantObjectTypeFormat extends scalaxb.ElemNameParser[generated2.GrantObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("GrantObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.GrantObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.GrantObjectType(p1 map { scalaxb.fromXML[generated2.GrantObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.GrantObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.GrantObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.GrantObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Business_UnitObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Business_UnitObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Business_UnitObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Business_UnitObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Business_UnitObjectType(p1 map { scalaxb.fromXML[generated2.Business_UnitObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Business_UnitObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Business_UnitObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Business_UnitObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Object_ClassObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Object_ClassObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Object_ClassObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Object_ClassObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Object_ClassObjectType(p1 map { scalaxb.fromXML[generated2.Object_ClassObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Object_ClassObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Object_ClassObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Object_ClassObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Income_CodeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Income_CodeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Income_CodeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Income_CodeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Income_CodeObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Income_CodeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Income_CodeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Income_CodeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Income_CodeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_IRS_CountryObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_IRS_CountryObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_IRS_CountryObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_IRS_CountryObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_IRS_CountryObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_IRS_CountryObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_IRS_CountryObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_IRS_CountryObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_IRS_CountryObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Treaty_USAObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Treaty_USAObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Treaty_USAObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Treaty_USAObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Payee_Tax_Treaty_USAObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Treaty_USAObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_Tax_Treaty_USAObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Treaty_USAObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Payee_Tax_Treaty_USAObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Kind_of_Employer_for_Payroll_Tax_FilingObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Kind_of_Employer_for_Payroll_Tax_FilingObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectType(p1 map { scalaxb.fromXML[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Kind_of_Employer_for_Payroll_Tax_FilingObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Income_Code_SubtypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Income_Code_SubtypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Income_Code_SubtypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Income_Code_SubtypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Income_Code_SubtypeObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Income_Code_SubtypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Income_Code_SubtypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Income_Code_SubtypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Income_Code_SubtypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Payee_RPP_or_DPSP_Registration_NumbersObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Tax_Address_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Tax_Address_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Tax_Address_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Tax_Address_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Tax_Address_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Tax_Address_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Tax_Address_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Tax_Address_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Tax_Address_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_06ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_06ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_06ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_06ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_06ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_06ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_06ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_06ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_06ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_07ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_07ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_07ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_07ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_07ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_07ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_07ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_07ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_07ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_08ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_08ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_08ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_08ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_08ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_08ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_08ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_08ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_08ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_09ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_09ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_09ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_09ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_09ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_09ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_09ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_09ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_09ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_10ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_10ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_10ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_10ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_10ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_10ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_10ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_10ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_10ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_11ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_11ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_11ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_11ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_11ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_11ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_11ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_11ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_11ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_12ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_12ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_12ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_12ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_12ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_12ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_12ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_12ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_12ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_13ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_13ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_13ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_13ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_13ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_13ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_13ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_13ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_13ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_14ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_14ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_14ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_14ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_14ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_14ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_14ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_14ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_14ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Custom_Worktag_15ObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Custom_Worktag_15ObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Custom_Worktag_15ObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Custom_Worktag_15ObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Custom_Worktag_15ObjectType(p1 map { scalaxb.fromXML[generated2.Custom_Worktag_15ObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Custom_Worktag_15ObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Custom_Worktag_15ObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Custom_Worktag_15ObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_GiftObjectTypeFormat extends scalaxb.ElemNameParser[generated2.GiftObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("GiftObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.GiftObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.GiftObjectType(p1 map { scalaxb.fromXML[generated2.GiftObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.GiftObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.GiftObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.GiftObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Address_ReferenceObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Address_ReferenceObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Address_ReferenceObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Address_ReferenceObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Address_ReferenceObjectType(p1 map { scalaxb.fromXML[generated2.Address_ReferenceObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Address_ReferenceObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Address_ReferenceObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Address_ReferenceObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Web_Service_Background_Process_RuntimeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Web_Service_Background_Process_RuntimeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Web_Service_Background_Process_RuntimeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Web_Service_Background_Process_RuntimeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Web_Service_Background_Process_RuntimeObjectType(p1 map { scalaxb.fromXML[generated2.Web_Service_Background_Process_RuntimeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Web_Service_Background_Process_RuntimeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Web_Service_Background_Process_RuntimeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Web_Service_Background_Process_RuntimeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Report_Output_TagObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Report_Output_TagObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Report_Output_TagObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Report_Output_TagObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Report_Output_TagObjectType(p1 map { scalaxb.fromXML[generated2.Report_Output_TagObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Report_Output_TagObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Report_Output_TagObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Report_Output_TagObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Successor_EmployerObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Successor_EmployerObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Successor_EmployerObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Successor_EmployerObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Successor_EmployerObjectType(p1 map { scalaxb.fromXML[generated2.Successor_EmployerObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Successor_EmployerObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Successor_EmployerObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Successor_EmployerObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Company_Relationship_TypeObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Company_Relationship_TypeObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Company_Relationship_TypeObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Company_Relationship_TypeObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Company_Relationship_TypeObjectType(p1 map { scalaxb.fromXML[generated2.Company_Relationship_TypeObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Company_Relationship_TypeObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Company_Relationship_TypeObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Company_Relationship_TypeObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Communication_Usage_Behavior_TenantedObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Communication_Usage_Behavior_TenantedObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Communication_Usage_Behavior_TenantedObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Communication_Usage_Behavior_TenantedObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Communication_Usage_Behavior_TenantedObjectType(p1 map { scalaxb.fromXML[generated2.Communication_Usage_Behavior_TenantedObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Communication_Usage_Behavior_TenantedObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Communication_Usage_Behavior_TenantedObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Communication_Usage_Behavior_TenantedObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Time_Unit_for_AnnualizationObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Time_Unit_for_AnnualizationObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Time_Unit_for_AnnualizationObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Time_Unit_for_AnnualizationObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Time_Unit_for_AnnualizationObjectType(p1 map { scalaxb.fromXML[generated2.Time_Unit_for_AnnualizationObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Time_Unit_for_AnnualizationObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Time_Unit_for_AnnualizationObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Time_Unit_for_AnnualizationObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Single_Legal_EntityObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Single_Legal_EntityObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Single_Legal_EntityObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Single_Legal_EntityObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Single_Legal_EntityObjectType(p1 map { scalaxb.fromXML[generated2.Single_Legal_EntityObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Single_Legal_EntityObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Single_Legal_EntityObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Single_Legal_EntityObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_ARRCOu45AGIRC_Rubric_ValueObjectTypeFormat extends scalaxb.ElemNameParser[generated2.ARRCOu45AGIRC_Rubric_ValueObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("ARRCO-AGIRC_Rubric_ValueObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.ARRCOu45AGIRC_Rubric_ValueObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.ARRCOu45AGIRC_Rubric_ValueObjectType(p1 map { scalaxb.fromXML[generated2.ARRCOu45AGIRC_Rubric_ValueObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.ARRCOu45AGIRC_Rubric_ValueObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.ARRCOu45AGIRC_Rubric_ValueObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.ARRCOu45AGIRC_Rubric_ValueObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_NI_CategoryObjectTypeFormat extends scalaxb.ElemNameParser[generated2.NI_CategoryObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("NI_CategoryObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.NI_CategoryObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.NI_CategoryObjectType(p1 map { scalaxb.fromXML[generated2.NI_CategoryObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.NI_CategoryObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.NI_CategoryObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.NI_CategoryObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_EstablishmentObjectTypeFormat extends scalaxb.ElemNameParser[generated2.EstablishmentObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("EstablishmentObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.EstablishmentObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.EstablishmentObjectType(p1 map { scalaxb.fromXML[generated2.EstablishmentObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.EstablishmentObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.EstablishmentObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.EstablishmentObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Event_Attachment_CategoryObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Event_Attachment_CategoryObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Event_Attachment_CategoryObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Event_Attachment_CategoryObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Event_Attachment_CategoryObjectType(p1 map { scalaxb.fromXML[generated2.Event_Attachment_CategoryObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Event_Attachment_CategoryObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Event_Attachment_CategoryObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Event_Attachment_CategoryObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_IDObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_IDObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_IDObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_IDObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_IDObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_IDObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_IDObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_IDObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_IDObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Country_CityObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Country_CityObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Country_CityObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Country_CityObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Country_CityObjectType(p1 map { scalaxb.fromXML[generated2.Country_CityObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Country_CityObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Country_CityObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Country_CityObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Withholding_Order_Override_Completion_CriteriaObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Withholding_Order_Override_Completion_CriteriaObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Withholding_Order_Override_Completion_CriteriaObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Withholding_Order_Override_Completion_CriteriaObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Withholding_Order_Override_Completion_CriteriaObjectType(p1 map { scalaxb.fromXML[generated2.Withholding_Order_Override_Completion_CriteriaObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Withholding_Order_Override_Completion_CriteriaObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_Override_Completion_CriteriaObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Withholding_Order_Override_Completion_CriteriaObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Payee_Tax_Report_Type_Delivery_GroupObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Tax_Location_MappingObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Tax_Location_MappingObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Tax_Location_MappingObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Tax_Location_MappingObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Tax_Location_MappingObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Tax_Location_MappingObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Tax_Location_MappingObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Tax_Location_MappingObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Tax_Location_MappingObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Withholding_Order_Withholding_FrequencyObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Withholding_Order_Withholding_FrequencyObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Withholding_Order_Withholding_FrequencyObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Withholding_Order_Withholding_FrequencyObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Withholding_Order_Withholding_FrequencyObjectType(p1 map { scalaxb.fromXML[generated2.Withholding_Order_Withholding_FrequencyObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Withholding_Order_Withholding_FrequencyObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Withholding_Order_Withholding_FrequencyObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Withholding_Order_Withholding_FrequencyObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Payee_Tax_Location_MappingObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Payee_Tax_Location_MappingObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Payee_Tax_Location_MappingObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Payee_Tax_Location_MappingObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Payee_Tax_Location_MappingObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Payee_Tax_Location_MappingObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Payee_Tax_Location_MappingObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Payee_Tax_Location_MappingObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Payee_Tax_Location_MappingObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Pay_Group_Pay_Run_Group_SelectionObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Pay_Group_Pay_Run_Group_SelectionObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Pay_Group_Pay_Run_Group_SelectionObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Pay_Group_Pay_Run_Group_SelectionObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Pay_Group_Pay_Run_Group_SelectionObjectType(p1 map { scalaxb.fromXML[generated2.Pay_Group_Pay_Run_Group_SelectionObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Pay_Group_Pay_Run_Group_SelectionObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Pay_Group_Pay_Run_Group_SelectionObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Pay_Group_Pay_Run_Group_SelectionObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Email_ReferenceObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Email_ReferenceObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Email_ReferenceObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Email_ReferenceObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Email_ReferenceObjectType(p1 map { scalaxb.fromXML[generated2.Email_ReferenceObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Email_ReferenceObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Email_ReferenceObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Email_ReferenceObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payslip_Printing_OptionObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payslip_Printing_OptionObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payslip_Printing_OptionObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payslip_Printing_OptionObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payslip_Printing_OptionObjectType(p1 map { scalaxb.fromXML[generated2.Payslip_Printing_OptionObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payslip_Printing_OptionObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payslip_Printing_OptionObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payslip_Printing_OptionObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Payroll_Event_CategoryObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Payroll_Event_CategoryObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Payroll_Event_CategoryObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Payroll_Event_CategoryObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Payroll_Event_CategoryObjectType(p1 map { scalaxb.fromXML[generated2.Payroll_Event_CategoryObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Payroll_Event_CategoryObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Payroll_Event_CategoryObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Payroll_Event_CategoryObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Phone_ReferenceObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Phone_ReferenceObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Phone_ReferenceObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Phone_ReferenceObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Phone_ReferenceObjectType(p1 map { scalaxb.fromXML[generated2.Phone_ReferenceObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Phone_ReferenceObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Phone_ReferenceObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Phone_ReferenceObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Web_Address_ReferenceObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Web_Address_ReferenceObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Web_Address_ReferenceObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Web_Address_ReferenceObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Web_Address_ReferenceObjectType(p1 map { scalaxb.fromXML[generated2.Web_Address_ReferenceObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Web_Address_ReferenceObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Web_Address_ReferenceObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Web_Address_ReferenceObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Instant_Messenger_ReferenceObjectTypeFormat extends scalaxb.ElemNameParser[generated2.Instant_Messenger_ReferenceObjectType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Instant_Messenger_ReferenceObjectType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Instant_Messenger_ReferenceObjectType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "ID")) ^^
      { case p1 =>
      generated2.Instant_Messenger_ReferenceObjectType(p1 map { scalaxb.fromXML[generated2.Instant_Messenger_ReferenceObjectIDType](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@{urn:com.workday/bsvc}Descriptor").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@Descriptor" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: generated2.Instant_Messenger_ReferenceObjectType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@Descriptor", _) => __obj.Descriptor foreach { x => attr = scala.xml.Attribute(__scope.getPrefix("urn:com.workday/bsvc"), "Descriptor", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: generated2.Instant_Messenger_ReferenceObjectType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ID flatMap { scalaxb.toXML[generated2.Instant_Messenger_ReferenceObjectIDType](_, Some("urn:com.workday/bsvc"), Some("ID"), __scope, false) })

  }

  trait DefaultGenerated2_Validation_FaultTypeFormat extends scalaxb.ElemNameParser[generated2.Validation_FaultType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Validation_FaultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Validation_FaultType] =
      phrase(safeRep(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Validation_Error")) ^^
      { case p1 =>
      generated2.Validation_FaultType(p1 map { scalaxb.fromXML[generated2.Validation_ErrorType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Validation_FaultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Validation_Error flatMap { scalaxb.toXML[generated2.Validation_ErrorType](_, Some("urn:com.workday/bsvc"), Some("Validation_Error"), __scope, false) })

  }

  trait DefaultGenerated2_Processing_FaultTypeFormat extends scalaxb.ElemNameParser[generated2.Processing_FaultType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Processing_FaultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Processing_FaultType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Detail_Message")) ^^
      { case p1 =>
      generated2.Processing_FaultType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Processing_FaultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Detail_Message map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Detail_Message"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultGenerated2_Validation_ErrorTypeFormat extends scalaxb.ElemNameParser[generated2.Validation_ErrorType] {
    val targetNamespace: Option[String] = Some("urn:com.workday/bsvc")
    
    override def typeName: Option[String] = Some("Validation_ErrorType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[generated2.Validation_ErrorType] =
      phrase(opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Message")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Detail_Message")) ~ 
      opt(scalaxb.ElemName(Some("urn:com.workday/bsvc"), "Xpath")) ^^
      { case p1 ~ p2 ~ p3 =>
      generated2.Validation_ErrorType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: generated2.Validation_ErrorType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Message map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Message"), __scope, false) } getOrElse {Nil},
        __obj.Detail_Message map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Detail_Message"), __scope, false) } getOrElse {Nil},
        __obj.Xpath map { scalaxb.toXML[String](_, Some("urn:com.workday/bsvc"), Some("Xpath"), __scope, false) } getOrElse {Nil})

  }


  trait PayrollBindings { this: scalaxb.Soap11ClientsAsync =>
    lazy val targetNamespace: Option[String] = Some("urn:com.workday/bsvc/Payroll")
    lazy val service: generated2.PayrollPort = new PayrollBinding {}
    def baseAddress = new java.net.URI("Payroll")

    trait PayrollBinding extends generated2.PayrollPort {
      import scalaxb.ElemName._
      def get_Payroll_Results(get_Payroll_Results_Request: generated2.Get_Payroll_Results_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Results_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Results_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Results_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Results_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Results_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Balances(get_Payroll_Balances_Request: generated2.Get_Payroll_Balances_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Balances_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Balances_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Balances_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Balances_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Balances_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Offu45cycle_Payment(put_Payroll_Offu45cycle_Payment_Request: generated2.Put_Payroll_Offu45cycle_Payment_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Offu45cycle_Payment_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Offu45cycle_Payment_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Off-cycle_Payment_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Offu45cycle_Payment_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Off-cycle_Payment_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_History_Payment(put_Payroll_History_Payment_Request: generated2.Put_Payroll_History_Payment_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_History_Payment_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_History_Payment_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_History_Payment_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_History_Payment_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_History_Payment_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def submit_Payroll_Input(submit_Payroll_Input_Request: generated2.Submit_Payroll_Input_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Submit_Payroll_Input_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(submit_Payroll_Input_Request, Some("urn:com.workday/bsvc"), "Submit_Payroll_Input_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Submit_Payroll_Input_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Submit_Payroll_Input_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_History_Payments(get_Payroll_History_Payments_Request: generated2.Get_Payroll_History_Payments_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_History_Payments_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_History_Payments_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_History_Payments_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_History_Payments_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_History_Payments_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Period_Schedules(get_Period_Schedules_Request: generated2.Get_Period_Schedules_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Period_Schedules_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Period_Schedules_Request, Some("urn:com.workday/bsvc"), "Get_Period_Schedules_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Period_Schedules_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Period_Schedules_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Period_Schedule(put_Period_Schedule_Request: generated2.Put_Period_Schedule_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Period_Schedule_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Period_Schedule_Request, Some("urn:com.workday/bsvc"), "Put_Period_Schedule_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Period_Schedule_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Period_Schedule_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Submit_Payroll_Inputs(get_Submit_Payroll_Inputs_Request: generated2.Get_Submit_Payroll_Inputs_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Submit_Payroll_Inputs_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Submit_Payroll_Inputs_Request, Some("urn:com.workday/bsvc"), "Get_Submit_Payroll_Inputs_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Submit_Payroll_Inputs_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Submit_Payroll_Inputs_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def assign_Costing_Allocation(assign_Costing_Allocation_Request: generated2.Assign_Costing_Allocation_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Assign_Costing_Allocation_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(assign_Costing_Allocation_Request, Some("urn:com.workday/bsvc"), "Assign_Costing_Allocation_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Assign_Costing_Allocation_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Assign_Costing_Allocation_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Payslips(get_Payroll_Payslips_Request: generated2.Get_Payroll_Payslips_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Payslips_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Payslips_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Payslips_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Payslips_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Payslips_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Quarterly_Worker_Tax_Filing_Data(get_Quarterly_Worker_Tax_Data_Request: generated2.Get_Quarterly_Worker_Tax_Data_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Quarterly_Worker_Tax_Data_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Quarterly_Worker_Tax_Data_Request, Some("urn:com.workday/bsvc"), "Get_Quarterly_Worker_Tax_Data_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Quarterly_Worker_Tax_Data_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Quarterly_Worker_Tax_Data_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Payee_FICA(put_Payroll_Payee_FICA_Request: generated2.Put_Payroll_Payee_FICA_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Payee_FICA_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Payee_FICA_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Payee_FICA_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Payee_FICA_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Payee_FICA_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Periodic_Worker_Tax_Filing_Data(get_Periodic_Worker_Tax_Filing_Data_Request: generated2.Get_Periodic_Worker_Tax_Filing_Data_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Periodic_Worker_Tax_Filing_Data_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Periodic_Worker_Tax_Filing_Data_Request, Some("urn:com.workday/bsvc"), "Get_Periodic_Worker_Tax_Filing_Data_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Periodic_Worker_Tax_Filing_Data_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Periodic_Worker_Tax_Filing_Data_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Periodic_Company_Tax_Filing_Data(get_Periodic_Company_Tax_Filing_Data_Request: generated2.Get_Periodic_Company_Tax_Filing_Data_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Periodic_Company_Tax_Filing_Data_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Periodic_Company_Tax_Filing_Data_Request, Some("urn:com.workday/bsvc"), "Get_Periodic_Company_Tax_Filing_Data_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Periodic_Company_Tax_Filing_Data_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Periodic_Company_Tax_Filing_Data_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Payee_PT1s(get_Payroll_Payee_PT1s_Request: generated2.Get_Payroll_Payee_PT1s_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Payee_PT1s_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Payee_PT1s_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Payee_PT1s_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Payee_PT1s_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Payee_PT1s_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Payee_PT1(put_Payroll_Payee_PT1_Request: generated2.Put_Payroll_Payee_PT1_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Payee_PT1_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Payee_PT1_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Payee_PT1_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Payee_PT1_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Payee_PT1_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Payee_FICAs(get_Payroll_Payee_FICAs_Request: generated2.Get_Payroll_Payee_FICAs_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Payee_FICAs_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Payee_FICAs_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Payee_FICAs_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Payee_FICAs_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Payee_FICAs_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Offu45cycle_Payments(get_Payroll_Offu45cycle_Payments_Request: generated2.Get_Payroll_Offu45cycle_Payments_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Offu45cycle_Payments_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Offu45cycle_Payments_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Off-cycle_Payments_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Offu45cycle_Payments_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Off-cycle_Payments_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Company_Payment_Dates(get_Company_Payment_Dates_Request: generated2.Get_Company_Payment_Dates_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Company_Payment_Dates_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Company_Payment_Dates_Request, Some("urn:com.workday/bsvc"), "Get_Company_Payment_Dates_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Company_Payment_Dates_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Company_Payment_Dates_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Payee_TD1s(get_Payroll_Payee_TD1s_Request: generated2.Get_Payroll_Payee_TD1s_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Payee_TD1s_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Payee_TD1s_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Payee_TD1s_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Payee_TD1s_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Payee_TD1s_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Payee_TD1(put_Payroll_Payee_TD1_Request: generated2.Put_Payroll_Payee_TD1_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Payee_T1_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Payee_TD1_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Payee_TD1_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Payee_T1_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Payee_T1_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Canadian_Record_of_Employment_Data(get_Canadian_Record_of_Employment_Data_Request: generated2.Get_Canadian_Record_of_Employment_Data_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Canadian_Record_of_Employment_Data_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Canadian_Record_of_Employment_Data_Request, Some("urn:com.workday/bsvc"), "Get_Canadian_Record_of_Employment_Data_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Canadian_Record_of_Employment_Data_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Canadian_Record_of_Employment_Data_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_ROE_History_Data(put_ROE_History_Data_Request: generated2.Put_ROE_History_Data_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_ROE_History_Data_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_ROE_History_Data_Request, Some("urn:com.workday/bsvc"), "Put_ROE_History_Data_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_ROE_History_Data_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_ROE_History_Data_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_ROE_History_Data(get_ROE_History_Data_Request: generated2.Get_ROE_History_Data_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_ROE_History_Data_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_ROE_History_Data_Request, Some("urn:com.workday/bsvc"), "Get_ROE_History_Data_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_ROE_History_Data_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_ROE_History_Data_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Canadian_Record_of_Employment_Data(put_Canadian_Record_of_Employment_Data_Request: generated2.Put_Canadian_Record_of_Employment_Data_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Canadian_Record_of_Employment_Data_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Canadian_Record_of_Employment_Data_Request, Some("urn:com.workday/bsvc"), "Put_Canadian_Record_of_Employment_Data_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Canadian_Record_of_Employment_Data_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Canadian_Record_of_Employment_Data_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Federal_Wu454_Tax_Election(get_Payroll_Federal_Wu454_Tax_Elections_Request: generated2.Get_Payroll_Federal_Wu454_Tax_Elections_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Federal_Wu454_Tax_Elections_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Federal_Wu454_Tax_Elections_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Federal_W-4_Tax_Elections_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Federal_Wu454_Tax_Elections_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Federal_W-4_Tax_Elections_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Federal_Wu454_Tax_Election(put_Payroll_Federal_Wu454_Tax_Election_Request: generated2.Put_Payroll_Federal_Wu454_Tax_Election_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Federal_Wu454_Tax_Election_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Federal_Wu454_Tax_Election_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Federal_W-4_Tax_Election_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Federal_Wu454_Tax_Election_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Federal_W-4_Tax_Election_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Worker_Tax_Treaty(put_Payroll_Worker_Tax_Treaty_Request: generated2.Put_Payroll_Worker_Tax_Treaty_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Worker_Tax_Treaty_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Worker_Tax_Treaty_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Worker_Tax_Treaty_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Worker_Tax_Treaty_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Worker_Tax_Treaty_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Worker_Tax_Treaties(get_Payroll_Worker_Tax_Treaties_Request: generated2.Get_Payroll_Worker_Tax_Treaties_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Worker_Tax_Treaties_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Worker_Tax_Treaties_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Worker_Tax_Treaties_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Worker_Tax_Treaties_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Worker_Tax_Treaties_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Involuntary_Withholding_Orders(get_Payroll_Involuntary_Withholding_Orders_Request: generated2.Get_Payroll_Involuntary_Withholding_Orders_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Involuntary_Withholding_Orders_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Involuntary_Withholding_Orders_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Involuntary_Withholding_Orders_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Involuntary_Withholding_Orders_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Involuntary_Withholding_Orders_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Involuntary_Withholding_Order(put_Payroll_Involuntary_Withholding_Order_Request: generated2.Put_Payroll_Involuntary_Withholding_Order_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Involuntary_Withholding_Order_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Involuntary_Withholding_Order_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Involuntary_Withholding_Order_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Involuntary_Withholding_Order_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Involuntary_Withholding_Order_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def change_No_Retro_Processing_Prior_To(change_No_Retro_Processing_Prior_To_Request: generated2.Change_No_Retro_Processing_Prior_To_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Change_No_Retro_Processing_Prior_To_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(change_No_Retro_Processing_Prior_To_Request, Some("urn:com.workday/bsvc"), "Change_No_Retro_Processing_Prior_To_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Change_No_Retro_Processing_Prior_To_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Change_No_Retro_Processing_Prior_To_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Multiple_Worksite_Report(get_Multiple_Worksite_Report_Request: generated2.Get_Multiple_Worksite_Report_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Multiple_Worksite_Report_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Multiple_Worksite_Report_Request, Some("urn:com.workday/bsvc"), "Get_Multiple_Worksite_Report_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Multiple_Worksite_Report_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Multiple_Worksite_Report_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Limit_Overrides(get_Payroll_Limit_Overrides_Request: generated2.Get_Payroll_Limit_Overrides_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Limit_Overrides_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Limit_Overrides_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Limit_Overrides_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Limit_Overrides_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Limit_Overrides_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Limit_Override(put_Payroll_Limit_Override_Request: generated2.Put_Payroll_Limit_Override_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Limit_Override_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Limit_Override_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Limit_Override_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Limit_Override_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Limit_Override_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Worker_Costing_Allocations(get_Worker_Costing_Allocations_Request: generated2.Get_Worker_Costing_Allocations_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Worker_Costing_Allocations_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Worker_Costing_Allocations_Request, Some("urn:com.workday/bsvc"), "Get_Worker_Costing_Allocations_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Worker_Costing_Allocations_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Worker_Costing_Allocations_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers(get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_Request: generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Payee_RPP_or_DPSP_Registration_Numbers_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Payee_RPP_or_DPSP_Registration_Number(put_Payroll_Payee_RPP_or_DPSP_Registration_Number_Request: generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Payee_RPP_or_DPSP_Registration_Number_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Payee_RPP_or_DPSP_Registration_Number_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_USA_State_and_Local_Tax_Elections(get_Payroll_USA_State_and_Local_Tax_Elections_Request: generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_USA_State_and_Local_Tax_Elections_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_USA_State_and_Local_Tax_Elections_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_USA_State_and_Local_Tax_Elections_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_USA_State_and_Local_Tax_Elections_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_USA_State_and_Local_Tax_Election(put_Payroll_USA_State_and_Local_Tax_Election_Request: generated2.Put_Payroll_USA_State_and_Local_Tax_Election_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_USA_State_and_Local_Tax_Election_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_USA_State_and_Local_Tax_Election_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_USA_State_and_Local_Tax_Election_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_USA_State_and_Local_Tax_Election_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_USA_State_and_Local_Tax_Election_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election(get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request: generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election(put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request: generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Payee_Ongoing_Work_Jurisdiction_Tax_Election_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Monthly_Worker_Tax_Filing_Data(get_Monthly_Worker_Tax_Filing_Data_Request: generated2.Get_Monthly_Worker_Tax_Filing_Data_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Monthly_Worker_Tax_Filing_Data_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Monthly_Worker_Tax_Filing_Data_Request, Some("urn:com.workday/bsvc"), "Get_Monthly_Worker_Tax_Filing_Data_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Monthly_Worker_Tax_Filing_Data_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Monthly_Worker_Tax_Filing_Data_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Successor_Employers(get_Successor_Employers_Request: generated2.Get_Successor_Employers_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Successor_Employers_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Successor_Employers_Request, Some("urn:com.workday/bsvc"), "Get_Successor_Employers_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Successor_Employers_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Successor_Employers_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Successor_Employer(put_Successor_Employer_Request: generated2.Put_Successor_Employer_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Successor_Employer_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Successor_Employer_Request, Some("urn:com.workday/bsvc"), "Put_Successor_Employer_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Successor_Employer_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Successor_Employer_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_ROE_Prior_Period_History_Results(put_Payroll_ROE_Prior_Period_History_Results_Request: generated2.Put_Payroll_ROE_Prior_Period_History_Results_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_ROE_Prior_Period_History_Results_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_ROE_Prior_Period_History_Results_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_ROE_Prior_Period_History_Results_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_ROE_Prior_Period_History_Results_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_ROE_Prior_Period_History_Results_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Payee_FUTA(put_Payroll_Payee_FUTA_Request: generated2.Put_Payroll_Payee_FUTA_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Payee_FUTA_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Payee_FUTA_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Payee_FUTA_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Payee_FUTA_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Payee_FUTA_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Payee_FUTAs(get_Payroll_Payee_FUTAs_Request: generated2.Get_Payroll_Payee_FUTAs_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Payee_FUTAs_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Payee_FUTAs_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Payee_FUTAs_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Payee_FUTAs_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Payee_FUTAs_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Deduction_Recipients(get_Payroll_Deduction_Recipients_Request: generated2.Get_Payroll_Deduction_Recipients_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Deduction_Recipients_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Deduction_Recipients_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Deduction_Recipients_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Deduction_Recipients_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Deduction_Recipients_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Deduction_Recipient(put_Payroll_Deduction_Recipient_Request: generated2.Put_Payroll_Deduction_Recipient_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Deduction_Recipient_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Deduction_Recipient_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Deduction_Recipient_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Deduction_Recipient_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Deduction_Recipient_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Paycheck_Deliveries(get_Paycheck_Deliveries_Request: generated2.Get_Paycheck_Deliveries_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Paycheck_Deliveries_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Paycheck_Deliveries_Request, Some("urn:com.workday/bsvc"), "Get_Paycheck_Deliveries_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Paycheck_Deliveries_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Paycheck_Deliveries_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Paycheck_Delivery__Public_(put_Paycheck_Delivery__Public__Request: generated2.Put_Paycheck_Delivery__Public__RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Paycheck_Delivery__Public__ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Paycheck_Delivery__Public__Request, Some("urn:com.workday/bsvc"), "Put_Paycheck_Delivery__Public__Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Paycheck_Delivery__Public__ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Paycheck_Delivery__Public__Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Single_Legal_Entity(put_Single_Legal_Entity_Request: generated2.Put_Single_Legal_Entity_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Single_Legal_Entity_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Single_Legal_Entity_Request, Some("urn:com.workday/bsvc"), "Put_Single_Legal_Entity_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Single_Legal_Entity_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Single_Legal_Entity_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Single_Legal_Entities(get_Single_Legal_Entities_Request: generated2.Get_Single_Legal_Entities_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Single_Legal_Entities_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Single_Legal_Entities_Request, Some("urn:com.workday/bsvc"), "Get_Single_Legal_Entities_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Single_Legal_Entities_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Single_Legal_Entities_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Wu452_Wu452C_Printing_Election(get_Wu452_Wu452C_Printing_Election_Request: generated2.Get_Wu452_Wu452C_Printing_Election_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Wu452_Wu452C_Printing_Election_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Wu452_Wu452C_Printing_Election_Request, Some("urn:com.workday/bsvc"), "Get_W-2_W-2C_Printing_Election_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Wu452_Wu452C_Printing_Election_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_W-2_W-2C_Printing_Election_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Wu452_Wu452C_Printing_Election(put_Wu452_Wu452C_Printing_Election_Request: generated2.Put_Wu452_Wu452C_Printing_Election_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Wu452_Wu452C_Printing_Election_Request, Some("urn:com.workday/bsvc"), "Put_W-2_W-2C_Printing_Election_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Wu452_Wu452C_Printing_Election_for_Worker_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_W-2_W-2C_Printing_Election_for_Worker_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Tax_Levy_Deduction_Restrictions(get_Tax_Levy_Deduction_Restrictions_Request: generated2.Get_Tax_Levy_Deduction_Restrictions_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Tax_Levy_Deduction_Restrictions_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Tax_Levy_Deduction_Restrictions_Request, Some("urn:com.workday/bsvc"), "Get_Tax_Levy_Deduction_Restrictions_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Tax_Levy_Deduction_Restrictions_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Tax_Levy_Deduction_Restrictions_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Tax_Levy_Deduction_Restriction(put_Tax_Levy_Deduction_Restriction_Request: generated2.Put_Tax_Levy_Deduction_Restriction_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Tax_Levy_Deduction_Restriction_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Tax_Levy_Deduction_Restriction_Request, Some("urn:com.workday/bsvc"), "Put_Tax_Levy_Deduction_Restriction_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Tax_Levy_Deduction_Restriction_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Tax_Levy_Deduction_Restriction_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Tax_Document_Delivery(put_Tax_Document_Delivery_Request: generated2.Put_Tax_Document_Delivery_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Tax_Document_Delivery_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Tax_Document_Delivery_Request, Some("urn:com.workday/bsvc"), "Put_Tax_Document_Delivery_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Tax_Document_Delivery_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Tax_Document_Delivery_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Tax_Document_Deliveries(get_Tax_Document_Deliveries_Request: generated2.Get_Tax_Document_Deliveries_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Tax_Document_Deliveries_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Tax_Document_Deliveries_Request, Some("urn:com.workday/bsvc"), "Get_Tax_Document_Deliveries_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Tax_Document_Deliveries_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Tax_Document_Deliveries_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Periodic_Company_CAN_Tax_Remittance_Data(get_Periodic_Company_CAN_Tax_Remittance_Data_Request: generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Periodic_Company_CAN_Tax_Remittance_Data_Request, Some("urn:com.workday/bsvc"), "Get_Periodic_Company_CAN_Tax_Remittance_Data_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Periodic_Company_CAN_Tax_Remittance_Data_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Periodic_Company_CAN_Tax_Remittance_Data_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Withholding_Order_Local_Minimum_Wage_Rate(put_Withholding_Order_Local_Minimum_Wage_Rate_Request: generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Withholding_Order_Local_Minimum_Wage_Rate_Request, Some("urn:com.workday/bsvc"), "Put_Withholding_Order_Local_Minimum_Wage_Rate_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Withholding_Order_Local_Minimum_Wage_Rate_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Withholding_Order_Local_Minimum_Wage_Rate(get_Withholding_Order_Local_Minimum_Wage_Rate_Request: generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Withholding_Order_Local_Minimum_Wage_Rate_Request, Some("urn:com.workday/bsvc"), "Get_Withholding_Order_Local_Minimum_Wage_Rate_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Withholding_Order_Local_Minimum_Wage_Rate_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Withholding_Order_Local_Minimum_Wage_Rate_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Tax_Mappings_on_Location(get_Payroll_Tax_Mappings_on_Location_Request: generated2.Get_Payroll_Tax_Mappings_on_Location_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Tax_Mappings_on_Location_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Tax_Mappings_on_Location_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Tax_Mappings_on_Location_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Tax_Mappings_on_Location_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Tax_Mappings_on_Location_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Tax_Mapping_on_Location(put_Payroll_Tax_Mapping_on_Location_Request: generated2.Put_Payroll_Tax_Mapping_on_Location_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Tax_Mapping_on_Location_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Tax_Mapping_on_Location_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Tax_Mapping_on_Location_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Tax_Mapping_on_Location_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Tax_Mapping_on_Location_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Run_Pay_Calculation(put_Run_Pay_Calculation_Request: generated2.Put_Run_Pay_Calculation_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Run_Pay_Calculation_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Run_Pay_Calculation_Request, Some("urn:com.workday/bsvc"), "Put_Run_Pay_Calculation_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Run_Pay_Calculation_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Run_Pay_Calculation_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_EFW2_Year_End_Worker_Filing_Data(get_EFW2_Year_End_Worker_Filing_Data_Request: generated2.Get_EFW2_Year_End_Worker_Filing_Data_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_EFW2_Year_End_Worker_Filing_Data_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_EFW2_Year_End_Worker_Filing_Data_Request, Some("urn:com.workday/bsvc"), "Get_EFW2_Year_End_Worker_Filing_Data_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_EFW2_Year_End_Worker_Filing_Data_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_EFW2_Year_End_Worker_Filing_Data_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Preu45Printed_Payslips(get_Payroll_Preu45Printed_Payslips_Request: generated2.Get_Payroll_Preu45Printed_Payslips_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Preu45Printed_Payslips_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Preu45Printed_Payslips_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Pre-Printed_Payslips_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Preu45Printed_Payslips_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Pre-Printed_Payslips_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_EFW2_Year_End_Employer_Filing_Data(get_EFW2_Year_End_Employer_Filing_Data_Request: generated2.Get_EFW2_Year_End_Employer_Filing_Data_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_EFW2_Year_End_Employer_Filing_Data_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_EFW2_Year_End_Employer_Filing_Data_Request, Some("urn:com.workday/bsvc"), "Get_EFW2_Year_End_Employer_Filing_Data_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_EFW2_Year_End_Employer_Filing_Data_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_EFW2_Year_End_Employer_Filing_Data_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Run_Pay_Calculation(get_Run_Pay_Calculation_Request: generated2.Get_Run_Pay_Calculation_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Run_Pay_Calculation_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Run_Pay_Calculation_Request, Some("urn:com.workday/bsvc"), "Get_Run_Pay_Calculation_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Run_Pay_Calculation_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Run_Pay_Calculation_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Payee_Tax_Location_Mappings(get_Payroll_Payee_Tax_Location_Mappings_Request: generated2.Get_Payroll_Payee_Tax_Location_Mappings_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Payee_Tax_Location_Mappings_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Payee_Tax_Location_Mappings_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Payee_Tax_Location_Mappings_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Payee_Tax_Location_Mappings_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Payee_Tax_Location_Mappings_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def put_Payroll_Payee_Tax_Location_Mapping(put_Payroll_Payee_Tax_Location_Mapping_Request: generated2.Put_Payroll_Payee_Tax_Location_Mapping_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Payroll_Payee_Tax_Location_Mapping_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(put_Payroll_Payee_Tax_Location_Mapping_Request, Some("urn:com.workday/bsvc"), "Put_Payroll_Payee_Tax_Location_Mapping_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Payroll_Payee_Tax_Location_Mapping_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Payroll_Payee_Tax_Location_Mapping_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def get_Payroll_Reporting_Codes_for_Workers(get_Payroll_Reporting_Codes_for_Workers_Request: generated2.Get_Payroll_Reporting_Codes_for_Workers_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Get_Payroll_Reporting_Codes_for_Workers_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(get_Payroll_Reporting_Codes_for_Workers_Request, Some("urn:com.workday/bsvc"), "Get_Payroll_Reporting_Codes_for_Workers_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Get_Payroll_Reporting_Codes_for_Workers_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Get_Payroll_Reporting_Codes_for_Workers_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def import_Payroll_Input(import_Payroll_Input_Request: generated2.Import_Payroll_Input_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Import_Process_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(import_Payroll_Input_Request, Some("urn:com.workday/bsvc"), "Import_Payroll_Input_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Import_Process_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Import_Process_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def import_Payroll_Offu45Cycle_Payment(import_Payroll_Offu45cycle_Payment_Request: generated2.Import_Payroll_Offu45cycle_Payment_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Import_Process_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(import_Payroll_Offu45cycle_Payment_Request, Some("urn:com.workday/bsvc"), "Import_Payroll_Off-cycle_Payment_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Import_Process_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Import_Process_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def import_ROE_Prior_Period_History_Results(import_ROE_Prior_Period_History_Results_Request: generated2.Import_ROE_Prior_Period_History_Results_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Import_Process_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(import_ROE_Prior_Period_History_Results_Request, Some("urn:com.workday/bsvc"), "Import_ROE_Prior_Period_History_Results_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Import_Process_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Import_Process_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
      def import_Maintain_Payroll_Reporting_Codes_for_Workers(import_Maintain_Payroll_Reporting_Codes_for_Worker_Request: generated2.Import_Maintain_Payroll_Reporting_Codes_for_Worker_RequestType, workday_Common_Header: generated2.Workday_Common_HeaderType)(implicit ec: ExecutionContext): Future[generated2.Put_Import_Process_ResponseType] = 
        soapClient.requestResponse(scalaxb.toXML(import_Maintain_Payroll_Reporting_Codes_for_Worker_Request, Some("urn:com.workday/bsvc"), "Import_Maintain_Payroll_Reporting_Codes_for_Worker_Request", defaultScope),
            scalaxb.toXML(workday_Common_Header, Some("urn:com.workday/bsvc"), "Workday_Common_Header", defaultScope), defaultScope, baseAddress, "POST", None).transform({ case (header, body) => 
            scalaxb.fromXML[generated2.Put_Import_Process_ResponseType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "Put_Import_Process_Response").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Validation_Fault")) } => x.asFault[generated2.Validation_FaultType]
              case x: scalaxb.Soap11Fault[_] if x.detail.exists { case soapenvelope11.Detail(any, _) => any.headOption.exists(_.key.contains("Processing_Fault")) } => x.asFault[generated2.Processing_FaultType]
              case x => x
            })
    }
  }



}

